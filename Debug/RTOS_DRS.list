
RTOS_DRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c70  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08007d30  08007d30  00017d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eb4  08007eb4  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  08007eb4  08007eb4  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007eb4  08007eb4  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eb4  08007eb4  00017eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007eb8  08007eb8  00017eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007ebc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000310c  20000100  08007fb8  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000320c  08007fb8  0002320c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001817d  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031bd  00000000  00000000  000382a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001548  00000000  00000000  0003b460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  0003c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000184d9  00000000  00000000  0003dd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010044  00000000  00000000  00056251  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c116  00000000  00000000  00066295  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f23ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e98  00000000  00000000  000f2428  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000100 	.word	0x20000100
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007d18 	.word	0x08007d18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000104 	.word	0x20000104
 8000104:	08007d18 	.word	0x08007d18

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 fc0d 	bl	8000a50 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fb65 	bl	8000910 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fbff 	bl	8000a50 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fbf5 	bl	8000a50 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fb87 	bl	8000988 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fb7d 	bl	8000988 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_d2uiz>:
 800029c:	b570      	push	{r4, r5, r6, lr}
 800029e:	2200      	movs	r2, #0
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <__aeabi_d2uiz+0x38>)
 80002a2:	0004      	movs	r4, r0
 80002a4:	000d      	movs	r5, r1
 80002a6:	f7ff ffef 	bl	8000288 <__aeabi_dcmpge>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d104      	bne.n	80002b8 <__aeabi_d2uiz+0x1c>
 80002ae:	0020      	movs	r0, r4
 80002b0:	0029      	movs	r1, r5
 80002b2:	f001 f9ef 	bl	8001694 <__aeabi_d2iz>
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <__aeabi_d2uiz+0x38>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	0020      	movs	r0, r4
 80002be:	0029      	movs	r1, r5
 80002c0:	f000 fea0 	bl	8001004 <__aeabi_dsub>
 80002c4:	f001 f9e6 	bl	8001694 <__aeabi_d2iz>
 80002c8:	2380      	movs	r3, #128	; 0x80
 80002ca:	061b      	lsls	r3, r3, #24
 80002cc:	469c      	mov	ip, r3
 80002ce:	4460      	add	r0, ip
 80002d0:	e7f1      	b.n	80002b6 <__aeabi_d2uiz+0x1a>
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	41e00000 	.word	0x41e00000

080002d8 <__aeabi_dadd>:
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	464f      	mov	r7, r9
 80002dc:	4646      	mov	r6, r8
 80002de:	46d6      	mov	lr, sl
 80002e0:	000c      	movs	r4, r1
 80002e2:	0309      	lsls	r1, r1, #12
 80002e4:	b5c0      	push	{r6, r7, lr}
 80002e6:	0a49      	lsrs	r1, r1, #9
 80002e8:	0f47      	lsrs	r7, r0, #29
 80002ea:	005e      	lsls	r6, r3, #1
 80002ec:	4339      	orrs	r1, r7
 80002ee:	031f      	lsls	r7, r3, #12
 80002f0:	0fdb      	lsrs	r3, r3, #31
 80002f2:	469c      	mov	ip, r3
 80002f4:	0065      	lsls	r5, r4, #1
 80002f6:	0a7b      	lsrs	r3, r7, #9
 80002f8:	0f57      	lsrs	r7, r2, #29
 80002fa:	431f      	orrs	r7, r3
 80002fc:	0d6d      	lsrs	r5, r5, #21
 80002fe:	0fe4      	lsrs	r4, r4, #31
 8000300:	0d76      	lsrs	r6, r6, #21
 8000302:	46a1      	mov	r9, r4
 8000304:	00c0      	lsls	r0, r0, #3
 8000306:	46b8      	mov	r8, r7
 8000308:	00d2      	lsls	r2, r2, #3
 800030a:	1bab      	subs	r3, r5, r6
 800030c:	4564      	cmp	r4, ip
 800030e:	d07b      	beq.n	8000408 <__aeabi_dadd+0x130>
 8000310:	2b00      	cmp	r3, #0
 8000312:	dd5f      	ble.n	80003d4 <__aeabi_dadd+0xfc>
 8000314:	2e00      	cmp	r6, #0
 8000316:	d000      	beq.n	800031a <__aeabi_dadd+0x42>
 8000318:	e0a4      	b.n	8000464 <__aeabi_dadd+0x18c>
 800031a:	003e      	movs	r6, r7
 800031c:	4316      	orrs	r6, r2
 800031e:	d100      	bne.n	8000322 <__aeabi_dadd+0x4a>
 8000320:	e112      	b.n	8000548 <__aeabi_dadd+0x270>
 8000322:	1e5e      	subs	r6, r3, #1
 8000324:	2e00      	cmp	r6, #0
 8000326:	d000      	beq.n	800032a <__aeabi_dadd+0x52>
 8000328:	e19e      	b.n	8000668 <__aeabi_dadd+0x390>
 800032a:	1a87      	subs	r7, r0, r2
 800032c:	4643      	mov	r3, r8
 800032e:	42b8      	cmp	r0, r7
 8000330:	4180      	sbcs	r0, r0
 8000332:	2501      	movs	r5, #1
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	4240      	negs	r0, r0
 8000338:	1a09      	subs	r1, r1, r0
 800033a:	020b      	lsls	r3, r1, #8
 800033c:	d400      	bmi.n	8000340 <__aeabi_dadd+0x68>
 800033e:	e131      	b.n	80005a4 <__aeabi_dadd+0x2cc>
 8000340:	0249      	lsls	r1, r1, #9
 8000342:	0a4e      	lsrs	r6, r1, #9
 8000344:	2e00      	cmp	r6, #0
 8000346:	d100      	bne.n	800034a <__aeabi_dadd+0x72>
 8000348:	e16e      	b.n	8000628 <__aeabi_dadd+0x350>
 800034a:	0030      	movs	r0, r6
 800034c:	f001 fa12 	bl	8001774 <__clzsi2>
 8000350:	0003      	movs	r3, r0
 8000352:	3b08      	subs	r3, #8
 8000354:	2b1f      	cmp	r3, #31
 8000356:	dd00      	ble.n	800035a <__aeabi_dadd+0x82>
 8000358:	e161      	b.n	800061e <__aeabi_dadd+0x346>
 800035a:	2220      	movs	r2, #32
 800035c:	0039      	movs	r1, r7
 800035e:	1ad2      	subs	r2, r2, r3
 8000360:	409e      	lsls	r6, r3
 8000362:	40d1      	lsrs	r1, r2
 8000364:	409f      	lsls	r7, r3
 8000366:	430e      	orrs	r6, r1
 8000368:	429d      	cmp	r5, r3
 800036a:	dd00      	ble.n	800036e <__aeabi_dadd+0x96>
 800036c:	e151      	b.n	8000612 <__aeabi_dadd+0x33a>
 800036e:	1b5d      	subs	r5, r3, r5
 8000370:	1c6b      	adds	r3, r5, #1
 8000372:	2b1f      	cmp	r3, #31
 8000374:	dd00      	ble.n	8000378 <__aeabi_dadd+0xa0>
 8000376:	e17c      	b.n	8000672 <__aeabi_dadd+0x39a>
 8000378:	2120      	movs	r1, #32
 800037a:	1ac9      	subs	r1, r1, r3
 800037c:	003d      	movs	r5, r7
 800037e:	0030      	movs	r0, r6
 8000380:	408f      	lsls	r7, r1
 8000382:	4088      	lsls	r0, r1
 8000384:	40dd      	lsrs	r5, r3
 8000386:	1e79      	subs	r1, r7, #1
 8000388:	418f      	sbcs	r7, r1
 800038a:	0031      	movs	r1, r6
 800038c:	2207      	movs	r2, #7
 800038e:	4328      	orrs	r0, r5
 8000390:	40d9      	lsrs	r1, r3
 8000392:	2500      	movs	r5, #0
 8000394:	4307      	orrs	r7, r0
 8000396:	403a      	ands	r2, r7
 8000398:	2a00      	cmp	r2, #0
 800039a:	d009      	beq.n	80003b0 <__aeabi_dadd+0xd8>
 800039c:	230f      	movs	r3, #15
 800039e:	403b      	ands	r3, r7
 80003a0:	2b04      	cmp	r3, #4
 80003a2:	d005      	beq.n	80003b0 <__aeabi_dadd+0xd8>
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	42bb      	cmp	r3, r7
 80003a8:	41bf      	sbcs	r7, r7
 80003aa:	427f      	negs	r7, r7
 80003ac:	19c9      	adds	r1, r1, r7
 80003ae:	001f      	movs	r7, r3
 80003b0:	020b      	lsls	r3, r1, #8
 80003b2:	d400      	bmi.n	80003b6 <__aeabi_dadd+0xde>
 80003b4:	e226      	b.n	8000804 <__aeabi_dadd+0x52c>
 80003b6:	1c6a      	adds	r2, r5, #1
 80003b8:	4bc6      	ldr	r3, [pc, #792]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80003ba:	0555      	lsls	r5, r2, #21
 80003bc:	0d6d      	lsrs	r5, r5, #21
 80003be:	429a      	cmp	r2, r3
 80003c0:	d100      	bne.n	80003c4 <__aeabi_dadd+0xec>
 80003c2:	e106      	b.n	80005d2 <__aeabi_dadd+0x2fa>
 80003c4:	4ac4      	ldr	r2, [pc, #784]	; (80006d8 <__aeabi_dadd+0x400>)
 80003c6:	08ff      	lsrs	r7, r7, #3
 80003c8:	400a      	ands	r2, r1
 80003ca:	0753      	lsls	r3, r2, #29
 80003cc:	0252      	lsls	r2, r2, #9
 80003ce:	433b      	orrs	r3, r7
 80003d0:	0b12      	lsrs	r2, r2, #12
 80003d2:	e08e      	b.n	80004f2 <__aeabi_dadd+0x21a>
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d000      	beq.n	80003da <__aeabi_dadd+0x102>
 80003d8:	e0b8      	b.n	800054c <__aeabi_dadd+0x274>
 80003da:	1c6b      	adds	r3, r5, #1
 80003dc:	055b      	lsls	r3, r3, #21
 80003de:	0d5b      	lsrs	r3, r3, #21
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	dc00      	bgt.n	80003e6 <__aeabi_dadd+0x10e>
 80003e4:	e130      	b.n	8000648 <__aeabi_dadd+0x370>
 80003e6:	1a87      	subs	r7, r0, r2
 80003e8:	4643      	mov	r3, r8
 80003ea:	42b8      	cmp	r0, r7
 80003ec:	41b6      	sbcs	r6, r6
 80003ee:	1acb      	subs	r3, r1, r3
 80003f0:	4276      	negs	r6, r6
 80003f2:	1b9e      	subs	r6, r3, r6
 80003f4:	0233      	lsls	r3, r6, #8
 80003f6:	d500      	bpl.n	80003fa <__aeabi_dadd+0x122>
 80003f8:	e14c      	b.n	8000694 <__aeabi_dadd+0x3bc>
 80003fa:	003b      	movs	r3, r7
 80003fc:	4333      	orrs	r3, r6
 80003fe:	d1a1      	bne.n	8000344 <__aeabi_dadd+0x6c>
 8000400:	2200      	movs	r2, #0
 8000402:	2400      	movs	r4, #0
 8000404:	2500      	movs	r5, #0
 8000406:	e070      	b.n	80004ea <__aeabi_dadd+0x212>
 8000408:	2b00      	cmp	r3, #0
 800040a:	dc00      	bgt.n	800040e <__aeabi_dadd+0x136>
 800040c:	e0e5      	b.n	80005da <__aeabi_dadd+0x302>
 800040e:	2e00      	cmp	r6, #0
 8000410:	d100      	bne.n	8000414 <__aeabi_dadd+0x13c>
 8000412:	e083      	b.n	800051c <__aeabi_dadd+0x244>
 8000414:	4eaf      	ldr	r6, [pc, #700]	; (80006d4 <__aeabi_dadd+0x3fc>)
 8000416:	42b5      	cmp	r5, r6
 8000418:	d060      	beq.n	80004dc <__aeabi_dadd+0x204>
 800041a:	2680      	movs	r6, #128	; 0x80
 800041c:	0436      	lsls	r6, r6, #16
 800041e:	4337      	orrs	r7, r6
 8000420:	46b8      	mov	r8, r7
 8000422:	2b38      	cmp	r3, #56	; 0x38
 8000424:	dc00      	bgt.n	8000428 <__aeabi_dadd+0x150>
 8000426:	e13e      	b.n	80006a6 <__aeabi_dadd+0x3ce>
 8000428:	4643      	mov	r3, r8
 800042a:	4313      	orrs	r3, r2
 800042c:	001f      	movs	r7, r3
 800042e:	1e7a      	subs	r2, r7, #1
 8000430:	4197      	sbcs	r7, r2
 8000432:	183f      	adds	r7, r7, r0
 8000434:	4287      	cmp	r7, r0
 8000436:	4180      	sbcs	r0, r0
 8000438:	4240      	negs	r0, r0
 800043a:	1809      	adds	r1, r1, r0
 800043c:	020b      	lsls	r3, r1, #8
 800043e:	d400      	bmi.n	8000442 <__aeabi_dadd+0x16a>
 8000440:	e0b0      	b.n	80005a4 <__aeabi_dadd+0x2cc>
 8000442:	4ba4      	ldr	r3, [pc, #656]	; (80006d4 <__aeabi_dadd+0x3fc>)
 8000444:	3501      	adds	r5, #1
 8000446:	429d      	cmp	r5, r3
 8000448:	d100      	bne.n	800044c <__aeabi_dadd+0x174>
 800044a:	e0c3      	b.n	80005d4 <__aeabi_dadd+0x2fc>
 800044c:	4aa2      	ldr	r2, [pc, #648]	; (80006d8 <__aeabi_dadd+0x400>)
 800044e:	087b      	lsrs	r3, r7, #1
 8000450:	400a      	ands	r2, r1
 8000452:	2101      	movs	r1, #1
 8000454:	400f      	ands	r7, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	0851      	lsrs	r1, r2, #1
 800045a:	07d3      	lsls	r3, r2, #31
 800045c:	2207      	movs	r2, #7
 800045e:	431f      	orrs	r7, r3
 8000460:	403a      	ands	r2, r7
 8000462:	e799      	b.n	8000398 <__aeabi_dadd+0xc0>
 8000464:	4e9b      	ldr	r6, [pc, #620]	; (80006d4 <__aeabi_dadd+0x3fc>)
 8000466:	42b5      	cmp	r5, r6
 8000468:	d038      	beq.n	80004dc <__aeabi_dadd+0x204>
 800046a:	2680      	movs	r6, #128	; 0x80
 800046c:	0436      	lsls	r6, r6, #16
 800046e:	4337      	orrs	r7, r6
 8000470:	46b8      	mov	r8, r7
 8000472:	2b38      	cmp	r3, #56	; 0x38
 8000474:	dd00      	ble.n	8000478 <__aeabi_dadd+0x1a0>
 8000476:	e0dc      	b.n	8000632 <__aeabi_dadd+0x35a>
 8000478:	2b1f      	cmp	r3, #31
 800047a:	dc00      	bgt.n	800047e <__aeabi_dadd+0x1a6>
 800047c:	e130      	b.n	80006e0 <__aeabi_dadd+0x408>
 800047e:	001e      	movs	r6, r3
 8000480:	4647      	mov	r7, r8
 8000482:	3e20      	subs	r6, #32
 8000484:	40f7      	lsrs	r7, r6
 8000486:	46bc      	mov	ip, r7
 8000488:	2b20      	cmp	r3, #32
 800048a:	d004      	beq.n	8000496 <__aeabi_dadd+0x1be>
 800048c:	2640      	movs	r6, #64	; 0x40
 800048e:	1af3      	subs	r3, r6, r3
 8000490:	4646      	mov	r6, r8
 8000492:	409e      	lsls	r6, r3
 8000494:	4332      	orrs	r2, r6
 8000496:	0017      	movs	r7, r2
 8000498:	4663      	mov	r3, ip
 800049a:	1e7a      	subs	r2, r7, #1
 800049c:	4197      	sbcs	r7, r2
 800049e:	431f      	orrs	r7, r3
 80004a0:	e0cc      	b.n	800063c <__aeabi_dadd+0x364>
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d100      	bne.n	80004a8 <__aeabi_dadd+0x1d0>
 80004a6:	e204      	b.n	80008b2 <__aeabi_dadd+0x5da>
 80004a8:	4643      	mov	r3, r8
 80004aa:	4313      	orrs	r3, r2
 80004ac:	d100      	bne.n	80004b0 <__aeabi_dadd+0x1d8>
 80004ae:	e159      	b.n	8000764 <__aeabi_dadd+0x48c>
 80004b0:	074b      	lsls	r3, r1, #29
 80004b2:	08c0      	lsrs	r0, r0, #3
 80004b4:	4318      	orrs	r0, r3
 80004b6:	2380      	movs	r3, #128	; 0x80
 80004b8:	08c9      	lsrs	r1, r1, #3
 80004ba:	031b      	lsls	r3, r3, #12
 80004bc:	4219      	tst	r1, r3
 80004be:	d008      	beq.n	80004d2 <__aeabi_dadd+0x1fa>
 80004c0:	4645      	mov	r5, r8
 80004c2:	08ed      	lsrs	r5, r5, #3
 80004c4:	421d      	tst	r5, r3
 80004c6:	d104      	bne.n	80004d2 <__aeabi_dadd+0x1fa>
 80004c8:	4643      	mov	r3, r8
 80004ca:	08d0      	lsrs	r0, r2, #3
 80004cc:	0759      	lsls	r1, r3, #29
 80004ce:	4308      	orrs	r0, r1
 80004d0:	0029      	movs	r1, r5
 80004d2:	0f42      	lsrs	r2, r0, #29
 80004d4:	00c9      	lsls	r1, r1, #3
 80004d6:	4d7f      	ldr	r5, [pc, #508]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80004d8:	4311      	orrs	r1, r2
 80004da:	00c0      	lsls	r0, r0, #3
 80004dc:	074b      	lsls	r3, r1, #29
 80004de:	08ca      	lsrs	r2, r1, #3
 80004e0:	497c      	ldr	r1, [pc, #496]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80004e2:	08c0      	lsrs	r0, r0, #3
 80004e4:	4303      	orrs	r3, r0
 80004e6:	428d      	cmp	r5, r1
 80004e8:	d068      	beq.n	80005bc <__aeabi_dadd+0x2e4>
 80004ea:	0312      	lsls	r2, r2, #12
 80004ec:	056d      	lsls	r5, r5, #21
 80004ee:	0b12      	lsrs	r2, r2, #12
 80004f0:	0d6d      	lsrs	r5, r5, #21
 80004f2:	2100      	movs	r1, #0
 80004f4:	0312      	lsls	r2, r2, #12
 80004f6:	0018      	movs	r0, r3
 80004f8:	0b13      	lsrs	r3, r2, #12
 80004fa:	0d0a      	lsrs	r2, r1, #20
 80004fc:	0512      	lsls	r2, r2, #20
 80004fe:	431a      	orrs	r2, r3
 8000500:	4b76      	ldr	r3, [pc, #472]	; (80006dc <__aeabi_dadd+0x404>)
 8000502:	052d      	lsls	r5, r5, #20
 8000504:	4013      	ands	r3, r2
 8000506:	432b      	orrs	r3, r5
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	07e4      	lsls	r4, r4, #31
 800050c:	085b      	lsrs	r3, r3, #1
 800050e:	4323      	orrs	r3, r4
 8000510:	0019      	movs	r1, r3
 8000512:	bc1c      	pop	{r2, r3, r4}
 8000514:	4690      	mov	r8, r2
 8000516:	4699      	mov	r9, r3
 8000518:	46a2      	mov	sl, r4
 800051a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051c:	003e      	movs	r6, r7
 800051e:	4316      	orrs	r6, r2
 8000520:	d012      	beq.n	8000548 <__aeabi_dadd+0x270>
 8000522:	1e5e      	subs	r6, r3, #1
 8000524:	2e00      	cmp	r6, #0
 8000526:	d000      	beq.n	800052a <__aeabi_dadd+0x252>
 8000528:	e100      	b.n	800072c <__aeabi_dadd+0x454>
 800052a:	1887      	adds	r7, r0, r2
 800052c:	4287      	cmp	r7, r0
 800052e:	4180      	sbcs	r0, r0
 8000530:	4441      	add	r1, r8
 8000532:	4240      	negs	r0, r0
 8000534:	1809      	adds	r1, r1, r0
 8000536:	2501      	movs	r5, #1
 8000538:	020b      	lsls	r3, r1, #8
 800053a:	d533      	bpl.n	80005a4 <__aeabi_dadd+0x2cc>
 800053c:	2502      	movs	r5, #2
 800053e:	e785      	b.n	800044c <__aeabi_dadd+0x174>
 8000540:	4664      	mov	r4, ip
 8000542:	0033      	movs	r3, r6
 8000544:	4641      	mov	r1, r8
 8000546:	0010      	movs	r0, r2
 8000548:	001d      	movs	r5, r3
 800054a:	e7c7      	b.n	80004dc <__aeabi_dadd+0x204>
 800054c:	2d00      	cmp	r5, #0
 800054e:	d000      	beq.n	8000552 <__aeabi_dadd+0x27a>
 8000550:	e0da      	b.n	8000708 <__aeabi_dadd+0x430>
 8000552:	000c      	movs	r4, r1
 8000554:	4304      	orrs	r4, r0
 8000556:	d0f3      	beq.n	8000540 <__aeabi_dadd+0x268>
 8000558:	1c5c      	adds	r4, r3, #1
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0x286>
 800055c:	e19f      	b.n	800089e <__aeabi_dadd+0x5c6>
 800055e:	4c5d      	ldr	r4, [pc, #372]	; (80006d4 <__aeabi_dadd+0x3fc>)
 8000560:	42a6      	cmp	r6, r4
 8000562:	d100      	bne.n	8000566 <__aeabi_dadd+0x28e>
 8000564:	e12f      	b.n	80007c6 <__aeabi_dadd+0x4ee>
 8000566:	43db      	mvns	r3, r3
 8000568:	2b38      	cmp	r3, #56	; 0x38
 800056a:	dd00      	ble.n	800056e <__aeabi_dadd+0x296>
 800056c:	e166      	b.n	800083c <__aeabi_dadd+0x564>
 800056e:	2b1f      	cmp	r3, #31
 8000570:	dd00      	ble.n	8000574 <__aeabi_dadd+0x29c>
 8000572:	e183      	b.n	800087c <__aeabi_dadd+0x5a4>
 8000574:	2420      	movs	r4, #32
 8000576:	0005      	movs	r5, r0
 8000578:	1ae4      	subs	r4, r4, r3
 800057a:	000f      	movs	r7, r1
 800057c:	40dd      	lsrs	r5, r3
 800057e:	40d9      	lsrs	r1, r3
 8000580:	40a0      	lsls	r0, r4
 8000582:	4643      	mov	r3, r8
 8000584:	40a7      	lsls	r7, r4
 8000586:	1a5b      	subs	r3, r3, r1
 8000588:	1e44      	subs	r4, r0, #1
 800058a:	41a0      	sbcs	r0, r4
 800058c:	4698      	mov	r8, r3
 800058e:	432f      	orrs	r7, r5
 8000590:	4338      	orrs	r0, r7
 8000592:	1a17      	subs	r7, r2, r0
 8000594:	42ba      	cmp	r2, r7
 8000596:	4192      	sbcs	r2, r2
 8000598:	4643      	mov	r3, r8
 800059a:	4252      	negs	r2, r2
 800059c:	1a99      	subs	r1, r3, r2
 800059e:	4664      	mov	r4, ip
 80005a0:	0035      	movs	r5, r6
 80005a2:	e6ca      	b.n	800033a <__aeabi_dadd+0x62>
 80005a4:	2207      	movs	r2, #7
 80005a6:	403a      	ands	r2, r7
 80005a8:	2a00      	cmp	r2, #0
 80005aa:	d000      	beq.n	80005ae <__aeabi_dadd+0x2d6>
 80005ac:	e6f6      	b.n	800039c <__aeabi_dadd+0xc4>
 80005ae:	074b      	lsls	r3, r1, #29
 80005b0:	08ca      	lsrs	r2, r1, #3
 80005b2:	4948      	ldr	r1, [pc, #288]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80005b4:	08ff      	lsrs	r7, r7, #3
 80005b6:	433b      	orrs	r3, r7
 80005b8:	428d      	cmp	r5, r1
 80005ba:	d196      	bne.n	80004ea <__aeabi_dadd+0x212>
 80005bc:	0019      	movs	r1, r3
 80005be:	4311      	orrs	r1, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x2ec>
 80005c2:	e19e      	b.n	8000902 <__aeabi_dadd+0x62a>
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	0309      	lsls	r1, r1, #12
 80005c8:	430a      	orrs	r2, r1
 80005ca:	0312      	lsls	r2, r2, #12
 80005cc:	0b12      	lsrs	r2, r2, #12
 80005ce:	4d41      	ldr	r5, [pc, #260]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80005d0:	e78f      	b.n	80004f2 <__aeabi_dadd+0x21a>
 80005d2:	0015      	movs	r5, r2
 80005d4:	2200      	movs	r2, #0
 80005d6:	2300      	movs	r3, #0
 80005d8:	e78b      	b.n	80004f2 <__aeabi_dadd+0x21a>
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d000      	beq.n	80005e0 <__aeabi_dadd+0x308>
 80005de:	e0c7      	b.n	8000770 <__aeabi_dadd+0x498>
 80005e0:	1c6b      	adds	r3, r5, #1
 80005e2:	055f      	lsls	r7, r3, #21
 80005e4:	0d7f      	lsrs	r7, r7, #21
 80005e6:	2f01      	cmp	r7, #1
 80005e8:	dc00      	bgt.n	80005ec <__aeabi_dadd+0x314>
 80005ea:	e0f1      	b.n	80007d0 <__aeabi_dadd+0x4f8>
 80005ec:	4d39      	ldr	r5, [pc, #228]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80005ee:	42ab      	cmp	r3, r5
 80005f0:	d100      	bne.n	80005f4 <__aeabi_dadd+0x31c>
 80005f2:	e0b9      	b.n	8000768 <__aeabi_dadd+0x490>
 80005f4:	1885      	adds	r5, r0, r2
 80005f6:	000a      	movs	r2, r1
 80005f8:	4285      	cmp	r5, r0
 80005fa:	4189      	sbcs	r1, r1
 80005fc:	4442      	add	r2, r8
 80005fe:	4249      	negs	r1, r1
 8000600:	1851      	adds	r1, r2, r1
 8000602:	2207      	movs	r2, #7
 8000604:	07cf      	lsls	r7, r1, #31
 8000606:	086d      	lsrs	r5, r5, #1
 8000608:	432f      	orrs	r7, r5
 800060a:	0849      	lsrs	r1, r1, #1
 800060c:	403a      	ands	r2, r7
 800060e:	001d      	movs	r5, r3
 8000610:	e6c2      	b.n	8000398 <__aeabi_dadd+0xc0>
 8000612:	2207      	movs	r2, #7
 8000614:	4930      	ldr	r1, [pc, #192]	; (80006d8 <__aeabi_dadd+0x400>)
 8000616:	1aed      	subs	r5, r5, r3
 8000618:	4031      	ands	r1, r6
 800061a:	403a      	ands	r2, r7
 800061c:	e6bc      	b.n	8000398 <__aeabi_dadd+0xc0>
 800061e:	003e      	movs	r6, r7
 8000620:	3828      	subs	r0, #40	; 0x28
 8000622:	4086      	lsls	r6, r0
 8000624:	2700      	movs	r7, #0
 8000626:	e69f      	b.n	8000368 <__aeabi_dadd+0x90>
 8000628:	0038      	movs	r0, r7
 800062a:	f001 f8a3 	bl	8001774 <__clzsi2>
 800062e:	3020      	adds	r0, #32
 8000630:	e68e      	b.n	8000350 <__aeabi_dadd+0x78>
 8000632:	4643      	mov	r3, r8
 8000634:	4313      	orrs	r3, r2
 8000636:	001f      	movs	r7, r3
 8000638:	1e7a      	subs	r2, r7, #1
 800063a:	4197      	sbcs	r7, r2
 800063c:	1bc7      	subs	r7, r0, r7
 800063e:	42b8      	cmp	r0, r7
 8000640:	4180      	sbcs	r0, r0
 8000642:	4240      	negs	r0, r0
 8000644:	1a09      	subs	r1, r1, r0
 8000646:	e678      	b.n	800033a <__aeabi_dadd+0x62>
 8000648:	000e      	movs	r6, r1
 800064a:	003b      	movs	r3, r7
 800064c:	4306      	orrs	r6, r0
 800064e:	4313      	orrs	r3, r2
 8000650:	2d00      	cmp	r5, #0
 8000652:	d161      	bne.n	8000718 <__aeabi_dadd+0x440>
 8000654:	2e00      	cmp	r6, #0
 8000656:	d000      	beq.n	800065a <__aeabi_dadd+0x382>
 8000658:	e0f4      	b.n	8000844 <__aeabi_dadd+0x56c>
 800065a:	2b00      	cmp	r3, #0
 800065c:	d100      	bne.n	8000660 <__aeabi_dadd+0x388>
 800065e:	e11b      	b.n	8000898 <__aeabi_dadd+0x5c0>
 8000660:	4664      	mov	r4, ip
 8000662:	0039      	movs	r1, r7
 8000664:	0010      	movs	r0, r2
 8000666:	e739      	b.n	80004dc <__aeabi_dadd+0x204>
 8000668:	4f1a      	ldr	r7, [pc, #104]	; (80006d4 <__aeabi_dadd+0x3fc>)
 800066a:	42bb      	cmp	r3, r7
 800066c:	d07a      	beq.n	8000764 <__aeabi_dadd+0x48c>
 800066e:	0033      	movs	r3, r6
 8000670:	e6ff      	b.n	8000472 <__aeabi_dadd+0x19a>
 8000672:	0030      	movs	r0, r6
 8000674:	3d1f      	subs	r5, #31
 8000676:	40e8      	lsrs	r0, r5
 8000678:	2b20      	cmp	r3, #32
 800067a:	d003      	beq.n	8000684 <__aeabi_dadd+0x3ac>
 800067c:	2140      	movs	r1, #64	; 0x40
 800067e:	1acb      	subs	r3, r1, r3
 8000680:	409e      	lsls	r6, r3
 8000682:	4337      	orrs	r7, r6
 8000684:	1e7b      	subs	r3, r7, #1
 8000686:	419f      	sbcs	r7, r3
 8000688:	2207      	movs	r2, #7
 800068a:	4307      	orrs	r7, r0
 800068c:	403a      	ands	r2, r7
 800068e:	2100      	movs	r1, #0
 8000690:	2500      	movs	r5, #0
 8000692:	e789      	b.n	80005a8 <__aeabi_dadd+0x2d0>
 8000694:	1a17      	subs	r7, r2, r0
 8000696:	4643      	mov	r3, r8
 8000698:	42ba      	cmp	r2, r7
 800069a:	41b6      	sbcs	r6, r6
 800069c:	1a59      	subs	r1, r3, r1
 800069e:	4276      	negs	r6, r6
 80006a0:	1b8e      	subs	r6, r1, r6
 80006a2:	4664      	mov	r4, ip
 80006a4:	e64e      	b.n	8000344 <__aeabi_dadd+0x6c>
 80006a6:	2b1f      	cmp	r3, #31
 80006a8:	dd00      	ble.n	80006ac <__aeabi_dadd+0x3d4>
 80006aa:	e0ad      	b.n	8000808 <__aeabi_dadd+0x530>
 80006ac:	2620      	movs	r6, #32
 80006ae:	4647      	mov	r7, r8
 80006b0:	1af6      	subs	r6, r6, r3
 80006b2:	40b7      	lsls	r7, r6
 80006b4:	46b9      	mov	r9, r7
 80006b6:	0017      	movs	r7, r2
 80006b8:	46b2      	mov	sl, r6
 80006ba:	40df      	lsrs	r7, r3
 80006bc:	464e      	mov	r6, r9
 80006be:	433e      	orrs	r6, r7
 80006c0:	0037      	movs	r7, r6
 80006c2:	4656      	mov	r6, sl
 80006c4:	40b2      	lsls	r2, r6
 80006c6:	1e56      	subs	r6, r2, #1
 80006c8:	41b2      	sbcs	r2, r6
 80006ca:	4317      	orrs	r7, r2
 80006cc:	4642      	mov	r2, r8
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	1889      	adds	r1, r1, r2
 80006d2:	e6ae      	b.n	8000432 <__aeabi_dadd+0x15a>
 80006d4:	000007ff 	.word	0x000007ff
 80006d8:	ff7fffff 	.word	0xff7fffff
 80006dc:	800fffff 	.word	0x800fffff
 80006e0:	2620      	movs	r6, #32
 80006e2:	4647      	mov	r7, r8
 80006e4:	1af6      	subs	r6, r6, r3
 80006e6:	40b7      	lsls	r7, r6
 80006e8:	46b9      	mov	r9, r7
 80006ea:	0017      	movs	r7, r2
 80006ec:	46b2      	mov	sl, r6
 80006ee:	40df      	lsrs	r7, r3
 80006f0:	464e      	mov	r6, r9
 80006f2:	433e      	orrs	r6, r7
 80006f4:	0037      	movs	r7, r6
 80006f6:	4656      	mov	r6, sl
 80006f8:	40b2      	lsls	r2, r6
 80006fa:	1e56      	subs	r6, r2, #1
 80006fc:	41b2      	sbcs	r2, r6
 80006fe:	4317      	orrs	r7, r2
 8000700:	4642      	mov	r2, r8
 8000702:	40da      	lsrs	r2, r3
 8000704:	1a89      	subs	r1, r1, r2
 8000706:	e799      	b.n	800063c <__aeabi_dadd+0x364>
 8000708:	4c7f      	ldr	r4, [pc, #508]	; (8000908 <__aeabi_dadd+0x630>)
 800070a:	42a6      	cmp	r6, r4
 800070c:	d05b      	beq.n	80007c6 <__aeabi_dadd+0x4ee>
 800070e:	2480      	movs	r4, #128	; 0x80
 8000710:	0424      	lsls	r4, r4, #16
 8000712:	425b      	negs	r3, r3
 8000714:	4321      	orrs	r1, r4
 8000716:	e727      	b.n	8000568 <__aeabi_dadd+0x290>
 8000718:	2e00      	cmp	r6, #0
 800071a:	d10c      	bne.n	8000736 <__aeabi_dadd+0x45e>
 800071c:	2b00      	cmp	r3, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x44a>
 8000720:	e0cb      	b.n	80008ba <__aeabi_dadd+0x5e2>
 8000722:	4664      	mov	r4, ip
 8000724:	0039      	movs	r1, r7
 8000726:	0010      	movs	r0, r2
 8000728:	4d77      	ldr	r5, [pc, #476]	; (8000908 <__aeabi_dadd+0x630>)
 800072a:	e6d7      	b.n	80004dc <__aeabi_dadd+0x204>
 800072c:	4f76      	ldr	r7, [pc, #472]	; (8000908 <__aeabi_dadd+0x630>)
 800072e:	42bb      	cmp	r3, r7
 8000730:	d018      	beq.n	8000764 <__aeabi_dadd+0x48c>
 8000732:	0033      	movs	r3, r6
 8000734:	e675      	b.n	8000422 <__aeabi_dadd+0x14a>
 8000736:	2b00      	cmp	r3, #0
 8000738:	d014      	beq.n	8000764 <__aeabi_dadd+0x48c>
 800073a:	074b      	lsls	r3, r1, #29
 800073c:	08c0      	lsrs	r0, r0, #3
 800073e:	4318      	orrs	r0, r3
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	08c9      	lsrs	r1, r1, #3
 8000744:	031b      	lsls	r3, r3, #12
 8000746:	4219      	tst	r1, r3
 8000748:	d007      	beq.n	800075a <__aeabi_dadd+0x482>
 800074a:	08fc      	lsrs	r4, r7, #3
 800074c:	421c      	tst	r4, r3
 800074e:	d104      	bne.n	800075a <__aeabi_dadd+0x482>
 8000750:	0779      	lsls	r1, r7, #29
 8000752:	08d0      	lsrs	r0, r2, #3
 8000754:	4308      	orrs	r0, r1
 8000756:	46e1      	mov	r9, ip
 8000758:	0021      	movs	r1, r4
 800075a:	464c      	mov	r4, r9
 800075c:	0f42      	lsrs	r2, r0, #29
 800075e:	00c9      	lsls	r1, r1, #3
 8000760:	4311      	orrs	r1, r2
 8000762:	00c0      	lsls	r0, r0, #3
 8000764:	4d68      	ldr	r5, [pc, #416]	; (8000908 <__aeabi_dadd+0x630>)
 8000766:	e6b9      	b.n	80004dc <__aeabi_dadd+0x204>
 8000768:	001d      	movs	r5, r3
 800076a:	2200      	movs	r2, #0
 800076c:	2300      	movs	r3, #0
 800076e:	e6c0      	b.n	80004f2 <__aeabi_dadd+0x21a>
 8000770:	2d00      	cmp	r5, #0
 8000772:	d15b      	bne.n	800082c <__aeabi_dadd+0x554>
 8000774:	000d      	movs	r5, r1
 8000776:	4305      	orrs	r5, r0
 8000778:	d100      	bne.n	800077c <__aeabi_dadd+0x4a4>
 800077a:	e6e2      	b.n	8000542 <__aeabi_dadd+0x26a>
 800077c:	1c5d      	adds	r5, r3, #1
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0x4aa>
 8000780:	e0b0      	b.n	80008e4 <__aeabi_dadd+0x60c>
 8000782:	4d61      	ldr	r5, [pc, #388]	; (8000908 <__aeabi_dadd+0x630>)
 8000784:	42ae      	cmp	r6, r5
 8000786:	d01f      	beq.n	80007c8 <__aeabi_dadd+0x4f0>
 8000788:	43db      	mvns	r3, r3
 800078a:	2b38      	cmp	r3, #56	; 0x38
 800078c:	dc71      	bgt.n	8000872 <__aeabi_dadd+0x59a>
 800078e:	2b1f      	cmp	r3, #31
 8000790:	dd00      	ble.n	8000794 <__aeabi_dadd+0x4bc>
 8000792:	e096      	b.n	80008c2 <__aeabi_dadd+0x5ea>
 8000794:	2520      	movs	r5, #32
 8000796:	000f      	movs	r7, r1
 8000798:	1aed      	subs	r5, r5, r3
 800079a:	40af      	lsls	r7, r5
 800079c:	46b9      	mov	r9, r7
 800079e:	0007      	movs	r7, r0
 80007a0:	46aa      	mov	sl, r5
 80007a2:	40df      	lsrs	r7, r3
 80007a4:	464d      	mov	r5, r9
 80007a6:	433d      	orrs	r5, r7
 80007a8:	002f      	movs	r7, r5
 80007aa:	4655      	mov	r5, sl
 80007ac:	40a8      	lsls	r0, r5
 80007ae:	40d9      	lsrs	r1, r3
 80007b0:	1e45      	subs	r5, r0, #1
 80007b2:	41a8      	sbcs	r0, r5
 80007b4:	4488      	add	r8, r1
 80007b6:	4307      	orrs	r7, r0
 80007b8:	18bf      	adds	r7, r7, r2
 80007ba:	4297      	cmp	r7, r2
 80007bc:	4192      	sbcs	r2, r2
 80007be:	4251      	negs	r1, r2
 80007c0:	4441      	add	r1, r8
 80007c2:	0035      	movs	r5, r6
 80007c4:	e63a      	b.n	800043c <__aeabi_dadd+0x164>
 80007c6:	4664      	mov	r4, ip
 80007c8:	0035      	movs	r5, r6
 80007ca:	4641      	mov	r1, r8
 80007cc:	0010      	movs	r0, r2
 80007ce:	e685      	b.n	80004dc <__aeabi_dadd+0x204>
 80007d0:	000b      	movs	r3, r1
 80007d2:	4303      	orrs	r3, r0
 80007d4:	2d00      	cmp	r5, #0
 80007d6:	d000      	beq.n	80007da <__aeabi_dadd+0x502>
 80007d8:	e663      	b.n	80004a2 <__aeabi_dadd+0x1ca>
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0f5      	beq.n	80007ca <__aeabi_dadd+0x4f2>
 80007de:	4643      	mov	r3, r8
 80007e0:	4313      	orrs	r3, r2
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x50e>
 80007e4:	e67a      	b.n	80004dc <__aeabi_dadd+0x204>
 80007e6:	1887      	adds	r7, r0, r2
 80007e8:	4287      	cmp	r7, r0
 80007ea:	4180      	sbcs	r0, r0
 80007ec:	2207      	movs	r2, #7
 80007ee:	4441      	add	r1, r8
 80007f0:	4240      	negs	r0, r0
 80007f2:	1809      	adds	r1, r1, r0
 80007f4:	403a      	ands	r2, r7
 80007f6:	020b      	lsls	r3, r1, #8
 80007f8:	d400      	bmi.n	80007fc <__aeabi_dadd+0x524>
 80007fa:	e6d5      	b.n	80005a8 <__aeabi_dadd+0x2d0>
 80007fc:	4b43      	ldr	r3, [pc, #268]	; (800090c <__aeabi_dadd+0x634>)
 80007fe:	3501      	adds	r5, #1
 8000800:	4019      	ands	r1, r3
 8000802:	e5c9      	b.n	8000398 <__aeabi_dadd+0xc0>
 8000804:	0038      	movs	r0, r7
 8000806:	e669      	b.n	80004dc <__aeabi_dadd+0x204>
 8000808:	001e      	movs	r6, r3
 800080a:	4647      	mov	r7, r8
 800080c:	3e20      	subs	r6, #32
 800080e:	40f7      	lsrs	r7, r6
 8000810:	46bc      	mov	ip, r7
 8000812:	2b20      	cmp	r3, #32
 8000814:	d004      	beq.n	8000820 <__aeabi_dadd+0x548>
 8000816:	2640      	movs	r6, #64	; 0x40
 8000818:	1af3      	subs	r3, r6, r3
 800081a:	4646      	mov	r6, r8
 800081c:	409e      	lsls	r6, r3
 800081e:	4332      	orrs	r2, r6
 8000820:	0017      	movs	r7, r2
 8000822:	4663      	mov	r3, ip
 8000824:	1e7a      	subs	r2, r7, #1
 8000826:	4197      	sbcs	r7, r2
 8000828:	431f      	orrs	r7, r3
 800082a:	e602      	b.n	8000432 <__aeabi_dadd+0x15a>
 800082c:	4d36      	ldr	r5, [pc, #216]	; (8000908 <__aeabi_dadd+0x630>)
 800082e:	42ae      	cmp	r6, r5
 8000830:	d0ca      	beq.n	80007c8 <__aeabi_dadd+0x4f0>
 8000832:	2580      	movs	r5, #128	; 0x80
 8000834:	042d      	lsls	r5, r5, #16
 8000836:	425b      	negs	r3, r3
 8000838:	4329      	orrs	r1, r5
 800083a:	e7a6      	b.n	800078a <__aeabi_dadd+0x4b2>
 800083c:	4308      	orrs	r0, r1
 800083e:	1e41      	subs	r1, r0, #1
 8000840:	4188      	sbcs	r0, r1
 8000842:	e6a6      	b.n	8000592 <__aeabi_dadd+0x2ba>
 8000844:	2b00      	cmp	r3, #0
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x572>
 8000848:	e648      	b.n	80004dc <__aeabi_dadd+0x204>
 800084a:	1a87      	subs	r7, r0, r2
 800084c:	4643      	mov	r3, r8
 800084e:	42b8      	cmp	r0, r7
 8000850:	41b6      	sbcs	r6, r6
 8000852:	1acb      	subs	r3, r1, r3
 8000854:	4276      	negs	r6, r6
 8000856:	1b9e      	subs	r6, r3, r6
 8000858:	0233      	lsls	r3, r6, #8
 800085a:	d54b      	bpl.n	80008f4 <__aeabi_dadd+0x61c>
 800085c:	1a17      	subs	r7, r2, r0
 800085e:	4643      	mov	r3, r8
 8000860:	42ba      	cmp	r2, r7
 8000862:	4192      	sbcs	r2, r2
 8000864:	1a59      	subs	r1, r3, r1
 8000866:	4252      	negs	r2, r2
 8000868:	1a89      	subs	r1, r1, r2
 800086a:	2207      	movs	r2, #7
 800086c:	4664      	mov	r4, ip
 800086e:	403a      	ands	r2, r7
 8000870:	e592      	b.n	8000398 <__aeabi_dadd+0xc0>
 8000872:	4301      	orrs	r1, r0
 8000874:	000f      	movs	r7, r1
 8000876:	1e79      	subs	r1, r7, #1
 8000878:	418f      	sbcs	r7, r1
 800087a:	e79d      	b.n	80007b8 <__aeabi_dadd+0x4e0>
 800087c:	001c      	movs	r4, r3
 800087e:	000f      	movs	r7, r1
 8000880:	3c20      	subs	r4, #32
 8000882:	40e7      	lsrs	r7, r4
 8000884:	2b20      	cmp	r3, #32
 8000886:	d003      	beq.n	8000890 <__aeabi_dadd+0x5b8>
 8000888:	2440      	movs	r4, #64	; 0x40
 800088a:	1ae3      	subs	r3, r4, r3
 800088c:	4099      	lsls	r1, r3
 800088e:	4308      	orrs	r0, r1
 8000890:	1e41      	subs	r1, r0, #1
 8000892:	4188      	sbcs	r0, r1
 8000894:	4338      	orrs	r0, r7
 8000896:	e67c      	b.n	8000592 <__aeabi_dadd+0x2ba>
 8000898:	2200      	movs	r2, #0
 800089a:	2400      	movs	r4, #0
 800089c:	e625      	b.n	80004ea <__aeabi_dadd+0x212>
 800089e:	1a17      	subs	r7, r2, r0
 80008a0:	4643      	mov	r3, r8
 80008a2:	42ba      	cmp	r2, r7
 80008a4:	4192      	sbcs	r2, r2
 80008a6:	1a59      	subs	r1, r3, r1
 80008a8:	4252      	negs	r2, r2
 80008aa:	1a89      	subs	r1, r1, r2
 80008ac:	4664      	mov	r4, ip
 80008ae:	0035      	movs	r5, r6
 80008b0:	e543      	b.n	800033a <__aeabi_dadd+0x62>
 80008b2:	4641      	mov	r1, r8
 80008b4:	0010      	movs	r0, r2
 80008b6:	4d14      	ldr	r5, [pc, #80]	; (8000908 <__aeabi_dadd+0x630>)
 80008b8:	e610      	b.n	80004dc <__aeabi_dadd+0x204>
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	2400      	movs	r4, #0
 80008be:	0312      	lsls	r2, r2, #12
 80008c0:	e680      	b.n	80005c4 <__aeabi_dadd+0x2ec>
 80008c2:	001d      	movs	r5, r3
 80008c4:	000f      	movs	r7, r1
 80008c6:	3d20      	subs	r5, #32
 80008c8:	40ef      	lsrs	r7, r5
 80008ca:	46bc      	mov	ip, r7
 80008cc:	2b20      	cmp	r3, #32
 80008ce:	d003      	beq.n	80008d8 <__aeabi_dadd+0x600>
 80008d0:	2540      	movs	r5, #64	; 0x40
 80008d2:	1aeb      	subs	r3, r5, r3
 80008d4:	4099      	lsls	r1, r3
 80008d6:	4308      	orrs	r0, r1
 80008d8:	0007      	movs	r7, r0
 80008da:	4663      	mov	r3, ip
 80008dc:	1e78      	subs	r0, r7, #1
 80008de:	4187      	sbcs	r7, r0
 80008e0:	431f      	orrs	r7, r3
 80008e2:	e769      	b.n	80007b8 <__aeabi_dadd+0x4e0>
 80008e4:	1887      	adds	r7, r0, r2
 80008e6:	4297      	cmp	r7, r2
 80008e8:	419b      	sbcs	r3, r3
 80008ea:	4441      	add	r1, r8
 80008ec:	425b      	negs	r3, r3
 80008ee:	18c9      	adds	r1, r1, r3
 80008f0:	0035      	movs	r5, r6
 80008f2:	e5a3      	b.n	800043c <__aeabi_dadd+0x164>
 80008f4:	003b      	movs	r3, r7
 80008f6:	4333      	orrs	r3, r6
 80008f8:	d0ce      	beq.n	8000898 <__aeabi_dadd+0x5c0>
 80008fa:	2207      	movs	r2, #7
 80008fc:	0031      	movs	r1, r6
 80008fe:	403a      	ands	r2, r7
 8000900:	e652      	b.n	80005a8 <__aeabi_dadd+0x2d0>
 8000902:	2300      	movs	r3, #0
 8000904:	001a      	movs	r2, r3
 8000906:	e5f4      	b.n	80004f2 <__aeabi_dadd+0x21a>
 8000908:	000007ff 	.word	0x000007ff
 800090c:	ff7fffff 	.word	0xff7fffff

08000910 <__eqdf2>:
 8000910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000912:	464f      	mov	r7, r9
 8000914:	4646      	mov	r6, r8
 8000916:	46d6      	mov	lr, sl
 8000918:	4684      	mov	ip, r0
 800091a:	b5c0      	push	{r6, r7, lr}
 800091c:	4680      	mov	r8, r0
 800091e:	4e19      	ldr	r6, [pc, #100]	; (8000984 <__eqdf2+0x74>)
 8000920:	0318      	lsls	r0, r3, #12
 8000922:	030f      	lsls	r7, r1, #12
 8000924:	004d      	lsls	r5, r1, #1
 8000926:	0b00      	lsrs	r0, r0, #12
 8000928:	005c      	lsls	r4, r3, #1
 800092a:	4682      	mov	sl, r0
 800092c:	0b3f      	lsrs	r7, r7, #12
 800092e:	0d6d      	lsrs	r5, r5, #21
 8000930:	0fc9      	lsrs	r1, r1, #31
 8000932:	4691      	mov	r9, r2
 8000934:	0d64      	lsrs	r4, r4, #21
 8000936:	0fdb      	lsrs	r3, r3, #31
 8000938:	2001      	movs	r0, #1
 800093a:	42b5      	cmp	r5, r6
 800093c:	d00a      	beq.n	8000954 <__eqdf2+0x44>
 800093e:	42b4      	cmp	r4, r6
 8000940:	d003      	beq.n	800094a <__eqdf2+0x3a>
 8000942:	42a5      	cmp	r5, r4
 8000944:	d101      	bne.n	800094a <__eqdf2+0x3a>
 8000946:	4557      	cmp	r7, sl
 8000948:	d00c      	beq.n	8000964 <__eqdf2+0x54>
 800094a:	bc1c      	pop	{r2, r3, r4}
 800094c:	4690      	mov	r8, r2
 800094e:	4699      	mov	r9, r3
 8000950:	46a2      	mov	sl, r4
 8000952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000954:	4666      	mov	r6, ip
 8000956:	433e      	orrs	r6, r7
 8000958:	d1f7      	bne.n	800094a <__eqdf2+0x3a>
 800095a:	42ac      	cmp	r4, r5
 800095c:	d1f5      	bne.n	800094a <__eqdf2+0x3a>
 800095e:	4654      	mov	r4, sl
 8000960:	4314      	orrs	r4, r2
 8000962:	d1f2      	bne.n	800094a <__eqdf2+0x3a>
 8000964:	2001      	movs	r0, #1
 8000966:	45c8      	cmp	r8, r9
 8000968:	d1ef      	bne.n	800094a <__eqdf2+0x3a>
 800096a:	4299      	cmp	r1, r3
 800096c:	d007      	beq.n	800097e <__eqdf2+0x6e>
 800096e:	2d00      	cmp	r5, #0
 8000970:	d1eb      	bne.n	800094a <__eqdf2+0x3a>
 8000972:	4663      	mov	r3, ip
 8000974:	431f      	orrs	r7, r3
 8000976:	0038      	movs	r0, r7
 8000978:	1e47      	subs	r7, r0, #1
 800097a:	41b8      	sbcs	r0, r7
 800097c:	e7e5      	b.n	800094a <__eqdf2+0x3a>
 800097e:	2000      	movs	r0, #0
 8000980:	e7e3      	b.n	800094a <__eqdf2+0x3a>
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	000007ff 	.word	0x000007ff

08000988 <__gedf2>:
 8000988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098a:	464f      	mov	r7, r9
 800098c:	4646      	mov	r6, r8
 800098e:	46d6      	mov	lr, sl
 8000990:	004d      	lsls	r5, r1, #1
 8000992:	b5c0      	push	{r6, r7, lr}
 8000994:	030e      	lsls	r6, r1, #12
 8000996:	0fc9      	lsrs	r1, r1, #31
 8000998:	468a      	mov	sl, r1
 800099a:	492c      	ldr	r1, [pc, #176]	; (8000a4c <__gedf2+0xc4>)
 800099c:	031f      	lsls	r7, r3, #12
 800099e:	005c      	lsls	r4, r3, #1
 80009a0:	4680      	mov	r8, r0
 80009a2:	0b36      	lsrs	r6, r6, #12
 80009a4:	0d6d      	lsrs	r5, r5, #21
 80009a6:	4691      	mov	r9, r2
 80009a8:	0b3f      	lsrs	r7, r7, #12
 80009aa:	0d64      	lsrs	r4, r4, #21
 80009ac:	0fdb      	lsrs	r3, r3, #31
 80009ae:	428d      	cmp	r5, r1
 80009b0:	d01e      	beq.n	80009f0 <__gedf2+0x68>
 80009b2:	428c      	cmp	r4, r1
 80009b4:	d016      	beq.n	80009e4 <__gedf2+0x5c>
 80009b6:	2d00      	cmp	r5, #0
 80009b8:	d11e      	bne.n	80009f8 <__gedf2+0x70>
 80009ba:	4330      	orrs	r0, r6
 80009bc:	4684      	mov	ip, r0
 80009be:	2c00      	cmp	r4, #0
 80009c0:	d101      	bne.n	80009c6 <__gedf2+0x3e>
 80009c2:	433a      	orrs	r2, r7
 80009c4:	d023      	beq.n	8000a0e <__gedf2+0x86>
 80009c6:	4662      	mov	r2, ip
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d01a      	beq.n	8000a02 <__gedf2+0x7a>
 80009cc:	459a      	cmp	sl, r3
 80009ce:	d029      	beq.n	8000a24 <__gedf2+0x9c>
 80009d0:	4651      	mov	r1, sl
 80009d2:	2002      	movs	r0, #2
 80009d4:	3901      	subs	r1, #1
 80009d6:	4008      	ands	r0, r1
 80009d8:	3801      	subs	r0, #1
 80009da:	bc1c      	pop	{r2, r3, r4}
 80009dc:	4690      	mov	r8, r2
 80009de:	4699      	mov	r9, r3
 80009e0:	46a2      	mov	sl, r4
 80009e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009e4:	0039      	movs	r1, r7
 80009e6:	4311      	orrs	r1, r2
 80009e8:	d0e5      	beq.n	80009b6 <__gedf2+0x2e>
 80009ea:	2002      	movs	r0, #2
 80009ec:	4240      	negs	r0, r0
 80009ee:	e7f4      	b.n	80009da <__gedf2+0x52>
 80009f0:	4330      	orrs	r0, r6
 80009f2:	d1fa      	bne.n	80009ea <__gedf2+0x62>
 80009f4:	42ac      	cmp	r4, r5
 80009f6:	d00f      	beq.n	8000a18 <__gedf2+0x90>
 80009f8:	2c00      	cmp	r4, #0
 80009fa:	d10f      	bne.n	8000a1c <__gedf2+0x94>
 80009fc:	433a      	orrs	r2, r7
 80009fe:	d0e7      	beq.n	80009d0 <__gedf2+0x48>
 8000a00:	e00c      	b.n	8000a1c <__gedf2+0x94>
 8000a02:	2201      	movs	r2, #1
 8000a04:	3b01      	subs	r3, #1
 8000a06:	4393      	bics	r3, r2
 8000a08:	0018      	movs	r0, r3
 8000a0a:	3001      	adds	r0, #1
 8000a0c:	e7e5      	b.n	80009da <__gedf2+0x52>
 8000a0e:	4663      	mov	r3, ip
 8000a10:	2000      	movs	r0, #0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d0e1      	beq.n	80009da <__gedf2+0x52>
 8000a16:	e7db      	b.n	80009d0 <__gedf2+0x48>
 8000a18:	433a      	orrs	r2, r7
 8000a1a:	d1e6      	bne.n	80009ea <__gedf2+0x62>
 8000a1c:	459a      	cmp	sl, r3
 8000a1e:	d1d7      	bne.n	80009d0 <__gedf2+0x48>
 8000a20:	42a5      	cmp	r5, r4
 8000a22:	dcd5      	bgt.n	80009d0 <__gedf2+0x48>
 8000a24:	42a5      	cmp	r5, r4
 8000a26:	db05      	blt.n	8000a34 <__gedf2+0xac>
 8000a28:	42be      	cmp	r6, r7
 8000a2a:	d8d1      	bhi.n	80009d0 <__gedf2+0x48>
 8000a2c:	d008      	beq.n	8000a40 <__gedf2+0xb8>
 8000a2e:	2000      	movs	r0, #0
 8000a30:	42be      	cmp	r6, r7
 8000a32:	d2d2      	bcs.n	80009da <__gedf2+0x52>
 8000a34:	4650      	mov	r0, sl
 8000a36:	2301      	movs	r3, #1
 8000a38:	3801      	subs	r0, #1
 8000a3a:	4398      	bics	r0, r3
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	e7cc      	b.n	80009da <__gedf2+0x52>
 8000a40:	45c8      	cmp	r8, r9
 8000a42:	d8c5      	bhi.n	80009d0 <__gedf2+0x48>
 8000a44:	2000      	movs	r0, #0
 8000a46:	45c8      	cmp	r8, r9
 8000a48:	d3f4      	bcc.n	8000a34 <__gedf2+0xac>
 8000a4a:	e7c6      	b.n	80009da <__gedf2+0x52>
 8000a4c:	000007ff 	.word	0x000007ff

08000a50 <__ledf2>:
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	464f      	mov	r7, r9
 8000a54:	4646      	mov	r6, r8
 8000a56:	46d6      	mov	lr, sl
 8000a58:	004d      	lsls	r5, r1, #1
 8000a5a:	b5c0      	push	{r6, r7, lr}
 8000a5c:	030e      	lsls	r6, r1, #12
 8000a5e:	0fc9      	lsrs	r1, r1, #31
 8000a60:	468a      	mov	sl, r1
 8000a62:	492e      	ldr	r1, [pc, #184]	; (8000b1c <__ledf2+0xcc>)
 8000a64:	031f      	lsls	r7, r3, #12
 8000a66:	005c      	lsls	r4, r3, #1
 8000a68:	4680      	mov	r8, r0
 8000a6a:	0b36      	lsrs	r6, r6, #12
 8000a6c:	0d6d      	lsrs	r5, r5, #21
 8000a6e:	4691      	mov	r9, r2
 8000a70:	0b3f      	lsrs	r7, r7, #12
 8000a72:	0d64      	lsrs	r4, r4, #21
 8000a74:	0fdb      	lsrs	r3, r3, #31
 8000a76:	428d      	cmp	r5, r1
 8000a78:	d018      	beq.n	8000aac <__ledf2+0x5c>
 8000a7a:	428c      	cmp	r4, r1
 8000a7c:	d011      	beq.n	8000aa2 <__ledf2+0x52>
 8000a7e:	2d00      	cmp	r5, #0
 8000a80:	d118      	bne.n	8000ab4 <__ledf2+0x64>
 8000a82:	4330      	orrs	r0, r6
 8000a84:	4684      	mov	ip, r0
 8000a86:	2c00      	cmp	r4, #0
 8000a88:	d11e      	bne.n	8000ac8 <__ledf2+0x78>
 8000a8a:	433a      	orrs	r2, r7
 8000a8c:	d11c      	bne.n	8000ac8 <__ledf2+0x78>
 8000a8e:	4663      	mov	r3, ip
 8000a90:	2000      	movs	r0, #0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d030      	beq.n	8000af8 <__ledf2+0xa8>
 8000a96:	4651      	mov	r1, sl
 8000a98:	2002      	movs	r0, #2
 8000a9a:	3901      	subs	r1, #1
 8000a9c:	4008      	ands	r0, r1
 8000a9e:	3801      	subs	r0, #1
 8000aa0:	e02a      	b.n	8000af8 <__ledf2+0xa8>
 8000aa2:	0039      	movs	r1, r7
 8000aa4:	4311      	orrs	r1, r2
 8000aa6:	d0ea      	beq.n	8000a7e <__ledf2+0x2e>
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	e025      	b.n	8000af8 <__ledf2+0xa8>
 8000aac:	4330      	orrs	r0, r6
 8000aae:	d1fb      	bne.n	8000aa8 <__ledf2+0x58>
 8000ab0:	42ac      	cmp	r4, r5
 8000ab2:	d026      	beq.n	8000b02 <__ledf2+0xb2>
 8000ab4:	2c00      	cmp	r4, #0
 8000ab6:	d126      	bne.n	8000b06 <__ledf2+0xb6>
 8000ab8:	433a      	orrs	r2, r7
 8000aba:	d124      	bne.n	8000b06 <__ledf2+0xb6>
 8000abc:	4651      	mov	r1, sl
 8000abe:	2002      	movs	r0, #2
 8000ac0:	3901      	subs	r1, #1
 8000ac2:	4008      	ands	r0, r1
 8000ac4:	3801      	subs	r0, #1
 8000ac6:	e017      	b.n	8000af8 <__ledf2+0xa8>
 8000ac8:	4662      	mov	r2, ip
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d00f      	beq.n	8000aee <__ledf2+0x9e>
 8000ace:	459a      	cmp	sl, r3
 8000ad0:	d1e1      	bne.n	8000a96 <__ledf2+0x46>
 8000ad2:	42a5      	cmp	r5, r4
 8000ad4:	db05      	blt.n	8000ae2 <__ledf2+0x92>
 8000ad6:	42be      	cmp	r6, r7
 8000ad8:	d8dd      	bhi.n	8000a96 <__ledf2+0x46>
 8000ada:	d019      	beq.n	8000b10 <__ledf2+0xc0>
 8000adc:	2000      	movs	r0, #0
 8000ade:	42be      	cmp	r6, r7
 8000ae0:	d20a      	bcs.n	8000af8 <__ledf2+0xa8>
 8000ae2:	4650      	mov	r0, sl
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	3801      	subs	r0, #1
 8000ae8:	4398      	bics	r0, r3
 8000aea:	3001      	adds	r0, #1
 8000aec:	e004      	b.n	8000af8 <__ledf2+0xa8>
 8000aee:	2201      	movs	r2, #1
 8000af0:	3b01      	subs	r3, #1
 8000af2:	4393      	bics	r3, r2
 8000af4:	0018      	movs	r0, r3
 8000af6:	3001      	adds	r0, #1
 8000af8:	bc1c      	pop	{r2, r3, r4}
 8000afa:	4690      	mov	r8, r2
 8000afc:	4699      	mov	r9, r3
 8000afe:	46a2      	mov	sl, r4
 8000b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b02:	433a      	orrs	r2, r7
 8000b04:	d1d0      	bne.n	8000aa8 <__ledf2+0x58>
 8000b06:	459a      	cmp	sl, r3
 8000b08:	d1c5      	bne.n	8000a96 <__ledf2+0x46>
 8000b0a:	42a5      	cmp	r5, r4
 8000b0c:	dcc3      	bgt.n	8000a96 <__ledf2+0x46>
 8000b0e:	e7e0      	b.n	8000ad2 <__ledf2+0x82>
 8000b10:	45c8      	cmp	r8, r9
 8000b12:	d8c0      	bhi.n	8000a96 <__ledf2+0x46>
 8000b14:	2000      	movs	r0, #0
 8000b16:	45c8      	cmp	r8, r9
 8000b18:	d3e3      	bcc.n	8000ae2 <__ledf2+0x92>
 8000b1a:	e7ed      	b.n	8000af8 <__ledf2+0xa8>
 8000b1c:	000007ff 	.word	0x000007ff

08000b20 <__aeabi_dmul>:
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	4657      	mov	r7, sl
 8000b24:	46de      	mov	lr, fp
 8000b26:	464e      	mov	r6, r9
 8000b28:	4645      	mov	r5, r8
 8000b2a:	b5e0      	push	{r5, r6, r7, lr}
 8000b2c:	4683      	mov	fp, r0
 8000b2e:	0006      	movs	r6, r0
 8000b30:	030f      	lsls	r7, r1, #12
 8000b32:	0048      	lsls	r0, r1, #1
 8000b34:	b087      	sub	sp, #28
 8000b36:	4692      	mov	sl, r2
 8000b38:	001d      	movs	r5, r3
 8000b3a:	0b3f      	lsrs	r7, r7, #12
 8000b3c:	0d40      	lsrs	r0, r0, #21
 8000b3e:	0fcc      	lsrs	r4, r1, #31
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dmul+0x26>
 8000b44:	e06f      	b.n	8000c26 <__aeabi_dmul+0x106>
 8000b46:	4bde      	ldr	r3, [pc, #888]	; (8000ec0 <__aeabi_dmul+0x3a0>)
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	d038      	beq.n	8000bbe <__aeabi_dmul+0x9e>
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	00ff      	lsls	r7, r7, #3
 8000b50:	041b      	lsls	r3, r3, #16
 8000b52:	431f      	orrs	r7, r3
 8000b54:	0f73      	lsrs	r3, r6, #29
 8000b56:	433b      	orrs	r3, r7
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	4bda      	ldr	r3, [pc, #872]	; (8000ec4 <__aeabi_dmul+0x3a4>)
 8000b5c:	2700      	movs	r7, #0
 8000b5e:	4699      	mov	r9, r3
 8000b60:	2300      	movs	r3, #0
 8000b62:	469b      	mov	fp, r3
 8000b64:	00f6      	lsls	r6, r6, #3
 8000b66:	4481      	add	r9, r0
 8000b68:	032b      	lsls	r3, r5, #12
 8000b6a:	0069      	lsls	r1, r5, #1
 8000b6c:	0b1b      	lsrs	r3, r3, #12
 8000b6e:	4652      	mov	r2, sl
 8000b70:	4698      	mov	r8, r3
 8000b72:	0d49      	lsrs	r1, r1, #21
 8000b74:	0fed      	lsrs	r5, r5, #31
 8000b76:	2900      	cmp	r1, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_dmul+0x5c>
 8000b7a:	e085      	b.n	8000c88 <__aeabi_dmul+0x168>
 8000b7c:	4bd0      	ldr	r3, [pc, #832]	; (8000ec0 <__aeabi_dmul+0x3a0>)
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d100      	bne.n	8000b84 <__aeabi_dmul+0x64>
 8000b82:	e073      	b.n	8000c6c <__aeabi_dmul+0x14c>
 8000b84:	4643      	mov	r3, r8
 8000b86:	00da      	lsls	r2, r3, #3
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	041b      	lsls	r3, r3, #16
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	4652      	mov	r2, sl
 8000b90:	48cc      	ldr	r0, [pc, #816]	; (8000ec4 <__aeabi_dmul+0x3a4>)
 8000b92:	0f52      	lsrs	r2, r2, #29
 8000b94:	4684      	mov	ip, r0
 8000b96:	4313      	orrs	r3, r2
 8000b98:	4652      	mov	r2, sl
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	4461      	add	r1, ip
 8000b9e:	00d2      	lsls	r2, r2, #3
 8000ba0:	4489      	add	r9, r1
 8000ba2:	0021      	movs	r1, r4
 8000ba4:	4069      	eors	r1, r5
 8000ba6:	9100      	str	r1, [sp, #0]
 8000ba8:	468c      	mov	ip, r1
 8000baa:	2101      	movs	r1, #1
 8000bac:	4449      	add	r1, r9
 8000bae:	468a      	mov	sl, r1
 8000bb0:	2f0f      	cmp	r7, #15
 8000bb2:	d900      	bls.n	8000bb6 <__aeabi_dmul+0x96>
 8000bb4:	e090      	b.n	8000cd8 <__aeabi_dmul+0x1b8>
 8000bb6:	49c4      	ldr	r1, [pc, #784]	; (8000ec8 <__aeabi_dmul+0x3a8>)
 8000bb8:	00bf      	lsls	r7, r7, #2
 8000bba:	59cf      	ldr	r7, [r1, r7]
 8000bbc:	46bf      	mov	pc, r7
 8000bbe:	465b      	mov	r3, fp
 8000bc0:	433b      	orrs	r3, r7
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_dmul+0xa8>
 8000bc6:	e16a      	b.n	8000e9e <__aeabi_dmul+0x37e>
 8000bc8:	2302      	movs	r3, #2
 8000bca:	2708      	movs	r7, #8
 8000bcc:	2600      	movs	r6, #0
 8000bce:	4681      	mov	r9, r0
 8000bd0:	469b      	mov	fp, r3
 8000bd2:	e7c9      	b.n	8000b68 <__aeabi_dmul+0x48>
 8000bd4:	0032      	movs	r2, r6
 8000bd6:	4658      	mov	r0, fp
 8000bd8:	9b01      	ldr	r3, [sp, #4]
 8000bda:	4661      	mov	r1, ip
 8000bdc:	9100      	str	r1, [sp, #0]
 8000bde:	2802      	cmp	r0, #2
 8000be0:	d100      	bne.n	8000be4 <__aeabi_dmul+0xc4>
 8000be2:	e075      	b.n	8000cd0 <__aeabi_dmul+0x1b0>
 8000be4:	2803      	cmp	r0, #3
 8000be6:	d100      	bne.n	8000bea <__aeabi_dmul+0xca>
 8000be8:	e1fe      	b.n	8000fe8 <__aeabi_dmul+0x4c8>
 8000bea:	2801      	cmp	r0, #1
 8000bec:	d000      	beq.n	8000bf0 <__aeabi_dmul+0xd0>
 8000bee:	e12c      	b.n	8000e4a <__aeabi_dmul+0x32a>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	2700      	movs	r7, #0
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	2500      	movs	r5, #0
 8000bf8:	033f      	lsls	r7, r7, #12
 8000bfa:	0d2a      	lsrs	r2, r5, #20
 8000bfc:	0b3f      	lsrs	r7, r7, #12
 8000bfe:	48b3      	ldr	r0, [pc, #716]	; (8000ecc <__aeabi_dmul+0x3ac>)
 8000c00:	0512      	lsls	r2, r2, #20
 8000c02:	433a      	orrs	r2, r7
 8000c04:	4002      	ands	r2, r0
 8000c06:	051b      	lsls	r3, r3, #20
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	9a00      	ldr	r2, [sp, #0]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	07d1      	lsls	r1, r2, #31
 8000c10:	085b      	lsrs	r3, r3, #1
 8000c12:	430b      	orrs	r3, r1
 8000c14:	0030      	movs	r0, r6
 8000c16:	0019      	movs	r1, r3
 8000c18:	b007      	add	sp, #28
 8000c1a:	bc3c      	pop	{r2, r3, r4, r5}
 8000c1c:	4690      	mov	r8, r2
 8000c1e:	4699      	mov	r9, r3
 8000c20:	46a2      	mov	sl, r4
 8000c22:	46ab      	mov	fp, r5
 8000c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c26:	465b      	mov	r3, fp
 8000c28:	433b      	orrs	r3, r7
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dmul+0x110>
 8000c2e:	e12f      	b.n	8000e90 <__aeabi_dmul+0x370>
 8000c30:	2f00      	cmp	r7, #0
 8000c32:	d100      	bne.n	8000c36 <__aeabi_dmul+0x116>
 8000c34:	e1a5      	b.n	8000f82 <__aeabi_dmul+0x462>
 8000c36:	0038      	movs	r0, r7
 8000c38:	f000 fd9c 	bl	8001774 <__clzsi2>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	3b0b      	subs	r3, #11
 8000c40:	2b1c      	cmp	r3, #28
 8000c42:	dd00      	ble.n	8000c46 <__aeabi_dmul+0x126>
 8000c44:	e196      	b.n	8000f74 <__aeabi_dmul+0x454>
 8000c46:	221d      	movs	r2, #29
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	465a      	mov	r2, fp
 8000c4c:	0001      	movs	r1, r0
 8000c4e:	40da      	lsrs	r2, r3
 8000c50:	465e      	mov	r6, fp
 8000c52:	3908      	subs	r1, #8
 8000c54:	408f      	lsls	r7, r1
 8000c56:	0013      	movs	r3, r2
 8000c58:	408e      	lsls	r6, r1
 8000c5a:	433b      	orrs	r3, r7
 8000c5c:	9301      	str	r3, [sp, #4]
 8000c5e:	4b9c      	ldr	r3, [pc, #624]	; (8000ed0 <__aeabi_dmul+0x3b0>)
 8000c60:	2700      	movs	r7, #0
 8000c62:	1a1b      	subs	r3, r3, r0
 8000c64:	4699      	mov	r9, r3
 8000c66:	2300      	movs	r3, #0
 8000c68:	469b      	mov	fp, r3
 8000c6a:	e77d      	b.n	8000b68 <__aeabi_dmul+0x48>
 8000c6c:	4641      	mov	r1, r8
 8000c6e:	4653      	mov	r3, sl
 8000c70:	430b      	orrs	r3, r1
 8000c72:	4993      	ldr	r1, [pc, #588]	; (8000ec0 <__aeabi_dmul+0x3a0>)
 8000c74:	468c      	mov	ip, r1
 8000c76:	44e1      	add	r9, ip
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_dmul+0x15e>
 8000c7c:	e11a      	b.n	8000eb4 <__aeabi_dmul+0x394>
 8000c7e:	2202      	movs	r2, #2
 8000c80:	2002      	movs	r0, #2
 8000c82:	4317      	orrs	r7, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e78c      	b.n	8000ba2 <__aeabi_dmul+0x82>
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_dmul+0x16e>
 8000c8c:	e10d      	b.n	8000eaa <__aeabi_dmul+0x38a>
 8000c8e:	4643      	mov	r3, r8
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dmul+0x176>
 8000c94:	e181      	b.n	8000f9a <__aeabi_dmul+0x47a>
 8000c96:	4640      	mov	r0, r8
 8000c98:	f000 fd6c 	bl	8001774 <__clzsi2>
 8000c9c:	0002      	movs	r2, r0
 8000c9e:	3a0b      	subs	r2, #11
 8000ca0:	2a1c      	cmp	r2, #28
 8000ca2:	dd00      	ble.n	8000ca6 <__aeabi_dmul+0x186>
 8000ca4:	e172      	b.n	8000f8c <__aeabi_dmul+0x46c>
 8000ca6:	0001      	movs	r1, r0
 8000ca8:	4643      	mov	r3, r8
 8000caa:	3908      	subs	r1, #8
 8000cac:	408b      	lsls	r3, r1
 8000cae:	4698      	mov	r8, r3
 8000cb0:	231d      	movs	r3, #29
 8000cb2:	1a9a      	subs	r2, r3, r2
 8000cb4:	4653      	mov	r3, sl
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	001a      	movs	r2, r3
 8000cba:	4643      	mov	r3, r8
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	4652      	mov	r2, sl
 8000cc0:	408a      	lsls	r2, r1
 8000cc2:	4649      	mov	r1, r9
 8000cc4:	1a08      	subs	r0, r1, r0
 8000cc6:	4982      	ldr	r1, [pc, #520]	; (8000ed0 <__aeabi_dmul+0x3b0>)
 8000cc8:	4689      	mov	r9, r1
 8000cca:	4481      	add	r9, r0
 8000ccc:	2000      	movs	r0, #0
 8000cce:	e768      	b.n	8000ba2 <__aeabi_dmul+0x82>
 8000cd0:	4b7b      	ldr	r3, [pc, #492]	; (8000ec0 <__aeabi_dmul+0x3a0>)
 8000cd2:	2700      	movs	r7, #0
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	e78e      	b.n	8000bf6 <__aeabi_dmul+0xd6>
 8000cd8:	0c14      	lsrs	r4, r2, #16
 8000cda:	0412      	lsls	r2, r2, #16
 8000cdc:	0c12      	lsrs	r2, r2, #16
 8000cde:	0011      	movs	r1, r2
 8000ce0:	0c37      	lsrs	r7, r6, #16
 8000ce2:	0436      	lsls	r6, r6, #16
 8000ce4:	0c35      	lsrs	r5, r6, #16
 8000ce6:	4379      	muls	r1, r7
 8000ce8:	0028      	movs	r0, r5
 8000cea:	468c      	mov	ip, r1
 8000cec:	002e      	movs	r6, r5
 8000cee:	4360      	muls	r0, r4
 8000cf0:	4460      	add	r0, ip
 8000cf2:	4683      	mov	fp, r0
 8000cf4:	4356      	muls	r6, r2
 8000cf6:	0021      	movs	r1, r4
 8000cf8:	0c30      	lsrs	r0, r6, #16
 8000cfa:	4680      	mov	r8, r0
 8000cfc:	4658      	mov	r0, fp
 8000cfe:	4379      	muls	r1, r7
 8000d00:	4440      	add	r0, r8
 8000d02:	9102      	str	r1, [sp, #8]
 8000d04:	4584      	cmp	ip, r0
 8000d06:	d906      	bls.n	8000d16 <__aeabi_dmul+0x1f6>
 8000d08:	4688      	mov	r8, r1
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	0249      	lsls	r1, r1, #9
 8000d0e:	468c      	mov	ip, r1
 8000d10:	44e0      	add	r8, ip
 8000d12:	4641      	mov	r1, r8
 8000d14:	9102      	str	r1, [sp, #8]
 8000d16:	0436      	lsls	r6, r6, #16
 8000d18:	0c01      	lsrs	r1, r0, #16
 8000d1a:	0c36      	lsrs	r6, r6, #16
 8000d1c:	0400      	lsls	r0, r0, #16
 8000d1e:	468b      	mov	fp, r1
 8000d20:	1981      	adds	r1, r0, r6
 8000d22:	0c1e      	lsrs	r6, r3, #16
 8000d24:	041b      	lsls	r3, r3, #16
 8000d26:	0c1b      	lsrs	r3, r3, #16
 8000d28:	9103      	str	r1, [sp, #12]
 8000d2a:	0019      	movs	r1, r3
 8000d2c:	4379      	muls	r1, r7
 8000d2e:	468c      	mov	ip, r1
 8000d30:	0028      	movs	r0, r5
 8000d32:	4375      	muls	r5, r6
 8000d34:	4465      	add	r5, ip
 8000d36:	46a8      	mov	r8, r5
 8000d38:	4358      	muls	r0, r3
 8000d3a:	0c05      	lsrs	r5, r0, #16
 8000d3c:	4445      	add	r5, r8
 8000d3e:	4377      	muls	r7, r6
 8000d40:	42a9      	cmp	r1, r5
 8000d42:	d903      	bls.n	8000d4c <__aeabi_dmul+0x22c>
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	0249      	lsls	r1, r1, #9
 8000d48:	468c      	mov	ip, r1
 8000d4a:	4467      	add	r7, ip
 8000d4c:	0c29      	lsrs	r1, r5, #16
 8000d4e:	468c      	mov	ip, r1
 8000d50:	0039      	movs	r1, r7
 8000d52:	0400      	lsls	r0, r0, #16
 8000d54:	0c00      	lsrs	r0, r0, #16
 8000d56:	042d      	lsls	r5, r5, #16
 8000d58:	182d      	adds	r5, r5, r0
 8000d5a:	4461      	add	r1, ip
 8000d5c:	44ab      	add	fp, r5
 8000d5e:	9105      	str	r1, [sp, #20]
 8000d60:	4659      	mov	r1, fp
 8000d62:	9104      	str	r1, [sp, #16]
 8000d64:	9901      	ldr	r1, [sp, #4]
 8000d66:	040f      	lsls	r7, r1, #16
 8000d68:	0c3f      	lsrs	r7, r7, #16
 8000d6a:	0c08      	lsrs	r0, r1, #16
 8000d6c:	0039      	movs	r1, r7
 8000d6e:	4351      	muls	r1, r2
 8000d70:	4342      	muls	r2, r0
 8000d72:	4690      	mov	r8, r2
 8000d74:	0002      	movs	r2, r0
 8000d76:	468c      	mov	ip, r1
 8000d78:	0c09      	lsrs	r1, r1, #16
 8000d7a:	468b      	mov	fp, r1
 8000d7c:	4362      	muls	r2, r4
 8000d7e:	437c      	muls	r4, r7
 8000d80:	4444      	add	r4, r8
 8000d82:	445c      	add	r4, fp
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d903      	bls.n	8000d90 <__aeabi_dmul+0x270>
 8000d88:	2180      	movs	r1, #128	; 0x80
 8000d8a:	0249      	lsls	r1, r1, #9
 8000d8c:	4688      	mov	r8, r1
 8000d8e:	4442      	add	r2, r8
 8000d90:	0c21      	lsrs	r1, r4, #16
 8000d92:	4688      	mov	r8, r1
 8000d94:	4661      	mov	r1, ip
 8000d96:	0409      	lsls	r1, r1, #16
 8000d98:	0c09      	lsrs	r1, r1, #16
 8000d9a:	468c      	mov	ip, r1
 8000d9c:	0039      	movs	r1, r7
 8000d9e:	4359      	muls	r1, r3
 8000da0:	4343      	muls	r3, r0
 8000da2:	4370      	muls	r0, r6
 8000da4:	437e      	muls	r6, r7
 8000da6:	0c0f      	lsrs	r7, r1, #16
 8000da8:	18f6      	adds	r6, r6, r3
 8000daa:	0424      	lsls	r4, r4, #16
 8000dac:	19be      	adds	r6, r7, r6
 8000dae:	4464      	add	r4, ip
 8000db0:	4442      	add	r2, r8
 8000db2:	468c      	mov	ip, r1
 8000db4:	42b3      	cmp	r3, r6
 8000db6:	d903      	bls.n	8000dc0 <__aeabi_dmul+0x2a0>
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	025b      	lsls	r3, r3, #9
 8000dbc:	4698      	mov	r8, r3
 8000dbe:	4440      	add	r0, r8
 8000dc0:	9b02      	ldr	r3, [sp, #8]
 8000dc2:	4661      	mov	r1, ip
 8000dc4:	4698      	mov	r8, r3
 8000dc6:	9b04      	ldr	r3, [sp, #16]
 8000dc8:	0437      	lsls	r7, r6, #16
 8000dca:	4443      	add	r3, r8
 8000dcc:	469b      	mov	fp, r3
 8000dce:	45ab      	cmp	fp, r5
 8000dd0:	41ad      	sbcs	r5, r5
 8000dd2:	426b      	negs	r3, r5
 8000dd4:	040d      	lsls	r5, r1, #16
 8000dd6:	9905      	ldr	r1, [sp, #20]
 8000dd8:	0c2d      	lsrs	r5, r5, #16
 8000dda:	468c      	mov	ip, r1
 8000ddc:	197f      	adds	r7, r7, r5
 8000dde:	4467      	add	r7, ip
 8000de0:	18fd      	adds	r5, r7, r3
 8000de2:	46a8      	mov	r8, r5
 8000de4:	465d      	mov	r5, fp
 8000de6:	192d      	adds	r5, r5, r4
 8000de8:	42a5      	cmp	r5, r4
 8000dea:	41a4      	sbcs	r4, r4
 8000dec:	4693      	mov	fp, r2
 8000dee:	4264      	negs	r4, r4
 8000df0:	46a4      	mov	ip, r4
 8000df2:	44c3      	add	fp, r8
 8000df4:	44dc      	add	ip, fp
 8000df6:	428f      	cmp	r7, r1
 8000df8:	41bf      	sbcs	r7, r7
 8000dfa:	4598      	cmp	r8, r3
 8000dfc:	419b      	sbcs	r3, r3
 8000dfe:	4593      	cmp	fp, r2
 8000e00:	4192      	sbcs	r2, r2
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	41a4      	sbcs	r4, r4
 8000e06:	425b      	negs	r3, r3
 8000e08:	427f      	negs	r7, r7
 8000e0a:	431f      	orrs	r7, r3
 8000e0c:	0c36      	lsrs	r6, r6, #16
 8000e0e:	4252      	negs	r2, r2
 8000e10:	4264      	negs	r4, r4
 8000e12:	19bf      	adds	r7, r7, r6
 8000e14:	4322      	orrs	r2, r4
 8000e16:	18bf      	adds	r7, r7, r2
 8000e18:	4662      	mov	r2, ip
 8000e1a:	1838      	adds	r0, r7, r0
 8000e1c:	0243      	lsls	r3, r0, #9
 8000e1e:	0dd2      	lsrs	r2, r2, #23
 8000e20:	9903      	ldr	r1, [sp, #12]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	026a      	lsls	r2, r5, #9
 8000e26:	430a      	orrs	r2, r1
 8000e28:	1e50      	subs	r0, r2, #1
 8000e2a:	4182      	sbcs	r2, r0
 8000e2c:	4661      	mov	r1, ip
 8000e2e:	0ded      	lsrs	r5, r5, #23
 8000e30:	432a      	orrs	r2, r5
 8000e32:	024e      	lsls	r6, r1, #9
 8000e34:	4332      	orrs	r2, r6
 8000e36:	01d9      	lsls	r1, r3, #7
 8000e38:	d400      	bmi.n	8000e3c <__aeabi_dmul+0x31c>
 8000e3a:	e0b3      	b.n	8000fa4 <__aeabi_dmul+0x484>
 8000e3c:	2601      	movs	r6, #1
 8000e3e:	0850      	lsrs	r0, r2, #1
 8000e40:	4032      	ands	r2, r6
 8000e42:	4302      	orrs	r2, r0
 8000e44:	07de      	lsls	r6, r3, #31
 8000e46:	4332      	orrs	r2, r6
 8000e48:	085b      	lsrs	r3, r3, #1
 8000e4a:	4c22      	ldr	r4, [pc, #136]	; (8000ed4 <__aeabi_dmul+0x3b4>)
 8000e4c:	4454      	add	r4, sl
 8000e4e:	2c00      	cmp	r4, #0
 8000e50:	dd62      	ble.n	8000f18 <__aeabi_dmul+0x3f8>
 8000e52:	0751      	lsls	r1, r2, #29
 8000e54:	d009      	beq.n	8000e6a <__aeabi_dmul+0x34a>
 8000e56:	200f      	movs	r0, #15
 8000e58:	4010      	ands	r0, r2
 8000e5a:	2804      	cmp	r0, #4
 8000e5c:	d005      	beq.n	8000e6a <__aeabi_dmul+0x34a>
 8000e5e:	1d10      	adds	r0, r2, #4
 8000e60:	4290      	cmp	r0, r2
 8000e62:	4192      	sbcs	r2, r2
 8000e64:	4252      	negs	r2, r2
 8000e66:	189b      	adds	r3, r3, r2
 8000e68:	0002      	movs	r2, r0
 8000e6a:	01d9      	lsls	r1, r3, #7
 8000e6c:	d504      	bpl.n	8000e78 <__aeabi_dmul+0x358>
 8000e6e:	2480      	movs	r4, #128	; 0x80
 8000e70:	4819      	ldr	r0, [pc, #100]	; (8000ed8 <__aeabi_dmul+0x3b8>)
 8000e72:	00e4      	lsls	r4, r4, #3
 8000e74:	4003      	ands	r3, r0
 8000e76:	4454      	add	r4, sl
 8000e78:	4818      	ldr	r0, [pc, #96]	; (8000edc <__aeabi_dmul+0x3bc>)
 8000e7a:	4284      	cmp	r4, r0
 8000e7c:	dd00      	ble.n	8000e80 <__aeabi_dmul+0x360>
 8000e7e:	e727      	b.n	8000cd0 <__aeabi_dmul+0x1b0>
 8000e80:	075e      	lsls	r6, r3, #29
 8000e82:	025b      	lsls	r3, r3, #9
 8000e84:	08d2      	lsrs	r2, r2, #3
 8000e86:	0b1f      	lsrs	r7, r3, #12
 8000e88:	0563      	lsls	r3, r4, #21
 8000e8a:	4316      	orrs	r6, r2
 8000e8c:	0d5b      	lsrs	r3, r3, #21
 8000e8e:	e6b2      	b.n	8000bf6 <__aeabi_dmul+0xd6>
 8000e90:	2300      	movs	r3, #0
 8000e92:	4699      	mov	r9, r3
 8000e94:	3301      	adds	r3, #1
 8000e96:	2704      	movs	r7, #4
 8000e98:	2600      	movs	r6, #0
 8000e9a:	469b      	mov	fp, r3
 8000e9c:	e664      	b.n	8000b68 <__aeabi_dmul+0x48>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	9701      	str	r7, [sp, #4]
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	270c      	movs	r7, #12
 8000ea6:	469b      	mov	fp, r3
 8000ea8:	e65e      	b.n	8000b68 <__aeabi_dmul+0x48>
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2001      	movs	r0, #1
 8000eae:	4317      	orrs	r7, r2
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	e676      	b.n	8000ba2 <__aeabi_dmul+0x82>
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	431f      	orrs	r7, r3
 8000eba:	4643      	mov	r3, r8
 8000ebc:	e671      	b.n	8000ba2 <__aeabi_dmul+0x82>
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	000007ff 	.word	0x000007ff
 8000ec4:	fffffc01 	.word	0xfffffc01
 8000ec8:	08007da4 	.word	0x08007da4
 8000ecc:	800fffff 	.word	0x800fffff
 8000ed0:	fffffc0d 	.word	0xfffffc0d
 8000ed4:	000003ff 	.word	0x000003ff
 8000ed8:	feffffff 	.word	0xfeffffff
 8000edc:	000007fe 	.word	0x000007fe
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	2780      	movs	r7, #128	; 0x80
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	033f      	lsls	r7, r7, #12
 8000ee8:	2600      	movs	r6, #0
 8000eea:	4b43      	ldr	r3, [pc, #268]	; (8000ff8 <__aeabi_dmul+0x4d8>)
 8000eec:	e683      	b.n	8000bf6 <__aeabi_dmul+0xd6>
 8000eee:	9b01      	ldr	r3, [sp, #4]
 8000ef0:	0032      	movs	r2, r6
 8000ef2:	46a4      	mov	ip, r4
 8000ef4:	4658      	mov	r0, fp
 8000ef6:	e670      	b.n	8000bda <__aeabi_dmul+0xba>
 8000ef8:	46ac      	mov	ip, r5
 8000efa:	e66e      	b.n	8000bda <__aeabi_dmul+0xba>
 8000efc:	2780      	movs	r7, #128	; 0x80
 8000efe:	9901      	ldr	r1, [sp, #4]
 8000f00:	033f      	lsls	r7, r7, #12
 8000f02:	4239      	tst	r1, r7
 8000f04:	d02d      	beq.n	8000f62 <__aeabi_dmul+0x442>
 8000f06:	423b      	tst	r3, r7
 8000f08:	d12b      	bne.n	8000f62 <__aeabi_dmul+0x442>
 8000f0a:	431f      	orrs	r7, r3
 8000f0c:	033f      	lsls	r7, r7, #12
 8000f0e:	0b3f      	lsrs	r7, r7, #12
 8000f10:	9500      	str	r5, [sp, #0]
 8000f12:	0016      	movs	r6, r2
 8000f14:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <__aeabi_dmul+0x4d8>)
 8000f16:	e66e      	b.n	8000bf6 <__aeabi_dmul+0xd6>
 8000f18:	2501      	movs	r5, #1
 8000f1a:	1b2d      	subs	r5, r5, r4
 8000f1c:	2d38      	cmp	r5, #56	; 0x38
 8000f1e:	dd00      	ble.n	8000f22 <__aeabi_dmul+0x402>
 8000f20:	e666      	b.n	8000bf0 <__aeabi_dmul+0xd0>
 8000f22:	2d1f      	cmp	r5, #31
 8000f24:	dc40      	bgt.n	8000fa8 <__aeabi_dmul+0x488>
 8000f26:	4835      	ldr	r0, [pc, #212]	; (8000ffc <__aeabi_dmul+0x4dc>)
 8000f28:	001c      	movs	r4, r3
 8000f2a:	4450      	add	r0, sl
 8000f2c:	0016      	movs	r6, r2
 8000f2e:	4082      	lsls	r2, r0
 8000f30:	4084      	lsls	r4, r0
 8000f32:	40ee      	lsrs	r6, r5
 8000f34:	1e50      	subs	r0, r2, #1
 8000f36:	4182      	sbcs	r2, r0
 8000f38:	4334      	orrs	r4, r6
 8000f3a:	4314      	orrs	r4, r2
 8000f3c:	40eb      	lsrs	r3, r5
 8000f3e:	0762      	lsls	r2, r4, #29
 8000f40:	d009      	beq.n	8000f56 <__aeabi_dmul+0x436>
 8000f42:	220f      	movs	r2, #15
 8000f44:	4022      	ands	r2, r4
 8000f46:	2a04      	cmp	r2, #4
 8000f48:	d005      	beq.n	8000f56 <__aeabi_dmul+0x436>
 8000f4a:	0022      	movs	r2, r4
 8000f4c:	1d14      	adds	r4, r2, #4
 8000f4e:	4294      	cmp	r4, r2
 8000f50:	4180      	sbcs	r0, r0
 8000f52:	4240      	negs	r0, r0
 8000f54:	181b      	adds	r3, r3, r0
 8000f56:	021a      	lsls	r2, r3, #8
 8000f58:	d53e      	bpl.n	8000fd8 <__aeabi_dmul+0x4b8>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	2700      	movs	r7, #0
 8000f5e:	2600      	movs	r6, #0
 8000f60:	e649      	b.n	8000bf6 <__aeabi_dmul+0xd6>
 8000f62:	2780      	movs	r7, #128	; 0x80
 8000f64:	9b01      	ldr	r3, [sp, #4]
 8000f66:	033f      	lsls	r7, r7, #12
 8000f68:	431f      	orrs	r7, r3
 8000f6a:	033f      	lsls	r7, r7, #12
 8000f6c:	0b3f      	lsrs	r7, r7, #12
 8000f6e:	9400      	str	r4, [sp, #0]
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <__aeabi_dmul+0x4d8>)
 8000f72:	e640      	b.n	8000bf6 <__aeabi_dmul+0xd6>
 8000f74:	0003      	movs	r3, r0
 8000f76:	465a      	mov	r2, fp
 8000f78:	3b28      	subs	r3, #40	; 0x28
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	2600      	movs	r6, #0
 8000f7e:	9201      	str	r2, [sp, #4]
 8000f80:	e66d      	b.n	8000c5e <__aeabi_dmul+0x13e>
 8000f82:	4658      	mov	r0, fp
 8000f84:	f000 fbf6 	bl	8001774 <__clzsi2>
 8000f88:	3020      	adds	r0, #32
 8000f8a:	e657      	b.n	8000c3c <__aeabi_dmul+0x11c>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	4652      	mov	r2, sl
 8000f90:	3b28      	subs	r3, #40	; 0x28
 8000f92:	409a      	lsls	r2, r3
 8000f94:	0013      	movs	r3, r2
 8000f96:	2200      	movs	r2, #0
 8000f98:	e693      	b.n	8000cc2 <__aeabi_dmul+0x1a2>
 8000f9a:	4650      	mov	r0, sl
 8000f9c:	f000 fbea 	bl	8001774 <__clzsi2>
 8000fa0:	3020      	adds	r0, #32
 8000fa2:	e67b      	b.n	8000c9c <__aeabi_dmul+0x17c>
 8000fa4:	46ca      	mov	sl, r9
 8000fa6:	e750      	b.n	8000e4a <__aeabi_dmul+0x32a>
 8000fa8:	201f      	movs	r0, #31
 8000faa:	001e      	movs	r6, r3
 8000fac:	4240      	negs	r0, r0
 8000fae:	1b04      	subs	r4, r0, r4
 8000fb0:	40e6      	lsrs	r6, r4
 8000fb2:	2d20      	cmp	r5, #32
 8000fb4:	d003      	beq.n	8000fbe <__aeabi_dmul+0x49e>
 8000fb6:	4c12      	ldr	r4, [pc, #72]	; (8001000 <__aeabi_dmul+0x4e0>)
 8000fb8:	4454      	add	r4, sl
 8000fba:	40a3      	lsls	r3, r4
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	1e50      	subs	r0, r2, #1
 8000fc0:	4182      	sbcs	r2, r0
 8000fc2:	4332      	orrs	r2, r6
 8000fc4:	2607      	movs	r6, #7
 8000fc6:	2700      	movs	r7, #0
 8000fc8:	4016      	ands	r6, r2
 8000fca:	d009      	beq.n	8000fe0 <__aeabi_dmul+0x4c0>
 8000fcc:	200f      	movs	r0, #15
 8000fce:	2300      	movs	r3, #0
 8000fd0:	4010      	ands	r0, r2
 8000fd2:	0014      	movs	r4, r2
 8000fd4:	2804      	cmp	r0, #4
 8000fd6:	d1b9      	bne.n	8000f4c <__aeabi_dmul+0x42c>
 8000fd8:	0022      	movs	r2, r4
 8000fda:	075e      	lsls	r6, r3, #29
 8000fdc:	025b      	lsls	r3, r3, #9
 8000fde:	0b1f      	lsrs	r7, r3, #12
 8000fe0:	08d2      	lsrs	r2, r2, #3
 8000fe2:	4316      	orrs	r6, r2
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e606      	b.n	8000bf6 <__aeabi_dmul+0xd6>
 8000fe8:	2780      	movs	r7, #128	; 0x80
 8000fea:	033f      	lsls	r7, r7, #12
 8000fec:	431f      	orrs	r7, r3
 8000fee:	033f      	lsls	r7, r7, #12
 8000ff0:	0b3f      	lsrs	r7, r7, #12
 8000ff2:	0016      	movs	r6, r2
 8000ff4:	4b00      	ldr	r3, [pc, #0]	; (8000ff8 <__aeabi_dmul+0x4d8>)
 8000ff6:	e5fe      	b.n	8000bf6 <__aeabi_dmul+0xd6>
 8000ff8:	000007ff 	.word	0x000007ff
 8000ffc:	0000041e 	.word	0x0000041e
 8001000:	0000043e 	.word	0x0000043e

08001004 <__aeabi_dsub>:
 8001004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001006:	4657      	mov	r7, sl
 8001008:	464e      	mov	r6, r9
 800100a:	4645      	mov	r5, r8
 800100c:	46de      	mov	lr, fp
 800100e:	000c      	movs	r4, r1
 8001010:	0309      	lsls	r1, r1, #12
 8001012:	b5e0      	push	{r5, r6, r7, lr}
 8001014:	0a49      	lsrs	r1, r1, #9
 8001016:	0f46      	lsrs	r6, r0, #29
 8001018:	005f      	lsls	r7, r3, #1
 800101a:	4331      	orrs	r1, r6
 800101c:	031e      	lsls	r6, r3, #12
 800101e:	0fdb      	lsrs	r3, r3, #31
 8001020:	0a76      	lsrs	r6, r6, #9
 8001022:	469b      	mov	fp, r3
 8001024:	0f53      	lsrs	r3, r2, #29
 8001026:	4333      	orrs	r3, r6
 8001028:	4ec8      	ldr	r6, [pc, #800]	; (800134c <__aeabi_dsub+0x348>)
 800102a:	0065      	lsls	r5, r4, #1
 800102c:	00c0      	lsls	r0, r0, #3
 800102e:	0fe4      	lsrs	r4, r4, #31
 8001030:	00d2      	lsls	r2, r2, #3
 8001032:	0d6d      	lsrs	r5, r5, #21
 8001034:	46a2      	mov	sl, r4
 8001036:	4681      	mov	r9, r0
 8001038:	0d7f      	lsrs	r7, r7, #21
 800103a:	469c      	mov	ip, r3
 800103c:	4690      	mov	r8, r2
 800103e:	42b7      	cmp	r7, r6
 8001040:	d100      	bne.n	8001044 <__aeabi_dsub+0x40>
 8001042:	e0b9      	b.n	80011b8 <__aeabi_dsub+0x1b4>
 8001044:	465b      	mov	r3, fp
 8001046:	2601      	movs	r6, #1
 8001048:	4073      	eors	r3, r6
 800104a:	469b      	mov	fp, r3
 800104c:	1bee      	subs	r6, r5, r7
 800104e:	45a3      	cmp	fp, r4
 8001050:	d100      	bne.n	8001054 <__aeabi_dsub+0x50>
 8001052:	e083      	b.n	800115c <__aeabi_dsub+0x158>
 8001054:	2e00      	cmp	r6, #0
 8001056:	dd63      	ble.n	8001120 <__aeabi_dsub+0x11c>
 8001058:	2f00      	cmp	r7, #0
 800105a:	d000      	beq.n	800105e <__aeabi_dsub+0x5a>
 800105c:	e0b1      	b.n	80011c2 <__aeabi_dsub+0x1be>
 800105e:	4663      	mov	r3, ip
 8001060:	4313      	orrs	r3, r2
 8001062:	d100      	bne.n	8001066 <__aeabi_dsub+0x62>
 8001064:	e123      	b.n	80012ae <__aeabi_dsub+0x2aa>
 8001066:	1e73      	subs	r3, r6, #1
 8001068:	2b00      	cmp	r3, #0
 800106a:	d000      	beq.n	800106e <__aeabi_dsub+0x6a>
 800106c:	e1ba      	b.n	80013e4 <__aeabi_dsub+0x3e0>
 800106e:	1a86      	subs	r6, r0, r2
 8001070:	4663      	mov	r3, ip
 8001072:	42b0      	cmp	r0, r6
 8001074:	4180      	sbcs	r0, r0
 8001076:	2501      	movs	r5, #1
 8001078:	1ac9      	subs	r1, r1, r3
 800107a:	4240      	negs	r0, r0
 800107c:	1a09      	subs	r1, r1, r0
 800107e:	020b      	lsls	r3, r1, #8
 8001080:	d400      	bmi.n	8001084 <__aeabi_dsub+0x80>
 8001082:	e147      	b.n	8001314 <__aeabi_dsub+0x310>
 8001084:	0249      	lsls	r1, r1, #9
 8001086:	0a4b      	lsrs	r3, r1, #9
 8001088:	4698      	mov	r8, r3
 800108a:	4643      	mov	r3, r8
 800108c:	2b00      	cmp	r3, #0
 800108e:	d100      	bne.n	8001092 <__aeabi_dsub+0x8e>
 8001090:	e189      	b.n	80013a6 <__aeabi_dsub+0x3a2>
 8001092:	4640      	mov	r0, r8
 8001094:	f000 fb6e 	bl	8001774 <__clzsi2>
 8001098:	0003      	movs	r3, r0
 800109a:	3b08      	subs	r3, #8
 800109c:	2b1f      	cmp	r3, #31
 800109e:	dd00      	ble.n	80010a2 <__aeabi_dsub+0x9e>
 80010a0:	e17c      	b.n	800139c <__aeabi_dsub+0x398>
 80010a2:	2220      	movs	r2, #32
 80010a4:	0030      	movs	r0, r6
 80010a6:	1ad2      	subs	r2, r2, r3
 80010a8:	4641      	mov	r1, r8
 80010aa:	40d0      	lsrs	r0, r2
 80010ac:	4099      	lsls	r1, r3
 80010ae:	0002      	movs	r2, r0
 80010b0:	409e      	lsls	r6, r3
 80010b2:	430a      	orrs	r2, r1
 80010b4:	429d      	cmp	r5, r3
 80010b6:	dd00      	ble.n	80010ba <__aeabi_dsub+0xb6>
 80010b8:	e16a      	b.n	8001390 <__aeabi_dsub+0x38c>
 80010ba:	1b5d      	subs	r5, r3, r5
 80010bc:	1c6b      	adds	r3, r5, #1
 80010be:	2b1f      	cmp	r3, #31
 80010c0:	dd00      	ble.n	80010c4 <__aeabi_dsub+0xc0>
 80010c2:	e194      	b.n	80013ee <__aeabi_dsub+0x3ea>
 80010c4:	2120      	movs	r1, #32
 80010c6:	0010      	movs	r0, r2
 80010c8:	0035      	movs	r5, r6
 80010ca:	1ac9      	subs	r1, r1, r3
 80010cc:	408e      	lsls	r6, r1
 80010ce:	40da      	lsrs	r2, r3
 80010d0:	4088      	lsls	r0, r1
 80010d2:	40dd      	lsrs	r5, r3
 80010d4:	1e71      	subs	r1, r6, #1
 80010d6:	418e      	sbcs	r6, r1
 80010d8:	0011      	movs	r1, r2
 80010da:	2207      	movs	r2, #7
 80010dc:	4328      	orrs	r0, r5
 80010de:	2500      	movs	r5, #0
 80010e0:	4306      	orrs	r6, r0
 80010e2:	4032      	ands	r2, r6
 80010e4:	2a00      	cmp	r2, #0
 80010e6:	d009      	beq.n	80010fc <__aeabi_dsub+0xf8>
 80010e8:	230f      	movs	r3, #15
 80010ea:	4033      	ands	r3, r6
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d005      	beq.n	80010fc <__aeabi_dsub+0xf8>
 80010f0:	1d33      	adds	r3, r6, #4
 80010f2:	42b3      	cmp	r3, r6
 80010f4:	41b6      	sbcs	r6, r6
 80010f6:	4276      	negs	r6, r6
 80010f8:	1989      	adds	r1, r1, r6
 80010fa:	001e      	movs	r6, r3
 80010fc:	020b      	lsls	r3, r1, #8
 80010fe:	d400      	bmi.n	8001102 <__aeabi_dsub+0xfe>
 8001100:	e23d      	b.n	800157e <__aeabi_dsub+0x57a>
 8001102:	1c6a      	adds	r2, r5, #1
 8001104:	4b91      	ldr	r3, [pc, #580]	; (800134c <__aeabi_dsub+0x348>)
 8001106:	0555      	lsls	r5, r2, #21
 8001108:	0d6d      	lsrs	r5, r5, #21
 800110a:	429a      	cmp	r2, r3
 800110c:	d100      	bne.n	8001110 <__aeabi_dsub+0x10c>
 800110e:	e119      	b.n	8001344 <__aeabi_dsub+0x340>
 8001110:	4a8f      	ldr	r2, [pc, #572]	; (8001350 <__aeabi_dsub+0x34c>)
 8001112:	08f6      	lsrs	r6, r6, #3
 8001114:	400a      	ands	r2, r1
 8001116:	0757      	lsls	r7, r2, #29
 8001118:	0252      	lsls	r2, r2, #9
 800111a:	4337      	orrs	r7, r6
 800111c:	0b12      	lsrs	r2, r2, #12
 800111e:	e09b      	b.n	8001258 <__aeabi_dsub+0x254>
 8001120:	2e00      	cmp	r6, #0
 8001122:	d000      	beq.n	8001126 <__aeabi_dsub+0x122>
 8001124:	e0c5      	b.n	80012b2 <__aeabi_dsub+0x2ae>
 8001126:	1c6e      	adds	r6, r5, #1
 8001128:	0576      	lsls	r6, r6, #21
 800112a:	0d76      	lsrs	r6, r6, #21
 800112c:	2e01      	cmp	r6, #1
 800112e:	dc00      	bgt.n	8001132 <__aeabi_dsub+0x12e>
 8001130:	e148      	b.n	80013c4 <__aeabi_dsub+0x3c0>
 8001132:	4667      	mov	r7, ip
 8001134:	1a86      	subs	r6, r0, r2
 8001136:	1bcb      	subs	r3, r1, r7
 8001138:	42b0      	cmp	r0, r6
 800113a:	41bf      	sbcs	r7, r7
 800113c:	427f      	negs	r7, r7
 800113e:	46b8      	mov	r8, r7
 8001140:	001f      	movs	r7, r3
 8001142:	4643      	mov	r3, r8
 8001144:	1aff      	subs	r7, r7, r3
 8001146:	003b      	movs	r3, r7
 8001148:	46b8      	mov	r8, r7
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	d500      	bpl.n	8001150 <__aeabi_dsub+0x14c>
 800114e:	e15f      	b.n	8001410 <__aeabi_dsub+0x40c>
 8001150:	4337      	orrs	r7, r6
 8001152:	d19a      	bne.n	800108a <__aeabi_dsub+0x86>
 8001154:	2200      	movs	r2, #0
 8001156:	2400      	movs	r4, #0
 8001158:	2500      	movs	r5, #0
 800115a:	e079      	b.n	8001250 <__aeabi_dsub+0x24c>
 800115c:	2e00      	cmp	r6, #0
 800115e:	dc00      	bgt.n	8001162 <__aeabi_dsub+0x15e>
 8001160:	e0fa      	b.n	8001358 <__aeabi_dsub+0x354>
 8001162:	2f00      	cmp	r7, #0
 8001164:	d100      	bne.n	8001168 <__aeabi_dsub+0x164>
 8001166:	e08d      	b.n	8001284 <__aeabi_dsub+0x280>
 8001168:	4b78      	ldr	r3, [pc, #480]	; (800134c <__aeabi_dsub+0x348>)
 800116a:	429d      	cmp	r5, r3
 800116c:	d067      	beq.n	800123e <__aeabi_dsub+0x23a>
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	4667      	mov	r7, ip
 8001172:	041b      	lsls	r3, r3, #16
 8001174:	431f      	orrs	r7, r3
 8001176:	46bc      	mov	ip, r7
 8001178:	2e38      	cmp	r6, #56	; 0x38
 800117a:	dc00      	bgt.n	800117e <__aeabi_dsub+0x17a>
 800117c:	e152      	b.n	8001424 <__aeabi_dsub+0x420>
 800117e:	4663      	mov	r3, ip
 8001180:	4313      	orrs	r3, r2
 8001182:	1e5a      	subs	r2, r3, #1
 8001184:	4193      	sbcs	r3, r2
 8001186:	181e      	adds	r6, r3, r0
 8001188:	4286      	cmp	r6, r0
 800118a:	4180      	sbcs	r0, r0
 800118c:	4240      	negs	r0, r0
 800118e:	1809      	adds	r1, r1, r0
 8001190:	020b      	lsls	r3, r1, #8
 8001192:	d400      	bmi.n	8001196 <__aeabi_dsub+0x192>
 8001194:	e0be      	b.n	8001314 <__aeabi_dsub+0x310>
 8001196:	4b6d      	ldr	r3, [pc, #436]	; (800134c <__aeabi_dsub+0x348>)
 8001198:	3501      	adds	r5, #1
 800119a:	429d      	cmp	r5, r3
 800119c:	d100      	bne.n	80011a0 <__aeabi_dsub+0x19c>
 800119e:	e0d2      	b.n	8001346 <__aeabi_dsub+0x342>
 80011a0:	4a6b      	ldr	r2, [pc, #428]	; (8001350 <__aeabi_dsub+0x34c>)
 80011a2:	0873      	lsrs	r3, r6, #1
 80011a4:	400a      	ands	r2, r1
 80011a6:	2101      	movs	r1, #1
 80011a8:	400e      	ands	r6, r1
 80011aa:	431e      	orrs	r6, r3
 80011ac:	0851      	lsrs	r1, r2, #1
 80011ae:	07d3      	lsls	r3, r2, #31
 80011b0:	2207      	movs	r2, #7
 80011b2:	431e      	orrs	r6, r3
 80011b4:	4032      	ands	r2, r6
 80011b6:	e795      	b.n	80010e4 <__aeabi_dsub+0xe0>
 80011b8:	001e      	movs	r6, r3
 80011ba:	4316      	orrs	r6, r2
 80011bc:	d000      	beq.n	80011c0 <__aeabi_dsub+0x1bc>
 80011be:	e745      	b.n	800104c <__aeabi_dsub+0x48>
 80011c0:	e740      	b.n	8001044 <__aeabi_dsub+0x40>
 80011c2:	4b62      	ldr	r3, [pc, #392]	; (800134c <__aeabi_dsub+0x348>)
 80011c4:	429d      	cmp	r5, r3
 80011c6:	d03a      	beq.n	800123e <__aeabi_dsub+0x23a>
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	4667      	mov	r7, ip
 80011cc:	041b      	lsls	r3, r3, #16
 80011ce:	431f      	orrs	r7, r3
 80011d0:	46bc      	mov	ip, r7
 80011d2:	2e38      	cmp	r6, #56	; 0x38
 80011d4:	dd00      	ble.n	80011d8 <__aeabi_dsub+0x1d4>
 80011d6:	e0eb      	b.n	80013b0 <__aeabi_dsub+0x3ac>
 80011d8:	2e1f      	cmp	r6, #31
 80011da:	dc00      	bgt.n	80011de <__aeabi_dsub+0x1da>
 80011dc:	e13a      	b.n	8001454 <__aeabi_dsub+0x450>
 80011de:	0033      	movs	r3, r6
 80011e0:	4667      	mov	r7, ip
 80011e2:	3b20      	subs	r3, #32
 80011e4:	40df      	lsrs	r7, r3
 80011e6:	003b      	movs	r3, r7
 80011e8:	2e20      	cmp	r6, #32
 80011ea:	d005      	beq.n	80011f8 <__aeabi_dsub+0x1f4>
 80011ec:	2740      	movs	r7, #64	; 0x40
 80011ee:	1bbf      	subs	r7, r7, r6
 80011f0:	4666      	mov	r6, ip
 80011f2:	40be      	lsls	r6, r7
 80011f4:	4332      	orrs	r2, r6
 80011f6:	4690      	mov	r8, r2
 80011f8:	4646      	mov	r6, r8
 80011fa:	1e72      	subs	r2, r6, #1
 80011fc:	4196      	sbcs	r6, r2
 80011fe:	4333      	orrs	r3, r6
 8001200:	e0da      	b.n	80013b8 <__aeabi_dsub+0x3b4>
 8001202:	2b00      	cmp	r3, #0
 8001204:	d100      	bne.n	8001208 <__aeabi_dsub+0x204>
 8001206:	e214      	b.n	8001632 <__aeabi_dsub+0x62e>
 8001208:	4663      	mov	r3, ip
 800120a:	4313      	orrs	r3, r2
 800120c:	d100      	bne.n	8001210 <__aeabi_dsub+0x20c>
 800120e:	e168      	b.n	80014e2 <__aeabi_dsub+0x4de>
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	074e      	lsls	r6, r1, #29
 8001214:	08c0      	lsrs	r0, r0, #3
 8001216:	08c9      	lsrs	r1, r1, #3
 8001218:	031b      	lsls	r3, r3, #12
 800121a:	4306      	orrs	r6, r0
 800121c:	4219      	tst	r1, r3
 800121e:	d008      	beq.n	8001232 <__aeabi_dsub+0x22e>
 8001220:	4660      	mov	r0, ip
 8001222:	08c0      	lsrs	r0, r0, #3
 8001224:	4218      	tst	r0, r3
 8001226:	d104      	bne.n	8001232 <__aeabi_dsub+0x22e>
 8001228:	4663      	mov	r3, ip
 800122a:	0001      	movs	r1, r0
 800122c:	08d2      	lsrs	r2, r2, #3
 800122e:	075e      	lsls	r6, r3, #29
 8001230:	4316      	orrs	r6, r2
 8001232:	00f3      	lsls	r3, r6, #3
 8001234:	4699      	mov	r9, r3
 8001236:	00c9      	lsls	r1, r1, #3
 8001238:	0f72      	lsrs	r2, r6, #29
 800123a:	4d44      	ldr	r5, [pc, #272]	; (800134c <__aeabi_dsub+0x348>)
 800123c:	4311      	orrs	r1, r2
 800123e:	464b      	mov	r3, r9
 8001240:	08de      	lsrs	r6, r3, #3
 8001242:	4b42      	ldr	r3, [pc, #264]	; (800134c <__aeabi_dsub+0x348>)
 8001244:	074f      	lsls	r7, r1, #29
 8001246:	4337      	orrs	r7, r6
 8001248:	08ca      	lsrs	r2, r1, #3
 800124a:	429d      	cmp	r5, r3
 800124c:	d100      	bne.n	8001250 <__aeabi_dsub+0x24c>
 800124e:	e06e      	b.n	800132e <__aeabi_dsub+0x32a>
 8001250:	0312      	lsls	r2, r2, #12
 8001252:	056d      	lsls	r5, r5, #21
 8001254:	0b12      	lsrs	r2, r2, #12
 8001256:	0d6d      	lsrs	r5, r5, #21
 8001258:	2100      	movs	r1, #0
 800125a:	0312      	lsls	r2, r2, #12
 800125c:	0b13      	lsrs	r3, r2, #12
 800125e:	0d0a      	lsrs	r2, r1, #20
 8001260:	0512      	lsls	r2, r2, #20
 8001262:	431a      	orrs	r2, r3
 8001264:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <__aeabi_dsub+0x350>)
 8001266:	052d      	lsls	r5, r5, #20
 8001268:	4013      	ands	r3, r2
 800126a:	432b      	orrs	r3, r5
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	07e4      	lsls	r4, r4, #31
 8001270:	085b      	lsrs	r3, r3, #1
 8001272:	4323      	orrs	r3, r4
 8001274:	0038      	movs	r0, r7
 8001276:	0019      	movs	r1, r3
 8001278:	bc3c      	pop	{r2, r3, r4, r5}
 800127a:	4690      	mov	r8, r2
 800127c:	4699      	mov	r9, r3
 800127e:	46a2      	mov	sl, r4
 8001280:	46ab      	mov	fp, r5
 8001282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001284:	4663      	mov	r3, ip
 8001286:	4313      	orrs	r3, r2
 8001288:	d011      	beq.n	80012ae <__aeabi_dsub+0x2aa>
 800128a:	1e73      	subs	r3, r6, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	d000      	beq.n	8001292 <__aeabi_dsub+0x28e>
 8001290:	e107      	b.n	80014a2 <__aeabi_dsub+0x49e>
 8001292:	1886      	adds	r6, r0, r2
 8001294:	4286      	cmp	r6, r0
 8001296:	4180      	sbcs	r0, r0
 8001298:	4461      	add	r1, ip
 800129a:	4240      	negs	r0, r0
 800129c:	1809      	adds	r1, r1, r0
 800129e:	2501      	movs	r5, #1
 80012a0:	020b      	lsls	r3, r1, #8
 80012a2:	d537      	bpl.n	8001314 <__aeabi_dsub+0x310>
 80012a4:	2502      	movs	r5, #2
 80012a6:	e77b      	b.n	80011a0 <__aeabi_dsub+0x19c>
 80012a8:	003e      	movs	r6, r7
 80012aa:	4661      	mov	r1, ip
 80012ac:	4691      	mov	r9, r2
 80012ae:	0035      	movs	r5, r6
 80012b0:	e7c5      	b.n	800123e <__aeabi_dsub+0x23a>
 80012b2:	465c      	mov	r4, fp
 80012b4:	2d00      	cmp	r5, #0
 80012b6:	d000      	beq.n	80012ba <__aeabi_dsub+0x2b6>
 80012b8:	e0e1      	b.n	800147e <__aeabi_dsub+0x47a>
 80012ba:	000b      	movs	r3, r1
 80012bc:	4303      	orrs	r3, r0
 80012be:	d0f3      	beq.n	80012a8 <__aeabi_dsub+0x2a4>
 80012c0:	1c73      	adds	r3, r6, #1
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dsub+0x2c2>
 80012c4:	e1ac      	b.n	8001620 <__aeabi_dsub+0x61c>
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <__aeabi_dsub+0x348>)
 80012c8:	429f      	cmp	r7, r3
 80012ca:	d100      	bne.n	80012ce <__aeabi_dsub+0x2ca>
 80012cc:	e13a      	b.n	8001544 <__aeabi_dsub+0x540>
 80012ce:	43f3      	mvns	r3, r6
 80012d0:	2b38      	cmp	r3, #56	; 0x38
 80012d2:	dd00      	ble.n	80012d6 <__aeabi_dsub+0x2d2>
 80012d4:	e16f      	b.n	80015b6 <__aeabi_dsub+0x5b2>
 80012d6:	2b1f      	cmp	r3, #31
 80012d8:	dd00      	ble.n	80012dc <__aeabi_dsub+0x2d8>
 80012da:	e18c      	b.n	80015f6 <__aeabi_dsub+0x5f2>
 80012dc:	2520      	movs	r5, #32
 80012de:	000e      	movs	r6, r1
 80012e0:	1aed      	subs	r5, r5, r3
 80012e2:	40ae      	lsls	r6, r5
 80012e4:	46b0      	mov	r8, r6
 80012e6:	0006      	movs	r6, r0
 80012e8:	46aa      	mov	sl, r5
 80012ea:	40de      	lsrs	r6, r3
 80012ec:	4645      	mov	r5, r8
 80012ee:	4335      	orrs	r5, r6
 80012f0:	002e      	movs	r6, r5
 80012f2:	4655      	mov	r5, sl
 80012f4:	40d9      	lsrs	r1, r3
 80012f6:	40a8      	lsls	r0, r5
 80012f8:	4663      	mov	r3, ip
 80012fa:	1e45      	subs	r5, r0, #1
 80012fc:	41a8      	sbcs	r0, r5
 80012fe:	1a5b      	subs	r3, r3, r1
 8001300:	469c      	mov	ip, r3
 8001302:	4330      	orrs	r0, r6
 8001304:	1a16      	subs	r6, r2, r0
 8001306:	42b2      	cmp	r2, r6
 8001308:	4192      	sbcs	r2, r2
 800130a:	4663      	mov	r3, ip
 800130c:	4252      	negs	r2, r2
 800130e:	1a99      	subs	r1, r3, r2
 8001310:	003d      	movs	r5, r7
 8001312:	e6b4      	b.n	800107e <__aeabi_dsub+0x7a>
 8001314:	2207      	movs	r2, #7
 8001316:	4032      	ands	r2, r6
 8001318:	2a00      	cmp	r2, #0
 800131a:	d000      	beq.n	800131e <__aeabi_dsub+0x31a>
 800131c:	e6e4      	b.n	80010e8 <__aeabi_dsub+0xe4>
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <__aeabi_dsub+0x348>)
 8001320:	08f6      	lsrs	r6, r6, #3
 8001322:	074f      	lsls	r7, r1, #29
 8001324:	4337      	orrs	r7, r6
 8001326:	08ca      	lsrs	r2, r1, #3
 8001328:	429d      	cmp	r5, r3
 800132a:	d000      	beq.n	800132e <__aeabi_dsub+0x32a>
 800132c:	e790      	b.n	8001250 <__aeabi_dsub+0x24c>
 800132e:	003b      	movs	r3, r7
 8001330:	4313      	orrs	r3, r2
 8001332:	d100      	bne.n	8001336 <__aeabi_dsub+0x332>
 8001334:	e1a6      	b.n	8001684 <__aeabi_dsub+0x680>
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	031b      	lsls	r3, r3, #12
 800133a:	431a      	orrs	r2, r3
 800133c:	0312      	lsls	r2, r2, #12
 800133e:	0b12      	lsrs	r2, r2, #12
 8001340:	4d02      	ldr	r5, [pc, #8]	; (800134c <__aeabi_dsub+0x348>)
 8001342:	e789      	b.n	8001258 <__aeabi_dsub+0x254>
 8001344:	0015      	movs	r5, r2
 8001346:	2200      	movs	r2, #0
 8001348:	2700      	movs	r7, #0
 800134a:	e785      	b.n	8001258 <__aeabi_dsub+0x254>
 800134c:	000007ff 	.word	0x000007ff
 8001350:	ff7fffff 	.word	0xff7fffff
 8001354:	800fffff 	.word	0x800fffff
 8001358:	2e00      	cmp	r6, #0
 800135a:	d000      	beq.n	800135e <__aeabi_dsub+0x35a>
 800135c:	e0c7      	b.n	80014ee <__aeabi_dsub+0x4ea>
 800135e:	1c6b      	adds	r3, r5, #1
 8001360:	055e      	lsls	r6, r3, #21
 8001362:	0d76      	lsrs	r6, r6, #21
 8001364:	2e01      	cmp	r6, #1
 8001366:	dc00      	bgt.n	800136a <__aeabi_dsub+0x366>
 8001368:	e0f0      	b.n	800154c <__aeabi_dsub+0x548>
 800136a:	4dc8      	ldr	r5, [pc, #800]	; (800168c <__aeabi_dsub+0x688>)
 800136c:	42ab      	cmp	r3, r5
 800136e:	d100      	bne.n	8001372 <__aeabi_dsub+0x36e>
 8001370:	e0b9      	b.n	80014e6 <__aeabi_dsub+0x4e2>
 8001372:	1885      	adds	r5, r0, r2
 8001374:	000a      	movs	r2, r1
 8001376:	4285      	cmp	r5, r0
 8001378:	4189      	sbcs	r1, r1
 800137a:	4462      	add	r2, ip
 800137c:	4249      	negs	r1, r1
 800137e:	1851      	adds	r1, r2, r1
 8001380:	2207      	movs	r2, #7
 8001382:	07ce      	lsls	r6, r1, #31
 8001384:	086d      	lsrs	r5, r5, #1
 8001386:	432e      	orrs	r6, r5
 8001388:	0849      	lsrs	r1, r1, #1
 800138a:	4032      	ands	r2, r6
 800138c:	001d      	movs	r5, r3
 800138e:	e6a9      	b.n	80010e4 <__aeabi_dsub+0xe0>
 8001390:	49bf      	ldr	r1, [pc, #764]	; (8001690 <__aeabi_dsub+0x68c>)
 8001392:	1aed      	subs	r5, r5, r3
 8001394:	4011      	ands	r1, r2
 8001396:	2207      	movs	r2, #7
 8001398:	4032      	ands	r2, r6
 800139a:	e6a3      	b.n	80010e4 <__aeabi_dsub+0xe0>
 800139c:	0032      	movs	r2, r6
 800139e:	3828      	subs	r0, #40	; 0x28
 80013a0:	4082      	lsls	r2, r0
 80013a2:	2600      	movs	r6, #0
 80013a4:	e686      	b.n	80010b4 <__aeabi_dsub+0xb0>
 80013a6:	0030      	movs	r0, r6
 80013a8:	f000 f9e4 	bl	8001774 <__clzsi2>
 80013ac:	3020      	adds	r0, #32
 80013ae:	e673      	b.n	8001098 <__aeabi_dsub+0x94>
 80013b0:	4663      	mov	r3, ip
 80013b2:	4313      	orrs	r3, r2
 80013b4:	1e5a      	subs	r2, r3, #1
 80013b6:	4193      	sbcs	r3, r2
 80013b8:	1ac6      	subs	r6, r0, r3
 80013ba:	42b0      	cmp	r0, r6
 80013bc:	4180      	sbcs	r0, r0
 80013be:	4240      	negs	r0, r0
 80013c0:	1a09      	subs	r1, r1, r0
 80013c2:	e65c      	b.n	800107e <__aeabi_dsub+0x7a>
 80013c4:	000e      	movs	r6, r1
 80013c6:	4667      	mov	r7, ip
 80013c8:	4306      	orrs	r6, r0
 80013ca:	4317      	orrs	r7, r2
 80013cc:	2d00      	cmp	r5, #0
 80013ce:	d15e      	bne.n	800148e <__aeabi_dsub+0x48a>
 80013d0:	2e00      	cmp	r6, #0
 80013d2:	d000      	beq.n	80013d6 <__aeabi_dsub+0x3d2>
 80013d4:	e0f3      	b.n	80015be <__aeabi_dsub+0x5ba>
 80013d6:	2f00      	cmp	r7, #0
 80013d8:	d100      	bne.n	80013dc <__aeabi_dsub+0x3d8>
 80013da:	e11e      	b.n	800161a <__aeabi_dsub+0x616>
 80013dc:	465c      	mov	r4, fp
 80013de:	4661      	mov	r1, ip
 80013e0:	4691      	mov	r9, r2
 80013e2:	e72c      	b.n	800123e <__aeabi_dsub+0x23a>
 80013e4:	4fa9      	ldr	r7, [pc, #676]	; (800168c <__aeabi_dsub+0x688>)
 80013e6:	42be      	cmp	r6, r7
 80013e8:	d07b      	beq.n	80014e2 <__aeabi_dsub+0x4de>
 80013ea:	001e      	movs	r6, r3
 80013ec:	e6f1      	b.n	80011d2 <__aeabi_dsub+0x1ce>
 80013ee:	0010      	movs	r0, r2
 80013f0:	3d1f      	subs	r5, #31
 80013f2:	40e8      	lsrs	r0, r5
 80013f4:	2b20      	cmp	r3, #32
 80013f6:	d003      	beq.n	8001400 <__aeabi_dsub+0x3fc>
 80013f8:	2140      	movs	r1, #64	; 0x40
 80013fa:	1acb      	subs	r3, r1, r3
 80013fc:	409a      	lsls	r2, r3
 80013fe:	4316      	orrs	r6, r2
 8001400:	1e73      	subs	r3, r6, #1
 8001402:	419e      	sbcs	r6, r3
 8001404:	2207      	movs	r2, #7
 8001406:	4306      	orrs	r6, r0
 8001408:	4032      	ands	r2, r6
 800140a:	2100      	movs	r1, #0
 800140c:	2500      	movs	r5, #0
 800140e:	e783      	b.n	8001318 <__aeabi_dsub+0x314>
 8001410:	1a16      	subs	r6, r2, r0
 8001412:	4663      	mov	r3, ip
 8001414:	42b2      	cmp	r2, r6
 8001416:	4180      	sbcs	r0, r0
 8001418:	1a59      	subs	r1, r3, r1
 800141a:	4240      	negs	r0, r0
 800141c:	1a0b      	subs	r3, r1, r0
 800141e:	4698      	mov	r8, r3
 8001420:	465c      	mov	r4, fp
 8001422:	e632      	b.n	800108a <__aeabi_dsub+0x86>
 8001424:	2e1f      	cmp	r6, #31
 8001426:	dd00      	ble.n	800142a <__aeabi_dsub+0x426>
 8001428:	e0ab      	b.n	8001582 <__aeabi_dsub+0x57e>
 800142a:	2720      	movs	r7, #32
 800142c:	1bbb      	subs	r3, r7, r6
 800142e:	469a      	mov	sl, r3
 8001430:	4663      	mov	r3, ip
 8001432:	4657      	mov	r7, sl
 8001434:	40bb      	lsls	r3, r7
 8001436:	4699      	mov	r9, r3
 8001438:	0013      	movs	r3, r2
 800143a:	464f      	mov	r7, r9
 800143c:	40f3      	lsrs	r3, r6
 800143e:	431f      	orrs	r7, r3
 8001440:	003b      	movs	r3, r7
 8001442:	4657      	mov	r7, sl
 8001444:	40ba      	lsls	r2, r7
 8001446:	1e57      	subs	r7, r2, #1
 8001448:	41ba      	sbcs	r2, r7
 800144a:	4313      	orrs	r3, r2
 800144c:	4662      	mov	r2, ip
 800144e:	40f2      	lsrs	r2, r6
 8001450:	1889      	adds	r1, r1, r2
 8001452:	e698      	b.n	8001186 <__aeabi_dsub+0x182>
 8001454:	2720      	movs	r7, #32
 8001456:	1bbb      	subs	r3, r7, r6
 8001458:	469a      	mov	sl, r3
 800145a:	4663      	mov	r3, ip
 800145c:	4657      	mov	r7, sl
 800145e:	40bb      	lsls	r3, r7
 8001460:	4699      	mov	r9, r3
 8001462:	0013      	movs	r3, r2
 8001464:	464f      	mov	r7, r9
 8001466:	40f3      	lsrs	r3, r6
 8001468:	431f      	orrs	r7, r3
 800146a:	003b      	movs	r3, r7
 800146c:	4657      	mov	r7, sl
 800146e:	40ba      	lsls	r2, r7
 8001470:	1e57      	subs	r7, r2, #1
 8001472:	41ba      	sbcs	r2, r7
 8001474:	4313      	orrs	r3, r2
 8001476:	4662      	mov	r2, ip
 8001478:	40f2      	lsrs	r2, r6
 800147a:	1a89      	subs	r1, r1, r2
 800147c:	e79c      	b.n	80013b8 <__aeabi_dsub+0x3b4>
 800147e:	4b83      	ldr	r3, [pc, #524]	; (800168c <__aeabi_dsub+0x688>)
 8001480:	429f      	cmp	r7, r3
 8001482:	d05f      	beq.n	8001544 <__aeabi_dsub+0x540>
 8001484:	2580      	movs	r5, #128	; 0x80
 8001486:	042d      	lsls	r5, r5, #16
 8001488:	4273      	negs	r3, r6
 800148a:	4329      	orrs	r1, r5
 800148c:	e720      	b.n	80012d0 <__aeabi_dsub+0x2cc>
 800148e:	2e00      	cmp	r6, #0
 8001490:	d10c      	bne.n	80014ac <__aeabi_dsub+0x4a8>
 8001492:	2f00      	cmp	r7, #0
 8001494:	d100      	bne.n	8001498 <__aeabi_dsub+0x494>
 8001496:	e0d0      	b.n	800163a <__aeabi_dsub+0x636>
 8001498:	465c      	mov	r4, fp
 800149a:	4661      	mov	r1, ip
 800149c:	4691      	mov	r9, r2
 800149e:	4d7b      	ldr	r5, [pc, #492]	; (800168c <__aeabi_dsub+0x688>)
 80014a0:	e6cd      	b.n	800123e <__aeabi_dsub+0x23a>
 80014a2:	4f7a      	ldr	r7, [pc, #488]	; (800168c <__aeabi_dsub+0x688>)
 80014a4:	42be      	cmp	r6, r7
 80014a6:	d01c      	beq.n	80014e2 <__aeabi_dsub+0x4de>
 80014a8:	001e      	movs	r6, r3
 80014aa:	e665      	b.n	8001178 <__aeabi_dsub+0x174>
 80014ac:	2f00      	cmp	r7, #0
 80014ae:	d018      	beq.n	80014e2 <__aeabi_dsub+0x4de>
 80014b0:	08c0      	lsrs	r0, r0, #3
 80014b2:	074e      	lsls	r6, r1, #29
 80014b4:	4306      	orrs	r6, r0
 80014b6:	2080      	movs	r0, #128	; 0x80
 80014b8:	08c9      	lsrs	r1, r1, #3
 80014ba:	0300      	lsls	r0, r0, #12
 80014bc:	4201      	tst	r1, r0
 80014be:	d008      	beq.n	80014d2 <__aeabi_dsub+0x4ce>
 80014c0:	4663      	mov	r3, ip
 80014c2:	08dc      	lsrs	r4, r3, #3
 80014c4:	4204      	tst	r4, r0
 80014c6:	d104      	bne.n	80014d2 <__aeabi_dsub+0x4ce>
 80014c8:	0021      	movs	r1, r4
 80014ca:	46da      	mov	sl, fp
 80014cc:	08d2      	lsrs	r2, r2, #3
 80014ce:	075e      	lsls	r6, r3, #29
 80014d0:	4316      	orrs	r6, r2
 80014d2:	00f3      	lsls	r3, r6, #3
 80014d4:	4699      	mov	r9, r3
 80014d6:	2401      	movs	r4, #1
 80014d8:	4653      	mov	r3, sl
 80014da:	00c9      	lsls	r1, r1, #3
 80014dc:	0f72      	lsrs	r2, r6, #29
 80014de:	4311      	orrs	r1, r2
 80014e0:	401c      	ands	r4, r3
 80014e2:	4d6a      	ldr	r5, [pc, #424]	; (800168c <__aeabi_dsub+0x688>)
 80014e4:	e6ab      	b.n	800123e <__aeabi_dsub+0x23a>
 80014e6:	001d      	movs	r5, r3
 80014e8:	2200      	movs	r2, #0
 80014ea:	2700      	movs	r7, #0
 80014ec:	e6b4      	b.n	8001258 <__aeabi_dsub+0x254>
 80014ee:	2d00      	cmp	r5, #0
 80014f0:	d159      	bne.n	80015a6 <__aeabi_dsub+0x5a2>
 80014f2:	000b      	movs	r3, r1
 80014f4:	4303      	orrs	r3, r0
 80014f6:	d100      	bne.n	80014fa <__aeabi_dsub+0x4f6>
 80014f8:	e6d6      	b.n	80012a8 <__aeabi_dsub+0x2a4>
 80014fa:	1c73      	adds	r3, r6, #1
 80014fc:	d100      	bne.n	8001500 <__aeabi_dsub+0x4fc>
 80014fe:	e0b2      	b.n	8001666 <__aeabi_dsub+0x662>
 8001500:	4b62      	ldr	r3, [pc, #392]	; (800168c <__aeabi_dsub+0x688>)
 8001502:	429f      	cmp	r7, r3
 8001504:	d01e      	beq.n	8001544 <__aeabi_dsub+0x540>
 8001506:	43f3      	mvns	r3, r6
 8001508:	2b38      	cmp	r3, #56	; 0x38
 800150a:	dc6f      	bgt.n	80015ec <__aeabi_dsub+0x5e8>
 800150c:	2b1f      	cmp	r3, #31
 800150e:	dd00      	ble.n	8001512 <__aeabi_dsub+0x50e>
 8001510:	e097      	b.n	8001642 <__aeabi_dsub+0x63e>
 8001512:	2520      	movs	r5, #32
 8001514:	000e      	movs	r6, r1
 8001516:	1aed      	subs	r5, r5, r3
 8001518:	40ae      	lsls	r6, r5
 800151a:	46b0      	mov	r8, r6
 800151c:	0006      	movs	r6, r0
 800151e:	46aa      	mov	sl, r5
 8001520:	40de      	lsrs	r6, r3
 8001522:	4645      	mov	r5, r8
 8001524:	4335      	orrs	r5, r6
 8001526:	002e      	movs	r6, r5
 8001528:	4655      	mov	r5, sl
 800152a:	40a8      	lsls	r0, r5
 800152c:	40d9      	lsrs	r1, r3
 800152e:	1e45      	subs	r5, r0, #1
 8001530:	41a8      	sbcs	r0, r5
 8001532:	448c      	add	ip, r1
 8001534:	4306      	orrs	r6, r0
 8001536:	18b6      	adds	r6, r6, r2
 8001538:	4296      	cmp	r6, r2
 800153a:	4192      	sbcs	r2, r2
 800153c:	4251      	negs	r1, r2
 800153e:	4461      	add	r1, ip
 8001540:	003d      	movs	r5, r7
 8001542:	e625      	b.n	8001190 <__aeabi_dsub+0x18c>
 8001544:	003d      	movs	r5, r7
 8001546:	4661      	mov	r1, ip
 8001548:	4691      	mov	r9, r2
 800154a:	e678      	b.n	800123e <__aeabi_dsub+0x23a>
 800154c:	000b      	movs	r3, r1
 800154e:	4303      	orrs	r3, r0
 8001550:	2d00      	cmp	r5, #0
 8001552:	d000      	beq.n	8001556 <__aeabi_dsub+0x552>
 8001554:	e655      	b.n	8001202 <__aeabi_dsub+0x1fe>
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f5      	beq.n	8001546 <__aeabi_dsub+0x542>
 800155a:	4663      	mov	r3, ip
 800155c:	4313      	orrs	r3, r2
 800155e:	d100      	bne.n	8001562 <__aeabi_dsub+0x55e>
 8001560:	e66d      	b.n	800123e <__aeabi_dsub+0x23a>
 8001562:	1886      	adds	r6, r0, r2
 8001564:	4286      	cmp	r6, r0
 8001566:	4180      	sbcs	r0, r0
 8001568:	4461      	add	r1, ip
 800156a:	4240      	negs	r0, r0
 800156c:	1809      	adds	r1, r1, r0
 800156e:	2200      	movs	r2, #0
 8001570:	020b      	lsls	r3, r1, #8
 8001572:	d400      	bmi.n	8001576 <__aeabi_dsub+0x572>
 8001574:	e6d0      	b.n	8001318 <__aeabi_dsub+0x314>
 8001576:	4b46      	ldr	r3, [pc, #280]	; (8001690 <__aeabi_dsub+0x68c>)
 8001578:	3501      	adds	r5, #1
 800157a:	4019      	ands	r1, r3
 800157c:	e5b2      	b.n	80010e4 <__aeabi_dsub+0xe0>
 800157e:	46b1      	mov	r9, r6
 8001580:	e65d      	b.n	800123e <__aeabi_dsub+0x23a>
 8001582:	0033      	movs	r3, r6
 8001584:	4667      	mov	r7, ip
 8001586:	3b20      	subs	r3, #32
 8001588:	40df      	lsrs	r7, r3
 800158a:	003b      	movs	r3, r7
 800158c:	2e20      	cmp	r6, #32
 800158e:	d005      	beq.n	800159c <__aeabi_dsub+0x598>
 8001590:	2740      	movs	r7, #64	; 0x40
 8001592:	1bbf      	subs	r7, r7, r6
 8001594:	4666      	mov	r6, ip
 8001596:	40be      	lsls	r6, r7
 8001598:	4332      	orrs	r2, r6
 800159a:	4690      	mov	r8, r2
 800159c:	4646      	mov	r6, r8
 800159e:	1e72      	subs	r2, r6, #1
 80015a0:	4196      	sbcs	r6, r2
 80015a2:	4333      	orrs	r3, r6
 80015a4:	e5ef      	b.n	8001186 <__aeabi_dsub+0x182>
 80015a6:	4b39      	ldr	r3, [pc, #228]	; (800168c <__aeabi_dsub+0x688>)
 80015a8:	429f      	cmp	r7, r3
 80015aa:	d0cb      	beq.n	8001544 <__aeabi_dsub+0x540>
 80015ac:	2580      	movs	r5, #128	; 0x80
 80015ae:	042d      	lsls	r5, r5, #16
 80015b0:	4273      	negs	r3, r6
 80015b2:	4329      	orrs	r1, r5
 80015b4:	e7a8      	b.n	8001508 <__aeabi_dsub+0x504>
 80015b6:	4308      	orrs	r0, r1
 80015b8:	1e41      	subs	r1, r0, #1
 80015ba:	4188      	sbcs	r0, r1
 80015bc:	e6a2      	b.n	8001304 <__aeabi_dsub+0x300>
 80015be:	2f00      	cmp	r7, #0
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dsub+0x5c0>
 80015c2:	e63c      	b.n	800123e <__aeabi_dsub+0x23a>
 80015c4:	4663      	mov	r3, ip
 80015c6:	1a86      	subs	r6, r0, r2
 80015c8:	1acf      	subs	r7, r1, r3
 80015ca:	42b0      	cmp	r0, r6
 80015cc:	419b      	sbcs	r3, r3
 80015ce:	425b      	negs	r3, r3
 80015d0:	1afb      	subs	r3, r7, r3
 80015d2:	4698      	mov	r8, r3
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	d54e      	bpl.n	8001676 <__aeabi_dsub+0x672>
 80015d8:	1a16      	subs	r6, r2, r0
 80015da:	4663      	mov	r3, ip
 80015dc:	42b2      	cmp	r2, r6
 80015de:	4192      	sbcs	r2, r2
 80015e0:	1a59      	subs	r1, r3, r1
 80015e2:	4252      	negs	r2, r2
 80015e4:	1a89      	subs	r1, r1, r2
 80015e6:	465c      	mov	r4, fp
 80015e8:	2200      	movs	r2, #0
 80015ea:	e57b      	b.n	80010e4 <__aeabi_dsub+0xe0>
 80015ec:	4301      	orrs	r1, r0
 80015ee:	000e      	movs	r6, r1
 80015f0:	1e71      	subs	r1, r6, #1
 80015f2:	418e      	sbcs	r6, r1
 80015f4:	e79f      	b.n	8001536 <__aeabi_dsub+0x532>
 80015f6:	001d      	movs	r5, r3
 80015f8:	000e      	movs	r6, r1
 80015fa:	3d20      	subs	r5, #32
 80015fc:	40ee      	lsrs	r6, r5
 80015fe:	46b0      	mov	r8, r6
 8001600:	2b20      	cmp	r3, #32
 8001602:	d004      	beq.n	800160e <__aeabi_dsub+0x60a>
 8001604:	2540      	movs	r5, #64	; 0x40
 8001606:	1aeb      	subs	r3, r5, r3
 8001608:	4099      	lsls	r1, r3
 800160a:	4308      	orrs	r0, r1
 800160c:	4681      	mov	r9, r0
 800160e:	4648      	mov	r0, r9
 8001610:	4643      	mov	r3, r8
 8001612:	1e41      	subs	r1, r0, #1
 8001614:	4188      	sbcs	r0, r1
 8001616:	4318      	orrs	r0, r3
 8001618:	e674      	b.n	8001304 <__aeabi_dsub+0x300>
 800161a:	2200      	movs	r2, #0
 800161c:	2400      	movs	r4, #0
 800161e:	e617      	b.n	8001250 <__aeabi_dsub+0x24c>
 8001620:	1a16      	subs	r6, r2, r0
 8001622:	4663      	mov	r3, ip
 8001624:	42b2      	cmp	r2, r6
 8001626:	4192      	sbcs	r2, r2
 8001628:	1a59      	subs	r1, r3, r1
 800162a:	4252      	negs	r2, r2
 800162c:	1a89      	subs	r1, r1, r2
 800162e:	003d      	movs	r5, r7
 8001630:	e525      	b.n	800107e <__aeabi_dsub+0x7a>
 8001632:	4661      	mov	r1, ip
 8001634:	4691      	mov	r9, r2
 8001636:	4d15      	ldr	r5, [pc, #84]	; (800168c <__aeabi_dsub+0x688>)
 8001638:	e601      	b.n	800123e <__aeabi_dsub+0x23a>
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	2400      	movs	r4, #0
 800163e:	0312      	lsls	r2, r2, #12
 8001640:	e679      	b.n	8001336 <__aeabi_dsub+0x332>
 8001642:	001d      	movs	r5, r3
 8001644:	000e      	movs	r6, r1
 8001646:	3d20      	subs	r5, #32
 8001648:	40ee      	lsrs	r6, r5
 800164a:	46b0      	mov	r8, r6
 800164c:	2b20      	cmp	r3, #32
 800164e:	d004      	beq.n	800165a <__aeabi_dsub+0x656>
 8001650:	2540      	movs	r5, #64	; 0x40
 8001652:	1aeb      	subs	r3, r5, r3
 8001654:	4099      	lsls	r1, r3
 8001656:	4308      	orrs	r0, r1
 8001658:	4681      	mov	r9, r0
 800165a:	464e      	mov	r6, r9
 800165c:	4643      	mov	r3, r8
 800165e:	1e71      	subs	r1, r6, #1
 8001660:	418e      	sbcs	r6, r1
 8001662:	431e      	orrs	r6, r3
 8001664:	e767      	b.n	8001536 <__aeabi_dsub+0x532>
 8001666:	1886      	adds	r6, r0, r2
 8001668:	4296      	cmp	r6, r2
 800166a:	419b      	sbcs	r3, r3
 800166c:	4461      	add	r1, ip
 800166e:	425b      	negs	r3, r3
 8001670:	18c9      	adds	r1, r1, r3
 8001672:	003d      	movs	r5, r7
 8001674:	e58c      	b.n	8001190 <__aeabi_dsub+0x18c>
 8001676:	4647      	mov	r7, r8
 8001678:	4337      	orrs	r7, r6
 800167a:	d0ce      	beq.n	800161a <__aeabi_dsub+0x616>
 800167c:	2207      	movs	r2, #7
 800167e:	4641      	mov	r1, r8
 8001680:	4032      	ands	r2, r6
 8001682:	e649      	b.n	8001318 <__aeabi_dsub+0x314>
 8001684:	2700      	movs	r7, #0
 8001686:	003a      	movs	r2, r7
 8001688:	e5e6      	b.n	8001258 <__aeabi_dsub+0x254>
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	000007ff 	.word	0x000007ff
 8001690:	ff7fffff 	.word	0xff7fffff

08001694 <__aeabi_d2iz>:
 8001694:	b530      	push	{r4, r5, lr}
 8001696:	4d14      	ldr	r5, [pc, #80]	; (80016e8 <__aeabi_d2iz+0x54>)
 8001698:	030a      	lsls	r2, r1, #12
 800169a:	004b      	lsls	r3, r1, #1
 800169c:	0b12      	lsrs	r2, r2, #12
 800169e:	0d5b      	lsrs	r3, r3, #21
 80016a0:	0fc9      	lsrs	r1, r1, #31
 80016a2:	2400      	movs	r4, #0
 80016a4:	42ab      	cmp	r3, r5
 80016a6:	dd11      	ble.n	80016cc <__aeabi_d2iz+0x38>
 80016a8:	4c10      	ldr	r4, [pc, #64]	; (80016ec <__aeabi_d2iz+0x58>)
 80016aa:	42a3      	cmp	r3, r4
 80016ac:	dc10      	bgt.n	80016d0 <__aeabi_d2iz+0x3c>
 80016ae:	2480      	movs	r4, #128	; 0x80
 80016b0:	0364      	lsls	r4, r4, #13
 80016b2:	4322      	orrs	r2, r4
 80016b4:	4c0e      	ldr	r4, [pc, #56]	; (80016f0 <__aeabi_d2iz+0x5c>)
 80016b6:	1ae4      	subs	r4, r4, r3
 80016b8:	2c1f      	cmp	r4, #31
 80016ba:	dd0c      	ble.n	80016d6 <__aeabi_d2iz+0x42>
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <__aeabi_d2iz+0x60>)
 80016be:	1ac3      	subs	r3, r0, r3
 80016c0:	40da      	lsrs	r2, r3
 80016c2:	0013      	movs	r3, r2
 80016c4:	425c      	negs	r4, r3
 80016c6:	2900      	cmp	r1, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_d2iz+0x38>
 80016ca:	001c      	movs	r4, r3
 80016cc:	0020      	movs	r0, r4
 80016ce:	bd30      	pop	{r4, r5, pc}
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <__aeabi_d2iz+0x64>)
 80016d2:	18cc      	adds	r4, r1, r3
 80016d4:	e7fa      	b.n	80016cc <__aeabi_d2iz+0x38>
 80016d6:	4d09      	ldr	r5, [pc, #36]	; (80016fc <__aeabi_d2iz+0x68>)
 80016d8:	40e0      	lsrs	r0, r4
 80016da:	46ac      	mov	ip, r5
 80016dc:	4463      	add	r3, ip
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	4303      	orrs	r3, r0
 80016e4:	e7ee      	b.n	80016c4 <__aeabi_d2iz+0x30>
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	000003fe 	.word	0x000003fe
 80016ec:	0000041d 	.word	0x0000041d
 80016f0:	00000433 	.word	0x00000433
 80016f4:	00000413 	.word	0x00000413
 80016f8:	7fffffff 	.word	0x7fffffff
 80016fc:	fffffbed 	.word	0xfffffbed

08001700 <__aeabi_i2d>:
 8001700:	b570      	push	{r4, r5, r6, lr}
 8001702:	2800      	cmp	r0, #0
 8001704:	d02d      	beq.n	8001762 <__aeabi_i2d+0x62>
 8001706:	17c3      	asrs	r3, r0, #31
 8001708:	18c5      	adds	r5, r0, r3
 800170a:	405d      	eors	r5, r3
 800170c:	0fc4      	lsrs	r4, r0, #31
 800170e:	0028      	movs	r0, r5
 8001710:	f000 f830 	bl	8001774 <__clzsi2>
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <__aeabi_i2d+0x6c>)
 8001716:	1a1b      	subs	r3, r3, r0
 8001718:	055b      	lsls	r3, r3, #21
 800171a:	0d5b      	lsrs	r3, r3, #21
 800171c:	280a      	cmp	r0, #10
 800171e:	dd15      	ble.n	800174c <__aeabi_i2d+0x4c>
 8001720:	380b      	subs	r0, #11
 8001722:	4085      	lsls	r5, r0
 8001724:	2200      	movs	r2, #0
 8001726:	032d      	lsls	r5, r5, #12
 8001728:	0b2d      	lsrs	r5, r5, #12
 800172a:	2100      	movs	r1, #0
 800172c:	0010      	movs	r0, r2
 800172e:	032d      	lsls	r5, r5, #12
 8001730:	0d0a      	lsrs	r2, r1, #20
 8001732:	0b2d      	lsrs	r5, r5, #12
 8001734:	0512      	lsls	r2, r2, #20
 8001736:	432a      	orrs	r2, r5
 8001738:	4d0d      	ldr	r5, [pc, #52]	; (8001770 <__aeabi_i2d+0x70>)
 800173a:	051b      	lsls	r3, r3, #20
 800173c:	402a      	ands	r2, r5
 800173e:	4313      	orrs	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	07e4      	lsls	r4, r4, #31
 8001744:	085b      	lsrs	r3, r3, #1
 8001746:	4323      	orrs	r3, r4
 8001748:	0019      	movs	r1, r3
 800174a:	bd70      	pop	{r4, r5, r6, pc}
 800174c:	0002      	movs	r2, r0
 800174e:	0029      	movs	r1, r5
 8001750:	3215      	adds	r2, #21
 8001752:	4091      	lsls	r1, r2
 8001754:	000a      	movs	r2, r1
 8001756:	210b      	movs	r1, #11
 8001758:	1a08      	subs	r0, r1, r0
 800175a:	40c5      	lsrs	r5, r0
 800175c:	032d      	lsls	r5, r5, #12
 800175e:	0b2d      	lsrs	r5, r5, #12
 8001760:	e7e3      	b.n	800172a <__aeabi_i2d+0x2a>
 8001762:	2400      	movs	r4, #0
 8001764:	2300      	movs	r3, #0
 8001766:	2500      	movs	r5, #0
 8001768:	2200      	movs	r2, #0
 800176a:	e7de      	b.n	800172a <__aeabi_i2d+0x2a>
 800176c:	0000041e 	.word	0x0000041e
 8001770:	800fffff 	.word	0x800fffff

08001774 <__clzsi2>:
 8001774:	211c      	movs	r1, #28
 8001776:	2301      	movs	r3, #1
 8001778:	041b      	lsls	r3, r3, #16
 800177a:	4298      	cmp	r0, r3
 800177c:	d301      	bcc.n	8001782 <__clzsi2+0xe>
 800177e:	0c00      	lsrs	r0, r0, #16
 8001780:	3910      	subs	r1, #16
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	4298      	cmp	r0, r3
 8001786:	d301      	bcc.n	800178c <__clzsi2+0x18>
 8001788:	0a00      	lsrs	r0, r0, #8
 800178a:	3908      	subs	r1, #8
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	4298      	cmp	r0, r3
 8001790:	d301      	bcc.n	8001796 <__clzsi2+0x22>
 8001792:	0900      	lsrs	r0, r0, #4
 8001794:	3904      	subs	r1, #4
 8001796:	a202      	add	r2, pc, #8	; (adr r2, 80017a0 <__clzsi2+0x2c>)
 8001798:	5c10      	ldrb	r0, [r2, r0]
 800179a:	1840      	adds	r0, r0, r1
 800179c:	4770      	bx	lr
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	02020304 	.word	0x02020304
 80017a4:	01010101 	.word	0x01010101
	...

080017b0 <ACM_Init>:
	received_steering_angle.update_enabled = TRUE;
	received_brake_pressure.update_enabled = TRUE;
	received_acceleration.update_enabled = TRUE;
}

void ACM_Init(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0

	// all unsigned parameters
	parameters[0] = wheel_speed;
 80017b4:	4a19      	ldr	r2, [pc, #100]	; (800181c <ACM_Init+0x6c>)
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <ACM_Init+0x70>)
 80017b8:	0010      	movs	r0, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	2328      	movs	r3, #40	; 0x28
 80017be:	001a      	movs	r2, r3
 80017c0:	f006 fa98 	bl	8007cf4 <memcpy>
	parameters[1] = air_speed;
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <ACM_Init+0x6c>)
 80017c6:	4a17      	ldr	r2, [pc, #92]	; (8001824 <ACM_Init+0x74>)
 80017c8:	3328      	adds	r3, #40	; 0x28
 80017ca:	0011      	movs	r1, r2
 80017cc:	2228      	movs	r2, #40	; 0x28
 80017ce:	0018      	movs	r0, r3
 80017d0:	f006 fa90 	bl	8007cf4 <memcpy>
	parameters[2] = throttle_position;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <ACM_Init+0x6c>)
 80017d6:	4a14      	ldr	r2, [pc, #80]	; (8001828 <ACM_Init+0x78>)
 80017d8:	3350      	adds	r3, #80	; 0x50
 80017da:	0011      	movs	r1, r2
 80017dc:	2228      	movs	r2, #40	; 0x28
 80017de:	0018      	movs	r0, r3
 80017e0:	f006 fa88 	bl	8007cf4 <memcpy>
	parameters[3] = brake_pressure;
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <ACM_Init+0x6c>)
 80017e6:	4a11      	ldr	r2, [pc, #68]	; (800182c <ACM_Init+0x7c>)
 80017e8:	3378      	adds	r3, #120	; 0x78
 80017ea:	0011      	movs	r1, r2
 80017ec:	2228      	movs	r2, #40	; 0x28
 80017ee:	0018      	movs	r0, r3
 80017f0:	f006 fa80 	bl	8007cf4 <memcpy>
	parameters[4] = acceleration;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <ACM_Init+0x6c>)
 80017f6:	22a0      	movs	r2, #160	; 0xa0
 80017f8:	490d      	ldr	r1, [pc, #52]	; (8001830 <ACM_Init+0x80>)
 80017fa:	189b      	adds	r3, r3, r2
 80017fc:	2228      	movs	r2, #40	; 0x28
 80017fe:	0018      	movs	r0, r3
 8001800:	f006 fa78 	bl	8007cf4 <memcpy>
	parameters[5] = steering_angle;
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <ACM_Init+0x6c>)
 8001806:	22c8      	movs	r2, #200	; 0xc8
 8001808:	490a      	ldr	r1, [pc, #40]	; (8001834 <ACM_Init+0x84>)
 800180a:	189b      	adds	r3, r3, r2
 800180c:	2228      	movs	r2, #40	; 0x28
 800180e:	0018      	movs	r0, r3
 8001810:	f006 fa70 	bl	8007cf4 <memcpy>

	// Start Timers for CAN?
	// Do the Wave
}
 8001814:	46c0      	nop			; (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	20001fe0 	.word	0x20001fe0
 8001820:	20000000 	.word	0x20000000
 8001824:	20000028 	.word	0x20000028
 8001828:	20000050 	.word	0x20000050
 800182c:	200000a0 	.word	0x200000a0
 8001830:	200000c8 	.word	0x200000c8
 8001834:	20000078 	.word	0x20000078

08001838 <fetch_data>:

void fetch_data(void) {
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
	ACM_parameter* global_parameter_list;	// List of all of the unsigned parameters
	U8 average_index;										// index of the next element added to the sum to find average
	S16 average_aggregate;									// sum of the elements before the average_index

	for(global_parameter_list = parameters;global_parameter_list < global_parameter_list + NUM_PARAMETERS;global_parameter_list++) {
 800183e:	4b47      	ldr	r3, [pc, #284]	; (800195c <fetch_data+0x124>)
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	e002      	b.n	800184a <fetch_data+0x12>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3328      	adds	r3, #40	; 0x28
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	33f0      	adds	r3, #240	; 0xf0
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	d3f7      	bcc.n	8001844 <fetch_data+0xc>
		// global_parameter_list->current_value = fetch_parameter_function(specific parameter);

	}

	//***************************  update data  ***************************//
	for(global_parameter_list = parameters;global_parameter_list < global_parameter_list + NUM_PARAMETERS;global_parameter_list++) {
 8001854:	4b41      	ldr	r3, [pc, #260]	; (800195c <fetch_data+0x124>)
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	e076      	b.n	8001948 <fetch_data+0x110>

		// Skip this parameter if it is INOPERATIVE (too many errors)
		if(global_parameter_list->parameter_state != OPERATIVE) {
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2225      	movs	r2, #37	; 0x25
 800185e:	5c9b      	ldrb	r3, [r3, r2]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d16d      	bne.n	8001940 <fetch_data+0x108>
			continue;
		}

		if ((global_parameter_list->current_value <= global_parameter_list->upper_bound) ||
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	5e9a      	ldrsh	r2, [r3, r2]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2120      	movs	r1, #32
 800186e:	5e5b      	ldrsh	r3, [r3, r1]
 8001870:	429a      	cmp	r2, r3
 8001872:	dd07      	ble.n	8001884 <fetch_data+0x4c>
				(global_parameter_list->current_value >= global_parameter_list->lower_bound)) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	5e9a      	ldrsh	r2, [r3, r2]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2122      	movs	r1, #34	; 0x22
 800187e:	5e5b      	ldrsh	r3, [r3, r1]
		if ((global_parameter_list->current_value <= global_parameter_list->upper_bound) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	db0c      	blt.n	800189e <fetch_data+0x66>

			// Add current value to buffer
			global_parameter_list->buffer[global_parameter_list->buffer_index] = global_parameter_list->current_value;	// Add current value to the buffer index of the specific variables buffer
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7d1b      	ldrb	r3, [r3, #20]
 8001888:	0018      	movs	r0, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2100      	movs	r1, #0
 800188e:	5e59      	ldrsh	r1, [r3, r1]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	0043      	lsls	r3, r0, #1
 8001894:	18d3      	adds	r3, r2, r3
 8001896:	3304      	adds	r3, #4
 8001898:	1c0a      	adds	r2, r1, #0
 800189a:	801a      	strh	r2, [r3, #0]
 800189c:	e010      	b.n	80018c0 <fetch_data+0x88>
		} else {
			//Add 1 to error count because current_value is out of bounds
			global_parameter_list->error_count += 1;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2224      	movs	r2, #36	; 0x24
 80018a2:	5c9b      	ldrb	r3, [r3, r2]
 80018a4:	3301      	adds	r3, #1
 80018a6:	b2d9      	uxtb	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2224      	movs	r2, #36	; 0x24
 80018ac:	5499      	strb	r1, [r3, r2]

			// Render parameter INOPERATIVE if parameter has an error count that is too high
			if (global_parameter_list->error_count >= ERROR_THRESHOLD) {
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2224      	movs	r2, #36	; 0x24
 80018b2:	5c9b      	ldrb	r3, [r3, r2]
 80018b4:	2b09      	cmp	r3, #9
 80018b6:	d903      	bls.n	80018c0 <fetch_data+0x88>
				global_parameter_list->parameter_state = INOPERATIVE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2225      	movs	r2, #37	; 0x25
 80018bc:	2100      	movs	r1, #0
 80018be:	5499      	strb	r1, [r3, r2]
			}
		}

		// add 1 to buffer and prevent buffer_index from going out of bounds
		global_parameter_list->buffer_index += 1;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7d1b      	ldrb	r3, [r3, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	751a      	strb	r2, [r3, #20]
		global_parameter_list->buffer_index = global_parameter_list->buffer_index % BUFFER_OVERFLOW_MODULO;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7d1b      	ldrb	r3, [r3, #20]
 80018d0:	2107      	movs	r1, #7
 80018d2:	0018      	movs	r0, r3
 80018d4:	f7fe fc9e 	bl	8000214 <__aeabi_uidivmod>
 80018d8:	000b      	movs	r3, r1
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	751a      	strb	r2, [r3, #20]

		// Aggregate all buffer values to calculate average
		for(average_index = 0;average_index < BUFFER_SIZE; average_index++) {
 80018e0:	1cfb      	adds	r3, r7, #3
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	e013      	b.n	8001910 <fetch_data+0xd8>
			average_aggregate += global_parameter_list->buffer[average_index];
 80018e8:	1cfb      	adds	r3, r7, #3
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	18d3      	adds	r3, r2, r3
 80018f2:	3304      	adds	r3, #4
 80018f4:	2200      	movs	r2, #0
 80018f6:	5e9b      	ldrsh	r3, [r3, r2]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	003b      	movs	r3, r7
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	18d3      	adds	r3, r2, r3
 8001900:	b29a      	uxth	r2, r3
 8001902:	003b      	movs	r3, r7
 8001904:	801a      	strh	r2, [r3, #0]
		for(average_index = 0;average_index < BUFFER_SIZE; average_index++) {
 8001906:	1cfb      	adds	r3, r7, #3
 8001908:	781a      	ldrb	r2, [r3, #0]
 800190a:	1cfb      	adds	r3, r7, #3
 800190c:	3201      	adds	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
 8001910:	1cfb      	adds	r3, r7, #3
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b07      	cmp	r3, #7
 8001916:	d9e7      	bls.n	80018e8 <fetch_data+0xb0>
		}

		// Assign buffer average to specific "object"
		global_parameter_list->buffer_average = average_aggregate / BUFFER_SIZE;
 8001918:	003b      	movs	r3, r7
 800191a:	2200      	movs	r2, #0
 800191c:	5e9b      	ldrsh	r3, [r3, r2]
 800191e:	2b00      	cmp	r3, #0
 8001920:	da00      	bge.n	8001924 <fetch_data+0xec>
 8001922:	3307      	adds	r3, #7
 8001924:	10db      	asrs	r3, r3, #3
 8001926:	b21b      	sxth	r3, r3
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff fee9 	bl	8001700 <__aeabi_i2d>
 800192e:	0003      	movs	r3, r0
 8001930:	000c      	movs	r4, r1
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6193      	str	r3, [r2, #24]
 8001936:	61d4      	str	r4, [r2, #28]
		average_aggregate = 0;		// Reset aggregate variable to correctly calculate average for all parameters
 8001938:	003b      	movs	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	801a      	strh	r2, [r3, #0]
 800193e:	e000      	b.n	8001942 <fetch_data+0x10a>
			continue;
 8001940:	46c0      	nop			; (mov r8, r8)
	for(global_parameter_list = parameters;global_parameter_list < global_parameter_list + NUM_PARAMETERS;global_parameter_list++) {
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3328      	adds	r3, #40	; 0x28
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	33f0      	adds	r3, #240	; 0xf0
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	d383      	bcc.n	800185a <fetch_data+0x22>
	}
}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	46bd      	mov	sp, r7
 8001956:	b003      	add	sp, #12
 8001958:	bd90      	pop	{r4, r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	20001fe0 	.word	0x20001fe0

08001960 <calculate_wing_angle>:

void calculate_wing_angle(void) {
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
	double temp_front_left_servo_ticks;
	double temp_front_right_servo_ticks;
	double temp_rear_servo_ticks;

	if (control_state == AUTO && drs_button_state == 0) {
 8001966:	4b5f      	ldr	r3, [pc, #380]	; (8001ae4 <calculate_wing_angle+0x184>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d14c      	bne.n	8001a08 <calculate_wing_angle+0xa8>
 800196e:	4b5e      	ldr	r3, [pc, #376]	; (8001ae8 <calculate_wing_angle+0x188>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d148      	bne.n	8001a08 <calculate_wing_angle+0xa8>
		//super cool kickflip pointer math for locating the piece of data in the map
		front_left_wing_map_position 	= *(*(*(front_left_wing_map + speed_index) + steering_angle_index) + acceleration_index);
 8001976:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <calculate_wing_angle+0x18c>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	001a      	movs	r2, r3
 800197c:	0013      	movs	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	189b      	adds	r3, r3, r2
 8001982:	011a      	lsls	r2, r3, #4
 8001984:	189a      	adds	r2, r3, r2
 8001986:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <calculate_wing_angle+0x190>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	0019      	movs	r1, r3
 800198c:	000b      	movs	r3, r1
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	185b      	adds	r3, r3, r1
 8001992:	18d3      	adds	r3, r2, r3
 8001994:	4a57      	ldr	r2, [pc, #348]	; (8001af4 <calculate_wing_angle+0x194>)
 8001996:	7812      	ldrb	r2, [r2, #0]
 8001998:	189a      	adds	r2, r3, r2
 800199a:	4b57      	ldr	r3, [pc, #348]	; (8001af8 <calculate_wing_angle+0x198>)
 800199c:	18d3      	adds	r3, r2, r3
 800199e:	2200      	movs	r2, #0
 80019a0:	569a      	ldrsb	r2, [r3, r2]
 80019a2:	4b56      	ldr	r3, [pc, #344]	; (8001afc <calculate_wing_angle+0x19c>)
 80019a4:	701a      	strb	r2, [r3, #0]
		front_right_wing_map_position 	= *(*(*(front_right_wing_map + speed_index) + steering_angle_index) + acceleration_index);
 80019a6:	4b51      	ldr	r3, [pc, #324]	; (8001aec <calculate_wing_angle+0x18c>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	001a      	movs	r2, r3
 80019ac:	0013      	movs	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	189b      	adds	r3, r3, r2
 80019b2:	011a      	lsls	r2, r3, #4
 80019b4:	189a      	adds	r2, r3, r2
 80019b6:	4b4e      	ldr	r3, [pc, #312]	; (8001af0 <calculate_wing_angle+0x190>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	0019      	movs	r1, r3
 80019bc:	000b      	movs	r3, r1
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	185b      	adds	r3, r3, r1
 80019c2:	18d3      	adds	r3, r2, r3
 80019c4:	4a4b      	ldr	r2, [pc, #300]	; (8001af4 <calculate_wing_angle+0x194>)
 80019c6:	7812      	ldrb	r2, [r2, #0]
 80019c8:	189a      	adds	r2, r3, r2
 80019ca:	4b4d      	ldr	r3, [pc, #308]	; (8001b00 <calculate_wing_angle+0x1a0>)
 80019cc:	18d3      	adds	r3, r2, r3
 80019ce:	2200      	movs	r2, #0
 80019d0:	569a      	ldrsb	r2, [r3, r2]
 80019d2:	4b4c      	ldr	r3, [pc, #304]	; (8001b04 <calculate_wing_angle+0x1a4>)
 80019d4:	701a      	strb	r2, [r3, #0]
		rear_wing_map_position 			= *(*(*(rear_wing_map + speed_index) + steering_angle_index) + acceleration_index);
 80019d6:	4b45      	ldr	r3, [pc, #276]	; (8001aec <calculate_wing_angle+0x18c>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	001a      	movs	r2, r3
 80019dc:	0013      	movs	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	189b      	adds	r3, r3, r2
 80019e2:	011a      	lsls	r2, r3, #4
 80019e4:	189a      	adds	r2, r3, r2
 80019e6:	4b42      	ldr	r3, [pc, #264]	; (8001af0 <calculate_wing_angle+0x190>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	0019      	movs	r1, r3
 80019ec:	000b      	movs	r3, r1
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	185b      	adds	r3, r3, r1
 80019f2:	18d3      	adds	r3, r2, r3
 80019f4:	4a3f      	ldr	r2, [pc, #252]	; (8001af4 <calculate_wing_angle+0x194>)
 80019f6:	7812      	ldrb	r2, [r2, #0]
 80019f8:	189a      	adds	r2, r3, r2
 80019fa:	4b43      	ldr	r3, [pc, #268]	; (8001b08 <calculate_wing_angle+0x1a8>)
 80019fc:	18d3      	adds	r3, r2, r3
 80019fe:	2200      	movs	r2, #0
 8001a00:	569a      	ldrsb	r2, [r3, r2]
 8001a02:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <calculate_wing_angle+0x1ac>)
 8001a04:	701a      	strb	r2, [r3, #0]
 8001a06:	e01a      	b.n	8001a3e <calculate_wing_angle+0xde>

	} else if(control_state == MANUAL && drs_button_state == 0) {
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <calculate_wing_angle+0x184>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d10d      	bne.n	8001a2c <calculate_wing_angle+0xcc>
 8001a10:	4b35      	ldr	r3, [pc, #212]	; (8001ae8 <calculate_wing_angle+0x188>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <calculate_wing_angle+0xcc>

		//Manual Mode
		front_left_wing_map_position = FRONT_LEFT_WING_MANUAL_POSITION;
 8001a18:	4b38      	ldr	r3, [pc, #224]	; (8001afc <calculate_wing_angle+0x19c>)
 8001a1a:	2264      	movs	r2, #100	; 0x64
 8001a1c:	701a      	strb	r2, [r3, #0]
		front_right_wing_map_position = FRONT_RIGHT_WING_MANUAL_POSITION;
 8001a1e:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <calculate_wing_angle+0x1a4>)
 8001a20:	2264      	movs	r2, #100	; 0x64
 8001a22:	701a      	strb	r2, [r3, #0]
		rear_wing_map_position = REAR_WING_MANUAL_POSITION;
 8001a24:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <calculate_wing_angle+0x1ac>)
 8001a26:	2264      	movs	r2, #100	; 0x64
 8001a28:	701a      	strb	r2, [r3, #0]
 8001a2a:	e008      	b.n	8001a3e <calculate_wing_angle+0xde>

	} else {
		// DRS ACTIVATED
		front_left_wing_map_position = FRONT_LEFT_WING_DRS_POSITION;
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <calculate_wing_angle+0x19c>)
 8001a2e:	2264      	movs	r2, #100	; 0x64
 8001a30:	701a      	strb	r2, [r3, #0]
		front_right_wing_map_position = FRONT_RIGHT_WING_DRS_POSITION;
 8001a32:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <calculate_wing_angle+0x1a4>)
 8001a34:	2264      	movs	r2, #100	; 0x64
 8001a36:	701a      	strb	r2, [r3, #0]
		rear_wing_map_position = REAR_WING_DRS_POSITION;
 8001a38:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <calculate_wing_angle+0x1ac>)
 8001a3a:	2264      	movs	r2, #100	; 0x64
 8001a3c:	701a      	strb	r2, [r3, #0]
	}

	// start to converting angle to timer count
	temp_front_left_servo_ticks = LINEAR_POSITION_TO_TICKS * front_left_wing_map_position;
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	; (8001afc <calculate_wing_angle+0x19c>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7ff fe5b 	bl	8001700 <__aeabi_i2d>
 8001a4a:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <calculate_wing_angle+0x1b0>)
 8001a4c:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <calculate_wing_angle+0x1b4>)
 8001a4e:	f7ff f867 	bl	8000b20 <__aeabi_dmul>
 8001a52:	0003      	movs	r3, r0
 8001a54:	000c      	movs	r4, r1
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	617c      	str	r4, [r7, #20]
	temp_front_right_servo_ticks = LINEAR_POSITION_TO_TICKS * front_right_wing_map_position;
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <calculate_wing_angle+0x1a4>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7ff fe4d 	bl	8001700 <__aeabi_i2d>
 8001a66:	4a2a      	ldr	r2, [pc, #168]	; (8001b10 <calculate_wing_angle+0x1b0>)
 8001a68:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <calculate_wing_angle+0x1b4>)
 8001a6a:	f7ff f859 	bl	8000b20 <__aeabi_dmul>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	000c      	movs	r4, r1
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	60fc      	str	r4, [r7, #12]
	temp_rear_servo_ticks = LINEAR_POSITION_TO_TICKS * rear_wing_map_position;
 8001a76:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <calculate_wing_angle+0x1ac>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff fe3f 	bl	8001700 <__aeabi_i2d>
 8001a82:	4a23      	ldr	r2, [pc, #140]	; (8001b10 <calculate_wing_angle+0x1b0>)
 8001a84:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <calculate_wing_angle+0x1b4>)
 8001a86:	f7ff f84b 	bl	8000b20 <__aeabi_dmul>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	000c      	movs	r4, r1
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	607c      	str	r4, [r7, #4]

	// Finish converting angle to timer count
	front_left_servo_ticks = (U16)temp_front_left_servo_ticks + 1700;
 8001a92:	6938      	ldr	r0, [r7, #16]
 8001a94:	6979      	ldr	r1, [r7, #20]
 8001a96:	f7fe fc01 	bl	800029c <__aeabi_d2uiz>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <calculate_wing_angle+0x1b8>)
 8001aa0:	4694      	mov	ip, r2
 8001aa2:	4463      	add	r3, ip
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <calculate_wing_angle+0x1bc>)
 8001aa8:	801a      	strh	r2, [r3, #0]
	front_right_servo_ticks = (U16)temp_front_right_servo_ticks + 1700;
 8001aaa:	68b8      	ldr	r0, [r7, #8]
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	f7fe fbf5 	bl	800029c <__aeabi_d2uiz>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <calculate_wing_angle+0x1b8>)
 8001ab8:	4694      	mov	ip, r2
 8001aba:	4463      	add	r3, ip
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <calculate_wing_angle+0x1c0>)
 8001ac0:	801a      	strh	r2, [r3, #0]
	rear_servo_ticks = (U16)temp_rear_servo_ticks + 1700;
 8001ac2:	6838      	ldr	r0, [r7, #0]
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	f7fe fbe9 	bl	800029c <__aeabi_d2uiz>
 8001aca:	0003      	movs	r3, r0
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <calculate_wing_angle+0x1b8>)
 8001ad0:	4694      	mov	ip, r2
 8001ad2:	4463      	add	r3, ip
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <calculate_wing_angle+0x1c4>)
 8001ad8:	801a      	strh	r2, [r3, #0]
}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b007      	add	sp, #28
 8001ae0:	bd90      	pop	{r4, r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	20001a2a 	.word	0x20001a2a
 8001ae8:	20001a29 	.word	0x20001a29
 8001aec:	20001a32 	.word	0x20001a32
 8001af0:	20002c21 	.word	0x20002c21
 8001af4:	20001a28 	.word	0x20001a28
 8001af8:	2000267c 	.word	0x2000267c
 8001afc:	20001a2f 	.word	0x20001a2f
 8001b00:	20001a34 	.word	0x20001a34
 8001b04:	20002679 	.word	0x20002679
 8001b08:	200020d4 	.word	0x200020d4
 8001b0c:	20001a2e 	.word	0x20001a2e
 8001b10:	f5c28f5c 	.word	0xf5c28f5c
 8001b14:	40415c28 	.word	0x40415c28
 8001b18:	000006a4 	.word	0x000006a4
 8001b1c:	20001a2c 	.word	0x20001a2c
 8001b20:	20001a30 	.word	0x20001a30
 8001b24:	200020d0 	.word	0x200020d0

08001b28 <arbitrate_acceleration>:

void arbitrate_acceleration(void) {
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
	double average_acceleration;

	// if (throttle position or brake pressure) and acceleration are inoperative then go into manual mode
	if ((throttle_position.parameter_state == INOPERATIVE || brake_pressure.parameter_state == INOPERATIVE) && (acceleration.parameter_state == INOPERATIVE)) {
 8001b2e:	4b8c      	ldr	r3, [pc, #560]	; (8001d60 <arbitrate_acceleration+0x238>)
 8001b30:	2225      	movs	r2, #37	; 0x25
 8001b32:	5c9b      	ldrb	r3, [r3, r2]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d004      	beq.n	8001b42 <arbitrate_acceleration+0x1a>
 8001b38:	4b8a      	ldr	r3, [pc, #552]	; (8001d64 <arbitrate_acceleration+0x23c>)
 8001b3a:	2225      	movs	r2, #37	; 0x25
 8001b3c:	5c9b      	ldrb	r3, [r3, r2]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d107      	bne.n	8001b52 <arbitrate_acceleration+0x2a>
 8001b42:	4b89      	ldr	r3, [pc, #548]	; (8001d68 <arbitrate_acceleration+0x240>)
 8001b44:	2225      	movs	r2, #37	; 0x25
 8001b46:	5c9b      	ldrb	r3, [r3, r2]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <arbitrate_acceleration+0x2a>
		control_state = MANUAL;
 8001b4c:	4b87      	ldr	r3, [pc, #540]	; (8001d6c <arbitrate_acceleration+0x244>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
	}

	// arbitrate acceleration only if the control mode is set to AUTO
	if (control_state == AUTO) {
 8001b52:	4b86      	ldr	r3, [pc, #536]	; (8001d6c <arbitrate_acceleration+0x244>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d000      	beq.n	8001b5c <arbitrate_acceleration+0x34>
 8001b5a:	e0fd      	b.n	8001d58 <arbitrate_acceleration+0x230>

		// If either the throttle position or brake pressure is inoperative then use the accelerometer
		if (throttle_position.parameter_state == INOPERATIVE || brake_pressure.parameter_state == INOPERATIVE) {
 8001b5c:	4b80      	ldr	r3, [pc, #512]	; (8001d60 <arbitrate_acceleration+0x238>)
 8001b5e:	2225      	movs	r2, #37	; 0x25
 8001b60:	5c9b      	ldrb	r3, [r3, r2]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <arbitrate_acceleration+0x4a>
 8001b66:	4b7f      	ldr	r3, [pc, #508]	; (8001d64 <arbitrate_acceleration+0x23c>)
 8001b68:	2225      	movs	r2, #37	; 0x25
 8001b6a:	5c9b      	ldrb	r3, [r3, r2]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d000      	beq.n	8001b72 <arbitrate_acceleration+0x4a>
 8001b70:	e0da      	b.n	8001d28 <arbitrate_acceleration+0x200>

			// assign acceleration index for map. 127 is effectively 0 acceleration
			average_acceleration = acceleration.buffer_average + 127;
 8001b72:	4b7d      	ldr	r3, [pc, #500]	; (8001d68 <arbitrate_acceleration+0x240>)
 8001b74:	6998      	ldr	r0, [r3, #24]
 8001b76:	69d9      	ldr	r1, [r3, #28]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4b7d      	ldr	r3, [pc, #500]	; (8001d70 <arbitrate_acceleration+0x248>)
 8001b7c:	f7fe fbac 	bl	80002d8 <__aeabi_dadd>
 8001b80:	0003      	movs	r3, r0
 8001b82:	000c      	movs	r4, r1
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	607c      	str	r4, [r7, #4]

			// assign acceleration index
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4b7a      	ldr	r3, [pc, #488]	; (8001d74 <arbitrate_acceleration+0x24c>)
 8001b8c:	6838      	ldr	r0, [r7, #0]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f7fe fb7a 	bl	8000288 <__aeabi_dcmpge>
 8001b94:	1e03      	subs	r3, r0, #0
 8001b96:	d003      	beq.n	8001ba0 <arbitrate_acceleration+0x78>
				acceleration_index = 17;
 8001b98:	4b77      	ldr	r3, [pc, #476]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001b9a:	2211      	movs	r2, #17
 8001b9c:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001b9e:	e0db      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else if (average_acceleration >= ACCELERATION_INDEX_16_THRESHOLD) {
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4b76      	ldr	r3, [pc, #472]	; (8001d7c <arbitrate_acceleration+0x254>)
 8001ba4:	6838      	ldr	r0, [r7, #0]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	f7fe fb6e 	bl	8000288 <__aeabi_dcmpge>
 8001bac:	1e03      	subs	r3, r0, #0
 8001bae:	d003      	beq.n	8001bb8 <arbitrate_acceleration+0x90>
				acceleration_index = 16;
 8001bb0:	4b71      	ldr	r3, [pc, #452]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001bb2:	2210      	movs	r2, #16
 8001bb4:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001bb6:	e0cf      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else if (average_acceleration >= ACCELERATION_INDEX_15_THRESHOLD) {
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4b71      	ldr	r3, [pc, #452]	; (8001d80 <arbitrate_acceleration+0x258>)
 8001bbc:	6838      	ldr	r0, [r7, #0]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f7fe fb62 	bl	8000288 <__aeabi_dcmpge>
 8001bc4:	1e03      	subs	r3, r0, #0
 8001bc6:	d003      	beq.n	8001bd0 <arbitrate_acceleration+0xa8>
				acceleration_index = 15;
 8001bc8:	4b6b      	ldr	r3, [pc, #428]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001bca:	220f      	movs	r2, #15
 8001bcc:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001bce:	e0c3      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else if (average_acceleration >= ACCELERATION_INDEX_14_THRESHOLD) {
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	4b6c      	ldr	r3, [pc, #432]	; (8001d84 <arbitrate_acceleration+0x25c>)
 8001bd4:	6838      	ldr	r0, [r7, #0]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	f7fe fb56 	bl	8000288 <__aeabi_dcmpge>
 8001bdc:	1e03      	subs	r3, r0, #0
 8001bde:	d003      	beq.n	8001be8 <arbitrate_acceleration+0xc0>
				acceleration_index = 14;
 8001be0:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001be2:	220e      	movs	r2, #14
 8001be4:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001be6:	e0b7      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else if (average_acceleration >= ACCELERATION_INDEX_13_THRESHOLD) {
 8001be8:	2200      	movs	r2, #0
 8001bea:	4b67      	ldr	r3, [pc, #412]	; (8001d88 <arbitrate_acceleration+0x260>)
 8001bec:	6838      	ldr	r0, [r7, #0]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	f7fe fb4a 	bl	8000288 <__aeabi_dcmpge>
 8001bf4:	1e03      	subs	r3, r0, #0
 8001bf6:	d003      	beq.n	8001c00 <arbitrate_acceleration+0xd8>
				acceleration_index = 13;
 8001bf8:	4b5f      	ldr	r3, [pc, #380]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001bfa:	220d      	movs	r2, #13
 8001bfc:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001bfe:	e0ab      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else if (average_acceleration >= ACCELERATION_INDEX_12_THRESHOLD) {
 8001c00:	2200      	movs	r2, #0
 8001c02:	4b62      	ldr	r3, [pc, #392]	; (8001d8c <arbitrate_acceleration+0x264>)
 8001c04:	6838      	ldr	r0, [r7, #0]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	f7fe fb3e 	bl	8000288 <__aeabi_dcmpge>
 8001c0c:	1e03      	subs	r3, r0, #0
 8001c0e:	d003      	beq.n	8001c18 <arbitrate_acceleration+0xf0>
				acceleration_index = 12;
 8001c10:	4b59      	ldr	r3, [pc, #356]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001c12:	220c      	movs	r2, #12
 8001c14:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001c16:	e09f      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else if (average_acceleration >= ACCELERATION_INDEX_11_THRESHOLD) {
 8001c18:	2200      	movs	r2, #0
 8001c1a:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <arbitrate_acceleration+0x268>)
 8001c1c:	6838      	ldr	r0, [r7, #0]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f7fe fb32 	bl	8000288 <__aeabi_dcmpge>
 8001c24:	1e03      	subs	r3, r0, #0
 8001c26:	d003      	beq.n	8001c30 <arbitrate_acceleration+0x108>
				acceleration_index = 11;
 8001c28:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001c2a:	220b      	movs	r2, #11
 8001c2c:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001c2e:	e093      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else if (average_acceleration >= ACCELERATION_INDEX_10_THRESHOLD) {
 8001c30:	2200      	movs	r2, #0
 8001c32:	4b58      	ldr	r3, [pc, #352]	; (8001d94 <arbitrate_acceleration+0x26c>)
 8001c34:	6838      	ldr	r0, [r7, #0]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	f7fe fb26 	bl	8000288 <__aeabi_dcmpge>
 8001c3c:	1e03      	subs	r3, r0, #0
 8001c3e:	d003      	beq.n	8001c48 <arbitrate_acceleration+0x120>
				acceleration_index = 10;
 8001c40:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001c42:	220a      	movs	r2, #10
 8001c44:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001c46:	e087      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else if (average_acceleration >= ACCELERATION_INDEX_9_THRESHOLD) {
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4b53      	ldr	r3, [pc, #332]	; (8001d98 <arbitrate_acceleration+0x270>)
 8001c4c:	6838      	ldr	r0, [r7, #0]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	f7fe fb1a 	bl	8000288 <__aeabi_dcmpge>
 8001c54:	1e03      	subs	r3, r0, #0
 8001c56:	d003      	beq.n	8001c60 <arbitrate_acceleration+0x138>
				acceleration_index = 9;
 8001c58:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001c5a:	2209      	movs	r2, #9
 8001c5c:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001c5e:	e07b      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else if (average_acceleration >= ACCELERATION_INDEX_8_THRESHOLD) {
 8001c60:	2200      	movs	r2, #0
 8001c62:	4b4e      	ldr	r3, [pc, #312]	; (8001d9c <arbitrate_acceleration+0x274>)
 8001c64:	6838      	ldr	r0, [r7, #0]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	f7fe fb0e 	bl	8000288 <__aeabi_dcmpge>
 8001c6c:	1e03      	subs	r3, r0, #0
 8001c6e:	d003      	beq.n	8001c78 <arbitrate_acceleration+0x150>
				acceleration_index = 8;
 8001c70:	4b41      	ldr	r3, [pc, #260]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001c72:	2208      	movs	r2, #8
 8001c74:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001c76:	e06f      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else if (average_acceleration >= ACCELERATION_INDEX_7_THRESHOLD) {
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4b49      	ldr	r3, [pc, #292]	; (8001da0 <arbitrate_acceleration+0x278>)
 8001c7c:	6838      	ldr	r0, [r7, #0]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	f7fe fb02 	bl	8000288 <__aeabi_dcmpge>
 8001c84:	1e03      	subs	r3, r0, #0
 8001c86:	d003      	beq.n	8001c90 <arbitrate_acceleration+0x168>
				acceleration_index = 7;
 8001c88:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001c8e:	e063      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else if (average_acceleration >= ACCELERATION_INDEX_6_THRESHOLD) {
 8001c90:	2200      	movs	r2, #0
 8001c92:	4b44      	ldr	r3, [pc, #272]	; (8001da4 <arbitrate_acceleration+0x27c>)
 8001c94:	6838      	ldr	r0, [r7, #0]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	f7fe faf6 	bl	8000288 <__aeabi_dcmpge>
 8001c9c:	1e03      	subs	r3, r0, #0
 8001c9e:	d003      	beq.n	8001ca8 <arbitrate_acceleration+0x180>
				acceleration_index = 6;
 8001ca0:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001ca2:	2206      	movs	r2, #6
 8001ca4:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001ca6:	e057      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else if (average_acceleration >= ACCELERATION_INDEX_5_THRESHOLD) {
 8001ca8:	2200      	movs	r2, #0
 8001caa:	4b3f      	ldr	r3, [pc, #252]	; (8001da8 <arbitrate_acceleration+0x280>)
 8001cac:	6838      	ldr	r0, [r7, #0]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	f7fe faea 	bl	8000288 <__aeabi_dcmpge>
 8001cb4:	1e03      	subs	r3, r0, #0
 8001cb6:	d003      	beq.n	8001cc0 <arbitrate_acceleration+0x198>
				acceleration_index = 5;
 8001cb8:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001cba:	2205      	movs	r2, #5
 8001cbc:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001cbe:	e04b      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else if (average_acceleration >= ACCELERATION_INDEX_4_THRESHOLD) {
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <arbitrate_acceleration+0x284>)
 8001cc4:	6838      	ldr	r0, [r7, #0]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	f7fe fade 	bl	8000288 <__aeabi_dcmpge>
 8001ccc:	1e03      	subs	r3, r0, #0
 8001cce:	d003      	beq.n	8001cd8 <arbitrate_acceleration+0x1b0>
				acceleration_index = 4;
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001cd6:	e03f      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else if (average_acceleration >= ACCELERATION_INDEX_3_THRESHOLD) {
 8001cd8:	2200      	movs	r2, #0
 8001cda:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <arbitrate_acceleration+0x288>)
 8001cdc:	6838      	ldr	r0, [r7, #0]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	f7fe fad2 	bl	8000288 <__aeabi_dcmpge>
 8001ce4:	1e03      	subs	r3, r0, #0
 8001ce6:	d003      	beq.n	8001cf0 <arbitrate_acceleration+0x1c8>
				acceleration_index = 3;
 8001ce8:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001cea:	2203      	movs	r2, #3
 8001cec:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001cee:	e033      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else if (average_acceleration >= ACCELERATION_INDEX_2_THRESHOLD) {
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <arbitrate_acceleration+0x28c>)
 8001cf4:	6838      	ldr	r0, [r7, #0]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	f7fe fac6 	bl	8000288 <__aeabi_dcmpge>
 8001cfc:	1e03      	subs	r3, r0, #0
 8001cfe:	d003      	beq.n	8001d08 <arbitrate_acceleration+0x1e0>
				acceleration_index = 2;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001d02:	2202      	movs	r2, #2
 8001d04:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001d06:	e027      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else if (average_acceleration >= ACCELERATION_INDEX_1_THRESHOLD) {
 8001d08:	2200      	movs	r2, #0
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <arbitrate_acceleration+0x290>)
 8001d0c:	6838      	ldr	r0, [r7, #0]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	f7fe faba 	bl	8000288 <__aeabi_dcmpge>
 8001d14:	1e03      	subs	r3, r0, #0
 8001d16:	d003      	beq.n	8001d20 <arbitrate_acceleration+0x1f8>
				acceleration_index = 1;
 8001d18:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001d1e:	e01b      	b.n	8001d58 <arbitrate_acceleration+0x230>
			} else {
				acceleration_index = 0;
 8001d20:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
			if (average_acceleration >= ACCELERATION_INDEX_17_THRESHOLD) {
 8001d26:	e017      	b.n	8001d58 <arbitrate_acceleration+0x230>
			}
		} else {
			// otherwise just use this equation to map the acceleration parameter
			average_acceleration = (THROTTLE_COEFFICIENT * throttle_position.buffer_average) - (BRAKE_PRESSURE_COEFFICIENT * brake_pressure.buffer_average);
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <arbitrate_acceleration+0x238>)
 8001d2a:	6998      	ldr	r0, [r3, #24]
 8001d2c:	69d9      	ldr	r1, [r3, #28]
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <arbitrate_acceleration+0x23c>)
 8001d30:	69dc      	ldr	r4, [r3, #28]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	001a      	movs	r2, r3
 8001d36:	0023      	movs	r3, r4
 8001d38:	f7ff f964 	bl	8001004 <__aeabi_dsub>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	000c      	movs	r4, r1
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	607c      	str	r4, [r7, #4]
			acceleration_index = (S16)average_acceleration;
 8001d44:	6838      	ldr	r0, [r7, #0]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	f7ff fca4 	bl	8001694 <__aeabi_d2iz>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <arbitrate_acceleration+0x250>)
 8001d54:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001d56:	e7ff      	b.n	8001d58 <arbitrate_acceleration+0x230>
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b003      	add	sp, #12
 8001d5e:	bd90      	pop	{r4, r7, pc}
 8001d60:	20000050 	.word	0x20000050
 8001d64:	200000a0 	.word	0x200000a0
 8001d68:	200000c8 	.word	0x200000c8
 8001d6c:	20001a2a 	.word	0x20001a2a
 8001d70:	405fc000 	.word	0x405fc000
 8001d74:	405c4000 	.word	0x405c4000
 8001d78:	20001a28 	.word	0x20001a28
 8001d7c:	40588000 	.word	0x40588000
 8001d80:	4054c000 	.word	0x4054c000
 8001d84:	40510000 	.word	0x40510000
 8001d88:	404a8000 	.word	0x404a8000
 8001d8c:	40430000 	.word	0x40430000
 8001d90:	40370000 	.word	0x40370000
 8001d94:	40200000 	.word	0x40200000
 8001d98:	c01c0000 	.word	0xc01c0000
 8001d9c:	c0360000 	.word	0xc0360000
 8001da0:	c0428000 	.word	0xc0428000
 8001da4:	c04a0000 	.word	0xc04a0000
 8001da8:	c050c000 	.word	0xc050c000
 8001dac:	c0548000 	.word	0xc0548000
 8001db0:	c0584000 	.word	0xc0584000
 8001db4:	c05c0000 	.word	0xc05c0000
 8001db8:	c05fc000 	.word	0xc05fc000

08001dbc <arbitrate_speed>:

void arbitrate_speed(void) {
 8001dbc:	b5b0      	push	{r4, r5, r7, lr}
 8001dbe:	af00      	add	r7, sp, #0

	// if both airspeed and wheelspeed are inoperative then go into manual mode
	if (air_speed.parameter_state == INOPERATIVE && wheel_speed.parameter_state == INOPERATIVE)
 8001dc0:	4b63      	ldr	r3, [pc, #396]	; (8001f50 <arbitrate_speed+0x194>)
 8001dc2:	2225      	movs	r2, #37	; 0x25
 8001dc4:	5c9b      	ldrb	r3, [r3, r2]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d107      	bne.n	8001dda <arbitrate_speed+0x1e>
 8001dca:	4b62      	ldr	r3, [pc, #392]	; (8001f54 <arbitrate_speed+0x198>)
 8001dcc:	2225      	movs	r2, #37	; 0x25
 8001dce:	5c9b      	ldrb	r3, [r3, r2]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <arbitrate_speed+0x1e>
	{
		// Completely skunked
		control_state = MANUAL;
 8001dd4:	4b60      	ldr	r3, [pc, #384]	; (8001f58 <arbitrate_speed+0x19c>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
	}

	// if control state is not AUTO don't do anything to speed_index
	if (control_state == AUTO) {
 8001dda:	4b5f      	ldr	r3, [pc, #380]	; (8001f58 <arbitrate_speed+0x19c>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d000      	beq.n	8001de4 <arbitrate_speed+0x28>
 8001de2:	e0b2      	b.n	8001f4a <arbitrate_speed+0x18e>

		// if the airspeed is inoperative use the wheelspeed, and vice-versa, if both are good then use wheelspeed
		if (air_speed.parameter_state == INOPERATIVE) {
 8001de4:	4b5a      	ldr	r3, [pc, #360]	; (8001f50 <arbitrate_speed+0x194>)
 8001de6:	2225      	movs	r2, #37	; 0x25
 8001de8:	5c9b      	ldrb	r3, [r3, r2]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10c      	bne.n	8001e08 <arbitrate_speed+0x4c>
			speed_index = (S16)wheel_speed.buffer_average;
 8001dee:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <arbitrate_speed+0x198>)
 8001df0:	69dc      	ldr	r4, [r3, #28]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	0018      	movs	r0, r3
 8001df6:	0021      	movs	r1, r4
 8001df8:	f7ff fc4c 	bl	8001694 <__aeabi_d2iz>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	b21b      	sxth	r3, r3
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4b56      	ldr	r3, [pc, #344]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001e04:	701a      	strb	r2, [r3, #0]
 8001e06:	e01d      	b.n	8001e44 <arbitrate_speed+0x88>
		} else if (wheel_speed.parameter_state == INOPERATIVE) {
 8001e08:	4b52      	ldr	r3, [pc, #328]	; (8001f54 <arbitrate_speed+0x198>)
 8001e0a:	2225      	movs	r2, #37	; 0x25
 8001e0c:	5c9b      	ldrb	r3, [r3, r2]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10c      	bne.n	8001e2c <arbitrate_speed+0x70>
			speed_index = (S16)air_speed.buffer_average;
 8001e12:	4b4f      	ldr	r3, [pc, #316]	; (8001f50 <arbitrate_speed+0x194>)
 8001e14:	69dc      	ldr	r4, [r3, #28]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	0018      	movs	r0, r3
 8001e1a:	0021      	movs	r1, r4
 8001e1c:	f7ff fc3a 	bl	8001694 <__aeabi_d2iz>
 8001e20:	0003      	movs	r3, r0
 8001e22:	b21b      	sxth	r3, r3
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b4d      	ldr	r3, [pc, #308]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	e00b      	b.n	8001e44 <arbitrate_speed+0x88>
		} else {
			speed_index = (S16)wheel_speed.buffer_average;	// use wheelspeed as "default"
 8001e2c:	4b49      	ldr	r3, [pc, #292]	; (8001f54 <arbitrate_speed+0x198>)
 8001e2e:	69dc      	ldr	r4, [r3, #28]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	0018      	movs	r0, r3
 8001e34:	0021      	movs	r1, r4
 8001e36:	f7ff fc2d 	bl	8001694 <__aeabi_d2iz>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001e42:	701a      	strb	r2, [r3, #0]
		}

		// ASSIGN SPEED_INDEX
		if (speed_index >= SPEED_INDEX_17_THRESHOLD) {
 8001e44:	4b45      	ldr	r3, [pc, #276]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b4f      	cmp	r3, #79	; 0x4f
 8001e4a:	d903      	bls.n	8001e54 <arbitrate_speed+0x98>
			speed_index = 17;
 8001e4c:	4b43      	ldr	r3, [pc, #268]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001e4e:	2211      	movs	r2, #17
 8001e50:	701a      	strb	r2, [r3, #0]
			speed_index = 1;
		} else {
			speed_index = 0;
		}
	}
}
 8001e52:	e07a      	b.n	8001f4a <arbitrate_speed+0x18e>
		} else if (speed_index >= SPEED_INDEX_16_THRESHOLD) {
 8001e54:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b4a      	cmp	r3, #74	; 0x4a
 8001e5a:	d903      	bls.n	8001e64 <arbitrate_speed+0xa8>
			speed_index = 16;
 8001e5c:	4b3f      	ldr	r3, [pc, #252]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001e5e:	2210      	movs	r2, #16
 8001e60:	701a      	strb	r2, [r3, #0]
}
 8001e62:	e072      	b.n	8001f4a <arbitrate_speed+0x18e>
		} else if (speed_index >= SPEED_INDEX_15_THRESHOLD) {
 8001e64:	4b3d      	ldr	r3, [pc, #244]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b45      	cmp	r3, #69	; 0x45
 8001e6a:	d903      	bls.n	8001e74 <arbitrate_speed+0xb8>
			speed_index = 15;
 8001e6c:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001e6e:	220f      	movs	r2, #15
 8001e70:	701a      	strb	r2, [r3, #0]
}
 8001e72:	e06a      	b.n	8001f4a <arbitrate_speed+0x18e>
		} else if (speed_index >= SPEED_INDEX_14_THRESHOLD) {
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b40      	cmp	r3, #64	; 0x40
 8001e7a:	d903      	bls.n	8001e84 <arbitrate_speed+0xc8>
			speed_index = 14;
 8001e7c:	4b37      	ldr	r3, [pc, #220]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001e7e:	220e      	movs	r2, #14
 8001e80:	701a      	strb	r2, [r3, #0]
}
 8001e82:	e062      	b.n	8001f4a <arbitrate_speed+0x18e>
		} else if (speed_index >= SPEED_INDEX_13_THRESHOLD) {
 8001e84:	4b35      	ldr	r3, [pc, #212]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b3b      	cmp	r3, #59	; 0x3b
 8001e8a:	d903      	bls.n	8001e94 <arbitrate_speed+0xd8>
			speed_index = 13;
 8001e8c:	4b33      	ldr	r3, [pc, #204]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001e8e:	220d      	movs	r2, #13
 8001e90:	701a      	strb	r2, [r3, #0]
}
 8001e92:	e05a      	b.n	8001f4a <arbitrate_speed+0x18e>
		} else if (speed_index >= SPEED_INDEX_12_THRESHOLD) {
 8001e94:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b36      	cmp	r3, #54	; 0x36
 8001e9a:	d903      	bls.n	8001ea4 <arbitrate_speed+0xe8>
			speed_index = 12;
 8001e9c:	4b2f      	ldr	r3, [pc, #188]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	701a      	strb	r2, [r3, #0]
}
 8001ea2:	e052      	b.n	8001f4a <arbitrate_speed+0x18e>
		} else if (speed_index >= SPEED_INDEX_11_THRESHOLD) {
 8001ea4:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b31      	cmp	r3, #49	; 0x31
 8001eaa:	d903      	bls.n	8001eb4 <arbitrate_speed+0xf8>
			speed_index = 11;
 8001eac:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001eae:	220b      	movs	r2, #11
 8001eb0:	701a      	strb	r2, [r3, #0]
}
 8001eb2:	e04a      	b.n	8001f4a <arbitrate_speed+0x18e>
		} else if (speed_index >= SPEED_INDEX_10_THRESHOLD) {
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b2c      	cmp	r3, #44	; 0x2c
 8001eba:	d903      	bls.n	8001ec4 <arbitrate_speed+0x108>
			speed_index = 10;
 8001ebc:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001ebe:	220a      	movs	r2, #10
 8001ec0:	701a      	strb	r2, [r3, #0]
}
 8001ec2:	e042      	b.n	8001f4a <arbitrate_speed+0x18e>
		} else if (speed_index >= SPEED_INDEX_9_THRESHOLD) {
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b27      	cmp	r3, #39	; 0x27
 8001eca:	d903      	bls.n	8001ed4 <arbitrate_speed+0x118>
			speed_index = 9;
 8001ecc:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001ece:	2209      	movs	r2, #9
 8001ed0:	701a      	strb	r2, [r3, #0]
}
 8001ed2:	e03a      	b.n	8001f4a <arbitrate_speed+0x18e>
		} else if (speed_index >= SPEED_INDEX_8_THRESHOLD) {
 8001ed4:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b22      	cmp	r3, #34	; 0x22
 8001eda:	d903      	bls.n	8001ee4 <arbitrate_speed+0x128>
			speed_index = 8;
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001ede:	2208      	movs	r2, #8
 8001ee0:	701a      	strb	r2, [r3, #0]
}
 8001ee2:	e032      	b.n	8001f4a <arbitrate_speed+0x18e>
		} else if (speed_index >= SPEED_INDEX_7_THRESHOLD) {
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b1d      	cmp	r3, #29
 8001eea:	d903      	bls.n	8001ef4 <arbitrate_speed+0x138>
			speed_index = 7;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001eee:	2207      	movs	r2, #7
 8001ef0:	701a      	strb	r2, [r3, #0]
}
 8001ef2:	e02a      	b.n	8001f4a <arbitrate_speed+0x18e>
		} else if (speed_index >= SPEED_INDEX_6_THRESHOLD) {
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b18      	cmp	r3, #24
 8001efa:	d903      	bls.n	8001f04 <arbitrate_speed+0x148>
			speed_index = 6;
 8001efc:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001efe:	2206      	movs	r2, #6
 8001f00:	701a      	strb	r2, [r3, #0]
}
 8001f02:	e022      	b.n	8001f4a <arbitrate_speed+0x18e>
		} else if (speed_index >= SPEED_INDEX_5_THRESHOLD) {
 8001f04:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b13      	cmp	r3, #19
 8001f0a:	d903      	bls.n	8001f14 <arbitrate_speed+0x158>
			speed_index = 5;
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001f0e:	2205      	movs	r2, #5
 8001f10:	701a      	strb	r2, [r3, #0]
}
 8001f12:	e01a      	b.n	8001f4a <arbitrate_speed+0x18e>
		} else if (speed_index >= SPEED_INDEX_4_THRESHOLD) {
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b0e      	cmp	r3, #14
 8001f1a:	d903      	bls.n	8001f24 <arbitrate_speed+0x168>
			speed_index = 4;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001f1e:	2204      	movs	r2, #4
 8001f20:	701a      	strb	r2, [r3, #0]
}
 8001f22:	e012      	b.n	8001f4a <arbitrate_speed+0x18e>
		} else if (speed_index >= SPEED_INDEX_3_THRESHOLD) {
 8001f24:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b09      	cmp	r3, #9
 8001f2a:	d903      	bls.n	8001f34 <arbitrate_speed+0x178>
			speed_index = 3;
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001f2e:	2203      	movs	r2, #3
 8001f30:	701a      	strb	r2, [r3, #0]
}
 8001f32:	e00a      	b.n	8001f4a <arbitrate_speed+0x18e>
		} else if (speed_index >= SPEED_INDEX_2_THRESHOLD) {
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d903      	bls.n	8001f44 <arbitrate_speed+0x188>
			speed_index = 2;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001f3e:	2202      	movs	r2, #2
 8001f40:	701a      	strb	r2, [r3, #0]
}
 8001f42:	e002      	b.n	8001f4a <arbitrate_speed+0x18e>
			speed_index = 1;
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <arbitrate_speed+0x1a0>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f50:	20000028 	.word	0x20000028
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20001a2a 	.word	0x20001a2a
 8001f5c:	20001a32 	.word	0x20001a32

08001f60 <arbitrate_steering_angle>:

void arbitrate_steering_angle(void) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	// if steering angle is inoperative assign control_state to manual and do not update steering angle
	if (steering_angle.parameter_state == INOPERATIVE) {
 8001f64:	4b29      	ldr	r3, [pc, #164]	; (800200c <arbitrate_steering_angle+0xac>)
 8001f66:	2225      	movs	r2, #37	; 0x25
 8001f68:	5c9b      	ldrb	r3, [r3, r2]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <arbitrate_steering_angle+0x14>
		control_state = MANUAL;
 8001f6e:	4b28      	ldr	r3, [pc, #160]	; (8002010 <arbitrate_steering_angle+0xb0>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
	}

	// if control state is auto assign steering angle
	if (control_state == AUTO) {
 8001f74:	4b26      	ldr	r3, [pc, #152]	; (8002010 <arbitrate_steering_angle+0xb0>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d143      	bne.n	8002004 <arbitrate_steering_angle+0xa4>
		// 0 is 0 degrees steering angle (-90 to 90)

		if (steering_angle.buffer_average >= STEERING_INDEX_5_THRESHOLD) {
 8001f7c:	4b23      	ldr	r3, [pc, #140]	; (800200c <arbitrate_steering_angle+0xac>)
 8001f7e:	6998      	ldr	r0, [r3, #24]
 8001f80:	69d9      	ldr	r1, [r3, #28]
 8001f82:	2200      	movs	r2, #0
 8001f84:	4b23      	ldr	r3, [pc, #140]	; (8002014 <arbitrate_steering_angle+0xb4>)
 8001f86:	f7fe f97f 	bl	8000288 <__aeabi_dcmpge>
 8001f8a:	1e03      	subs	r3, r0, #0
 8001f8c:	d003      	beq.n	8001f96 <arbitrate_steering_angle+0x36>
			steering_angle_index = 4;
 8001f8e:	4b22      	ldr	r3, [pc, #136]	; (8002018 <arbitrate_steering_angle+0xb8>)
 8001f90:	2204      	movs	r2, #4
 8001f92:	701a      	strb	r2, [r3, #0]
			steering_angle_index = 0;
		} else {
			steering_angle_index = 0;
		}
	}
}
 8001f94:	e036      	b.n	8002004 <arbitrate_steering_angle+0xa4>
		} else if (steering_angle.buffer_average >= STEERING_INDEX_4_THRESHOLD) {
 8001f96:	4b1d      	ldr	r3, [pc, #116]	; (800200c <arbitrate_steering_angle+0xac>)
 8001f98:	6998      	ldr	r0, [r3, #24]
 8001f9a:	69d9      	ldr	r1, [r3, #28]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	; (800201c <arbitrate_steering_angle+0xbc>)
 8001fa0:	f7fe f972 	bl	8000288 <__aeabi_dcmpge>
 8001fa4:	1e03      	subs	r3, r0, #0
 8001fa6:	d003      	beq.n	8001fb0 <arbitrate_steering_angle+0x50>
			steering_angle_index = 3;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <arbitrate_steering_angle+0xb8>)
 8001faa:	2203      	movs	r2, #3
 8001fac:	701a      	strb	r2, [r3, #0]
}
 8001fae:	e029      	b.n	8002004 <arbitrate_steering_angle+0xa4>
		} else if (steering_angle.buffer_average >= STEERING_INDEX_3_THRESHOLD) {
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <arbitrate_steering_angle+0xac>)
 8001fb2:	6998      	ldr	r0, [r3, #24]
 8001fb4:	69d9      	ldr	r1, [r3, #28]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <arbitrate_steering_angle+0xc0>)
 8001fba:	f7fe f965 	bl	8000288 <__aeabi_dcmpge>
 8001fbe:	1e03      	subs	r3, r0, #0
 8001fc0:	d003      	beq.n	8001fca <arbitrate_steering_angle+0x6a>
			steering_angle_index = 2;
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <arbitrate_steering_angle+0xb8>)
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	701a      	strb	r2, [r3, #0]
}
 8001fc8:	e01c      	b.n	8002004 <arbitrate_steering_angle+0xa4>
		} else if (steering_angle.buffer_average >= STEERING_INDEX_2_THRESHOLD) {
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <arbitrate_steering_angle+0xac>)
 8001fcc:	6998      	ldr	r0, [r3, #24]
 8001fce:	69d9      	ldr	r1, [r3, #28]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <arbitrate_steering_angle+0xc4>)
 8001fd4:	f7fe f958 	bl	8000288 <__aeabi_dcmpge>
 8001fd8:	1e03      	subs	r3, r0, #0
 8001fda:	d003      	beq.n	8001fe4 <arbitrate_steering_angle+0x84>
			steering_angle_index = 1;
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <arbitrate_steering_angle+0xb8>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
}
 8001fe2:	e00f      	b.n	8002004 <arbitrate_steering_angle+0xa4>
		} else if (steering_angle.buffer_average >= STEERING_INDEX_1_THRESHOLD) {
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <arbitrate_steering_angle+0xac>)
 8001fe6:	6998      	ldr	r0, [r3, #24]
 8001fe8:	69d9      	ldr	r1, [r3, #28]
 8001fea:	2200      	movs	r2, #0
 8001fec:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <arbitrate_steering_angle+0xc8>)
 8001fee:	f7fe f94b 	bl	8000288 <__aeabi_dcmpge>
 8001ff2:	1e03      	subs	r3, r0, #0
 8001ff4:	d003      	beq.n	8001ffe <arbitrate_steering_angle+0x9e>
			steering_angle_index = 0;
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <arbitrate_steering_angle+0xb8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
}
 8001ffc:	e002      	b.n	8002004 <arbitrate_steering_angle+0xa4>
			steering_angle_index = 0;
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <arbitrate_steering_angle+0xb8>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	20000078 	.word	0x20000078
 8002010:	20001a2a 	.word	0x20001a2a
 8002014:	40520000 	.word	0x40520000
 8002018:	20002c21 	.word	0x20002c21
 800201c:	404b0000 	.word	0x404b0000
 8002020:	c04b0000 	.word	0xc04b0000
 8002024:	c0520000 	.word	0xc0520000
 8002028:	c0568000 	.word	0xc0568000

0800202c <output_angles>:

void output_angles(void) {
 800202c:	b5b0      	push	{r4, r5, r7, lr}
 800202e:	b090      	sub	sp, #64	; 0x40
 8002030:	af10      	add	r7, sp, #64	; 0x40
	setPWM(htim3, TIM_CHANNEL_1, TIMER_PERIOD, front_left_servo_ticks);		// 3000 == 1ms, 20ms == 60000ms
 8002032:	4b28      	ldr	r3, [pc, #160]	; (80020d4 <output_angles+0xa8>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	4c28      	ldr	r4, [pc, #160]	; (80020d8 <output_angles+0xac>)
 8002038:	930e      	str	r3, [sp, #56]	; 0x38
 800203a:	4b28      	ldr	r3, [pc, #160]	; (80020dc <output_angles+0xb0>)
 800203c:	930d      	str	r3, [sp, #52]	; 0x34
 800203e:	2300      	movs	r3, #0
 8002040:	930c      	str	r3, [sp, #48]	; 0x30
 8002042:	466b      	mov	r3, sp
 8002044:	001a      	movs	r2, r3
 8002046:	0023      	movs	r3, r4
 8002048:	3310      	adds	r3, #16
 800204a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800204c:	c223      	stmia	r2!, {r0, r1, r5}
 800204e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002050:	c223      	stmia	r2!, {r0, r1, r5}
 8002052:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002054:	c223      	stmia	r2!, {r0, r1, r5}
 8002056:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002058:	c223      	stmia	r2!, {r0, r1, r5}
 800205a:	6820      	ldr	r0, [r4, #0]
 800205c:	6861      	ldr	r1, [r4, #4]
 800205e:	68a2      	ldr	r2, [r4, #8]
 8002060:	68e3      	ldr	r3, [r4, #12]
 8002062:	f000 f841 	bl	80020e8 <setPWM>
	setPWM(htim3, TIM_CHANNEL_2, TIMER_PERIOD, front_right_servo_ticks);	// 3000 == 1ms, 20ms == 60000ms
 8002066:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <output_angles+0xb4>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	4c1b      	ldr	r4, [pc, #108]	; (80020d8 <output_angles+0xac>)
 800206c:	930e      	str	r3, [sp, #56]	; 0x38
 800206e:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <output_angles+0xb0>)
 8002070:	930d      	str	r3, [sp, #52]	; 0x34
 8002072:	2304      	movs	r3, #4
 8002074:	930c      	str	r3, [sp, #48]	; 0x30
 8002076:	466b      	mov	r3, sp
 8002078:	001a      	movs	r2, r3
 800207a:	0023      	movs	r3, r4
 800207c:	3310      	adds	r3, #16
 800207e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002080:	c223      	stmia	r2!, {r0, r1, r5}
 8002082:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002084:	c223      	stmia	r2!, {r0, r1, r5}
 8002086:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002088:	c223      	stmia	r2!, {r0, r1, r5}
 800208a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800208c:	c223      	stmia	r2!, {r0, r1, r5}
 800208e:	6820      	ldr	r0, [r4, #0]
 8002090:	6861      	ldr	r1, [r4, #4]
 8002092:	68a2      	ldr	r2, [r4, #8]
 8002094:	68e3      	ldr	r3, [r4, #12]
 8002096:	f000 f827 	bl	80020e8 <setPWM>
	setPWM(htim3, TIM_CHANNEL_3, TIMER_PERIOD, rear_servo_ticks);			// 3000 == 1ms, 20ms == 60000ms
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <output_angles+0xb8>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	4c0e      	ldr	r4, [pc, #56]	; (80020d8 <output_angles+0xac>)
 80020a0:	930e      	str	r3, [sp, #56]	; 0x38
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <output_angles+0xb0>)
 80020a4:	930d      	str	r3, [sp, #52]	; 0x34
 80020a6:	2308      	movs	r3, #8
 80020a8:	930c      	str	r3, [sp, #48]	; 0x30
 80020aa:	466b      	mov	r3, sp
 80020ac:	001a      	movs	r2, r3
 80020ae:	0023      	movs	r3, r4
 80020b0:	3310      	adds	r3, #16
 80020b2:	cb23      	ldmia	r3!, {r0, r1, r5}
 80020b4:	c223      	stmia	r2!, {r0, r1, r5}
 80020b6:	cb23      	ldmia	r3!, {r0, r1, r5}
 80020b8:	c223      	stmia	r2!, {r0, r1, r5}
 80020ba:	cb23      	ldmia	r3!, {r0, r1, r5}
 80020bc:	c223      	stmia	r2!, {r0, r1, r5}
 80020be:	cb23      	ldmia	r3!, {r0, r1, r5}
 80020c0:	c223      	stmia	r2!, {r0, r1, r5}
 80020c2:	6820      	ldr	r0, [r4, #0]
 80020c4:	6861      	ldr	r1, [r4, #4]
 80020c6:	68a2      	ldr	r2, [r4, #8]
 80020c8:	68e3      	ldr	r3, [r4, #12]
 80020ca:	f000 f80d 	bl	80020e8 <setPWM>
}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bdb0      	pop	{r4, r5, r7, pc}
 80020d4:	20001a2c 	.word	0x20001a2c
 80020d8:	200030bc 	.word	0x200030bc
 80020dc:	0000ea60 	.word	0x0000ea60
 80020e0:	20001a30 	.word	0x20001a30
 80020e4:	200020d0 	.word	0x200020d0

080020e8 <setPWM>:

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period,
uint16_t pulse)
{
 80020e8:	b084      	sub	sp, #16
 80020ea:	b5b0      	push	{r4, r5, r7, lr}
 80020ec:	b088      	sub	sp, #32
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	2430      	movs	r4, #48	; 0x30
 80020f2:	0025      	movs	r5, r4
 80020f4:	193c      	adds	r4, r7, r4
 80020f6:	6020      	str	r0, [r4, #0]
 80020f8:	6061      	str	r1, [r4, #4]
 80020fa:	60a2      	str	r2, [r4, #8]
 80020fc:	60e3      	str	r3, [r4, #12]
	HAL_TIM_PWM_Stop(&timer, channel); 						// stop generation of pwm
 80020fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002100:	002c      	movs	r4, r5
 8002102:	193a      	adds	r2, r7, r4
 8002104:	0019      	movs	r1, r3
 8002106:	0010      	movs	r0, r2
 8002108:	f002 faba 	bl	8004680 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = period; 							// set the period duration
 800210c:	2344      	movs	r3, #68	; 0x44
 800210e:	2230      	movs	r2, #48	; 0x30
 8002110:	4694      	mov	ip, r2
 8002112:	44bc      	add	ip, r7
 8002114:	4463      	add	r3, ip
 8002116:	881a      	ldrh	r2, [r3, #0]
 8002118:	193b      	adds	r3, r7, r4
 800211a:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Init(&timer); 								// reinititialise with new period value
 800211c:	193b      	adds	r3, r7, r4
 800211e:	0018      	movs	r0, r3
 8002120:	f002 fa36 	bl	8004590 <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	2260      	movs	r2, #96	; 0x60
 8002128:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = pulse; 								// set the pulse duration
 800212a:	2348      	movs	r3, #72	; 0x48
 800212c:	2230      	movs	r2, #48	; 0x30
 800212e:	4694      	mov	ip, r2
 8002130:	44bc      	add	ip, r7
 8002132:	4463      	add	r3, ip
 8002134:	881a      	ldrh	r2, [r3, #0]
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8002146:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	1938      	adds	r0, r7, r4
 800214c:	0019      	movs	r1, r3
 800214e:	f002 fc11 	bl	8004974 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel); 					// start pwm generation
 8002152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002154:	193a      	adds	r2, r7, r4
 8002156:	0019      	movs	r1, r3
 8002158:	0010      	movs	r0, r2
 800215a:	f002 fa45 	bl	80045e8 <HAL_TIM_PWM_Start>
}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	46bd      	mov	sp, r7
 8002162:	b008      	add	sp, #32
 8002164:	bcb0      	pop	{r4, r5, r7}
 8002166:	bc08      	pop	{r3}
 8002168:	b004      	add	sp, #16
 800216a:	4718      	bx	r3

0800216c <get_btn_state>:

void get_btn_state(void) {
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) 	//read the onboard DRS button
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	019b      	lsls	r3, r3, #6
 8002174:	4a08      	ldr	r2, [pc, #32]	; (8002198 <get_btn_state+0x2c>)
 8002176:	0019      	movs	r1, r3
 8002178:	0010      	movs	r0, r2
 800217a:	f001 fb51 	bl	8003820 <HAL_GPIO_ReadPin>
 800217e:	1e03      	subs	r3, r0, #0
 8002180:	d103      	bne.n	800218a <get_btn_state+0x1e>
	{
		drs_button_state = 1;
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <get_btn_state+0x30>)
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
	} else {
		drs_button_state = 0;
	}
}
 8002188:	e002      	b.n	8002190 <get_btn_state+0x24>
		drs_button_state = 0;
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <get_btn_state+0x30>)
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	48000800 	.word	0x48000800
 800219c:	20001a29 	.word	0x20001a29

080021a0 <HAL_CAN_RxFifo0MsgPendingCallback>:


// HAL_CAN_RxFifo0MsgPendingCallback
//  ISR called when CAN_RX_FIFO0 has a pending message
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	service_can_rx_hardware(hcan, CAN_RX_FIFO0);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2100      	movs	r1, #0
 80021ac:	0018      	movs	r0, r3
 80021ae:	f000 f811 	bl	80021d4 <service_can_rx_hardware>
}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b002      	add	sp, #8
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_CAN_RxFifo1MsgPendingCallback>:


// HAL_CAN_RxFifo1MsgPendingCallback
//  ISR called when CAN_RX_FIFO1 has a pending message
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
	service_can_rx_hardware(hcan, CAN_RX_FIFO1);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2101      	movs	r1, #1
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 f804 	bl	80021d4 <service_can_rx_hardware>
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b002      	add	sp, #8
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <service_can_rx_hardware>:
//  U32 rx_mailbox: the mailbox to service (CAN_RX_FIFO0 or CAN_RX_FIFO1)
//    Make sure this is valid, no error checking is done
//
//  designed to be called as an ISR whenever there is an RX message pending
static void service_can_rx_hardware(CAN_HandleTypeDef* hcan, U32 rx_mailbox)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rx_header;
	CAN_MSG* message;

	// get all the pending RX messages from the RX mailbox and store into the RX buffer
	while (rx_buffer_fill_level < RX_BUFFER_SIZE
 80021de:	e030      	b.n	8002242 <service_can_rx_hardware+0x6e>
			&& HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
	{
		// set message to the correct pointer from the RX buffer (the "last" message in the buffer)
		message = rx_message_buffer + ((rx_buffer_head + rx_buffer_fill_level) % RX_BUFFER_SIZE);
 80021e0:	4b1f      	ldr	r3, [pc, #124]	; (8002260 <service_can_rx_hardware+0x8c>)
 80021e2:	781a      	ldrb	r2, [r3, #0]
 80021e4:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <service_can_rx_hardware+0x90>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	18d3      	adds	r3, r2, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	001a      	movs	r2, r3
 80021ee:	231f      	movs	r3, #31
 80021f0:	4013      	ands	r3, r2
 80021f2:	011a      	lsls	r2, r3, #4
 80021f4:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <service_can_rx_hardware+0x94>)
 80021f6:	18d3      	adds	r3, r2, r3
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24

		// Build the message from the registers on the STM32
		if (HAL_CAN_GetRxMessage(hcan, rx_mailbox, &rx_header, message->data) != HAL_OK)
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	3306      	adds	r3, #6
 80021fe:	2208      	movs	r2, #8
 8002200:	18ba      	adds	r2, r7, r2
 8002202:	6839      	ldr	r1, [r7, #0]
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 fd95 	bl	8002d34 <HAL_CAN_GetRxMessage>
 800220a:	1e03      	subs	r3, r0, #0
 800220c:	d004      	beq.n	8002218 <service_can_rx_hardware+0x44>
		{
			// this will always be HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <service_can_rx_hardware+0x98>)
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	e020      	b.n	800225a <service_can_rx_hardware+0x86>
			return;
		}

		// modify the rx_buffer data to reflect the new message
		rx_buffer_fill_level++;
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <service_can_rx_hardware+0x90>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	3301      	adds	r3, #1
 800221e:	b2da      	uxtb	r2, r3
 8002220:	4b10      	ldr	r3, [pc, #64]	; (8002264 <service_can_rx_hardware+0x90>)
 8002222:	701a      	strb	r2, [r3, #0]

		// move the header ID, RTR bit, and DLC into the GopherCAN message struct
		message->rtr_bit = rx_header.RTR;
 8002224:	2108      	movs	r1, #8
 8002226:	187b      	adds	r3, r7, r1
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	711a      	strb	r2, [r3, #4]
		message->id = rx_header.ExtId;
 8002230:	187b      	adds	r3, r7, r1
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	601a      	str	r2, [r3, #0]
		message->dlc = rx_header.DLC;
 8002238:	187b      	adds	r3, r7, r1
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	715a      	strb	r2, [r3, #5]
	while (rx_buffer_fill_level < RX_BUFFER_SIZE
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <service_can_rx_hardware+0x90>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b1f      	cmp	r3, #31
 8002248:	d807      	bhi.n	800225a <service_can_rx_hardware+0x86>
			&& HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0011      	movs	r1, r2
 8002250:	0018      	movs	r0, r3
 8002252:	f000 fe8b 	bl	8002f6c <HAL_CAN_GetRxFifoFillLevel>
 8002256:	1e03      	subs	r3, r0, #0
 8002258:	d1c2      	bne.n	80021e0 <service_can_rx_hardware+0xc>
	}
}
 800225a:	46bd      	mov	sp, r7
 800225c:	b00a      	add	sp, #40	; 0x28
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000120 	.word	0x20000120
 8002264:	20000121 	.word	0x20000121
 8002268:	20002c48 	.word	0x20002c48
 800226c:	2000011c 	.word	0x2000011c

08002270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002274:	f000 fc30 	bl	8002ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002278:	f000 f84c 	bl	8002314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800227c:	f000 f97a 	bl	8002574 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002280:	f000 f948 	bl	8002514 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002284:	f000 f8d0 	bl	8002428 <MX_TIM3_Init>
  MX_CAN_Init();
 8002288:	f000 f898 	bl	80023bc <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  /************** RUNNING CONFIG CALLS **************/

  ACM_Init();
 800228c:	f7ff fa90 	bl	80017b0 <ACM_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002290:	f003 faee 	bl	8005870 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of collect_data */
  collect_dataHandle = osThreadNew(start_collect_data, NULL, &collect_data_attributes);
 8002294:	4a13      	ldr	r2, [pc, #76]	; (80022e4 <main+0x74>)
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <main+0x78>)
 8002298:	2100      	movs	r1, #0
 800229a:	0018      	movs	r0, r3
 800229c:	f003 fb42 	bl	8005924 <osThreadNew>
 80022a0:	0002      	movs	r2, r0
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <main+0x7c>)
 80022a4:	601a      	str	r2, [r3, #0]

  /* creation of calculate_wing_ */
  calculate_wing_Handle = osThreadNew(start_calculate_wing_angle, NULL, &calculate_wing__attributes);
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <main+0x80>)
 80022a8:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <main+0x84>)
 80022aa:	2100      	movs	r1, #0
 80022ac:	0018      	movs	r0, r3
 80022ae:	f003 fb39 	bl	8005924 <osThreadNew>
 80022b2:	0002      	movs	r2, r0
 80022b4:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <main+0x88>)
 80022b6:	601a      	str	r2, [r3, #0]

  /* creation of actuate_wings */
  actuate_wingsHandle = osThreadNew(start_actuate_wings, NULL, &actuate_wings_attributes);
 80022b8:	4a10      	ldr	r2, [pc, #64]	; (80022fc <main+0x8c>)
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <main+0x90>)
 80022bc:	2100      	movs	r1, #0
 80022be:	0018      	movs	r0, r3
 80022c0:	f003 fb30 	bl	8005924 <osThreadNew>
 80022c4:	0002      	movs	r2, r0
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <main+0x94>)
 80022c8:	601a      	str	r2, [r3, #0]

  /* creation of DRS_button */
  DRS_buttonHandle = osThreadNew(start_DRS_button, NULL, &DRS_button_attributes);
 80022ca:	4a0f      	ldr	r2, [pc, #60]	; (8002308 <main+0x98>)
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <main+0x9c>)
 80022ce:	2100      	movs	r1, #0
 80022d0:	0018      	movs	r0, r3
 80022d2:	f003 fb27 	bl	8005924 <osThreadNew>
 80022d6:	0002      	movs	r2, r0
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <main+0xa0>)
 80022da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80022dc:	f003 faf4 	bl	80058c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <main+0x70>
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	08007de4 	.word	0x08007de4
 80022e8:	08002665 	.word	0x08002665
 80022ec:	20003090 	.word	0x20003090
 80022f0:	08007e08 	.word	0x08007e08
 80022f4:	08002679 	.word	0x08002679
 80022f8:	20003184 	.word	0x20003184
 80022fc:	08007e2c 	.word	0x08007e2c
 8002300:	08002699 	.word	0x08002699
 8002304:	200030fc 	.word	0x200030fc
 8002308:	08007e50 	.word	0x08007e50
 800230c:	080026ad 	.word	0x080026ad
 8002310:	20003100 	.word	0x20003100

08002314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b099      	sub	sp, #100	; 0x64
 8002318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800231a:	242c      	movs	r4, #44	; 0x2c
 800231c:	193b      	adds	r3, r7, r4
 800231e:	0018      	movs	r0, r3
 8002320:	2334      	movs	r3, #52	; 0x34
 8002322:	001a      	movs	r2, r3
 8002324:	2100      	movs	r1, #0
 8002326:	f005 fcee 	bl	8007d06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800232a:	231c      	movs	r3, #28
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	0018      	movs	r0, r3
 8002330:	2310      	movs	r3, #16
 8002332:	001a      	movs	r2, r3
 8002334:	2100      	movs	r1, #0
 8002336:	f005 fce6 	bl	8007d06 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800233a:	003b      	movs	r3, r7
 800233c:	0018      	movs	r0, r3
 800233e:	231c      	movs	r3, #28
 8002340:	001a      	movs	r2, r3
 8002342:	2100      	movs	r1, #0
 8002344:	f005 fcdf 	bl	8007d06 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8002348:	193b      	adds	r3, r7, r4
 800234a:	2220      	movs	r2, #32
 800234c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800234e:	193b      	adds	r3, r7, r4
 8002350:	2201      	movs	r2, #1
 8002352:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002354:	193b      	adds	r3, r7, r4
 8002356:	2200      	movs	r2, #0
 8002358:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800235a:	193b      	adds	r3, r7, r4
 800235c:	0018      	movs	r0, r3
 800235e:	f001 fa99 	bl	8003894 <HAL_RCC_OscConfig>
 8002362:	1e03      	subs	r3, r0, #0
 8002364:	d001      	beq.n	800236a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8002366:	f000 f9bd 	bl	80026e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800236a:	211c      	movs	r1, #28
 800236c:	187b      	adds	r3, r7, r1
 800236e:	2207      	movs	r2, #7
 8002370:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8002372:	187b      	adds	r3, r7, r1
 8002374:	2203      	movs	r2, #3
 8002376:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002378:	187b      	adds	r3, r7, r1
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800237e:	187b      	adds	r3, r7, r1
 8002380:	2200      	movs	r2, #0
 8002382:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002384:	187b      	adds	r3, r7, r1
 8002386:	2101      	movs	r1, #1
 8002388:	0018      	movs	r0, r3
 800238a:	f001 fe09 	bl	8003fa0 <HAL_RCC_ClockConfig>
 800238e:	1e03      	subs	r3, r0, #0
 8002390:	d001      	beq.n	8002396 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002392:	f000 f9a7 	bl	80026e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002396:	003b      	movs	r3, r7
 8002398:	2202      	movs	r2, #2
 800239a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800239c:	003b      	movs	r3, r7
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023a2:	003b      	movs	r3, r7
 80023a4:	0018      	movs	r0, r3
 80023a6:	f001 ff9d 	bl	80042e4 <HAL_RCCEx_PeriphCLKConfig>
 80023aa:	1e03      	subs	r3, r0, #0
 80023ac:	d001      	beq.n	80023b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80023ae:	f000 f999 	bl	80026e4 <Error_Handler>
  }
}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b019      	add	sp, #100	; 0x64
 80023b8:	bd90      	pop	{r4, r7, pc}
	...

080023bc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80023c0:	4b17      	ldr	r3, [pc, #92]	; (8002420 <MX_CAN_Init+0x64>)
 80023c2:	4a18      	ldr	r2, [pc, #96]	; (8002424 <MX_CAN_Init+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 80023c6:	4b16      	ldr	r3, [pc, #88]	; (8002420 <MX_CAN_Init+0x64>)
 80023c8:	2206      	movs	r2, #6
 80023ca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <MX_CAN_Init+0x64>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80023d2:	4b13      	ldr	r3, [pc, #76]	; (8002420 <MX_CAN_Init+0x64>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <MX_CAN_Init+0x64>)
 80023da:	22a0      	movs	r2, #160	; 0xa0
 80023dc:	02d2      	lsls	r2, r2, #11
 80023de:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <MX_CAN_Init+0x64>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <MX_CAN_Init+0x64>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <MX_CAN_Init+0x64>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <MX_CAN_Init+0x64>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <MX_CAN_Init+0x64>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80023fe:	4b08      	ldr	r3, [pc, #32]	; (8002420 <MX_CAN_Init+0x64>)
 8002400:	2200      	movs	r2, #0
 8002402:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <MX_CAN_Init+0x64>)
 8002406:	2200      	movs	r2, #0
 8002408:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <MX_CAN_Init+0x64>)
 800240c:	0018      	movs	r0, r3
 800240e:	f000 fb93 	bl	8002b38 <HAL_CAN_Init>
 8002412:	1e03      	subs	r3, r0, #0
 8002414:	d001      	beq.n	800241a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8002416:	f000 f965 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20003094 	.word	0x20003094
 8002424:	40006400 	.word	0x40006400

08002428 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800242e:	2320      	movs	r3, #32
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	0018      	movs	r0, r3
 8002434:	2308      	movs	r3, #8
 8002436:	001a      	movs	r2, r3
 8002438:	2100      	movs	r1, #0
 800243a:	f005 fc64 	bl	8007d06 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	0018      	movs	r0, r3
 8002442:	231c      	movs	r3, #28
 8002444:	001a      	movs	r2, r3
 8002446:	2100      	movs	r1, #0
 8002448:	f005 fc5d 	bl	8007d06 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800244c:	4b2e      	ldr	r3, [pc, #184]	; (8002508 <MX_TIM3_Init+0xe0>)
 800244e:	4a2f      	ldr	r2, [pc, #188]	; (800250c <MX_TIM3_Init+0xe4>)
 8002450:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 8002452:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <MX_TIM3_Init+0xe0>)
 8002454:	2210      	movs	r2, #16
 8002456:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002458:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <MX_TIM3_Init+0xe0>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 800245e:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <MX_TIM3_Init+0xe0>)
 8002460:	4a2b      	ldr	r2, [pc, #172]	; (8002510 <MX_TIM3_Init+0xe8>)
 8002462:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002464:	4b28      	ldr	r3, [pc, #160]	; (8002508 <MX_TIM3_Init+0xe0>)
 8002466:	2200      	movs	r2, #0
 8002468:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246a:	4b27      	ldr	r3, [pc, #156]	; (8002508 <MX_TIM3_Init+0xe0>)
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <MX_TIM3_Init+0xe0>)
 8002472:	0018      	movs	r0, r3
 8002474:	f002 f88c 	bl	8004590 <HAL_TIM_PWM_Init>
 8002478:	1e03      	subs	r3, r0, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800247c:	f000 f932 	bl	80026e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002480:	2120      	movs	r1, #32
 8002482:	187b      	adds	r3, r7, r1
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002488:	187b      	adds	r3, r7, r1
 800248a:	2200      	movs	r2, #0
 800248c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800248e:	187a      	adds	r2, r7, r1
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <MX_TIM3_Init+0xe0>)
 8002492:	0011      	movs	r1, r2
 8002494:	0018      	movs	r0, r3
 8002496:	f002 fde5 	bl	8005064 <HAL_TIMEx_MasterConfigSynchronization>
 800249a:	1e03      	subs	r3, r0, #0
 800249c:	d001      	beq.n	80024a2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800249e:	f000 f921 	bl	80026e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	2260      	movs	r2, #96	; 0x60
 80024a6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2200      	movs	r2, #0
 80024ac:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ba:	1d39      	adds	r1, r7, #4
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <MX_TIM3_Init+0xe0>)
 80024be:	2200      	movs	r2, #0
 80024c0:	0018      	movs	r0, r3
 80024c2:	f002 fa57 	bl	8004974 <HAL_TIM_PWM_ConfigChannel>
 80024c6:	1e03      	subs	r3, r0, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80024ca:	f000 f90b 	bl	80026e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024ce:	1d39      	adds	r1, r7, #4
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <MX_TIM3_Init+0xe0>)
 80024d2:	2204      	movs	r2, #4
 80024d4:	0018      	movs	r0, r3
 80024d6:	f002 fa4d 	bl	8004974 <HAL_TIM_PWM_ConfigChannel>
 80024da:	1e03      	subs	r3, r0, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80024de:	f000 f901 	bl	80026e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024e2:	1d39      	adds	r1, r7, #4
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <MX_TIM3_Init+0xe0>)
 80024e6:	2208      	movs	r2, #8
 80024e8:	0018      	movs	r0, r3
 80024ea:	f002 fa43 	bl	8004974 <HAL_TIM_PWM_ConfigChannel>
 80024ee:	1e03      	subs	r3, r0, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 80024f2:	f000 f8f7 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <MX_TIM3_Init+0xe0>)
 80024f8:	0018      	movs	r0, r3
 80024fa:	f000 f991 	bl	8002820 <HAL_TIM_MspPostInit>

}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b00a      	add	sp, #40	; 0x28
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	200030bc 	.word	0x200030bc
 800250c:	40000400 	.word	0x40000400
 8002510:	0000ea60 	.word	0x0000ea60

08002514 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <MX_USART2_UART_Init+0x58>)
 800251a:	4a15      	ldr	r2, [pc, #84]	; (8002570 <MX_USART2_UART_Init+0x5c>)
 800251c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <MX_USART2_UART_Init+0x58>)
 8002520:	2296      	movs	r2, #150	; 0x96
 8002522:	0212      	lsls	r2, r2, #8
 8002524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_USART2_UART_Init+0x58>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_USART2_UART_Init+0x58>)
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <MX_USART2_UART_Init+0x58>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <MX_USART2_UART_Init+0x58>)
 800253a:	220c      	movs	r2, #12
 800253c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <MX_USART2_UART_Init+0x58>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_USART2_UART_Init+0x58>)
 8002546:	2200      	movs	r2, #0
 8002548:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <MX_USART2_UART_Init+0x58>)
 800254c:	2200      	movs	r2, #0
 800254e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_USART2_UART_Init+0x58>)
 8002552:	2200      	movs	r2, #0
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <MX_USART2_UART_Init+0x58>)
 8002558:	0018      	movs	r0, r3
 800255a:	f002 fdf1 	bl	8005140 <HAL_UART_Init>
 800255e:	1e03      	subs	r3, r0, #0
 8002560:	d001      	beq.n	8002566 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002562:	f000 f8bf 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20003104 	.word	0x20003104
 8002570:	40004400 	.word	0x40004400

08002574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b08b      	sub	sp, #44	; 0x2c
 8002578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257a:	2414      	movs	r4, #20
 800257c:	193b      	adds	r3, r7, r4
 800257e:	0018      	movs	r0, r3
 8002580:	2314      	movs	r3, #20
 8002582:	001a      	movs	r2, r3
 8002584:	2100      	movs	r1, #0
 8002586:	f005 fbbe 	bl	8007d06 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800258a:	4b33      	ldr	r3, [pc, #204]	; (8002658 <MX_GPIO_Init+0xe4>)
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	4b32      	ldr	r3, [pc, #200]	; (8002658 <MX_GPIO_Init+0xe4>)
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	0309      	lsls	r1, r1, #12
 8002594:	430a      	orrs	r2, r1
 8002596:	615a      	str	r2, [r3, #20]
 8002598:	4b2f      	ldr	r3, [pc, #188]	; (8002658 <MX_GPIO_Init+0xe4>)
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	031b      	lsls	r3, r3, #12
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025a6:	4b2c      	ldr	r3, [pc, #176]	; (8002658 <MX_GPIO_Init+0xe4>)
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <MX_GPIO_Init+0xe4>)
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	03c9      	lsls	r1, r1, #15
 80025b0:	430a      	orrs	r2, r1
 80025b2:	615a      	str	r2, [r3, #20]
 80025b4:	4b28      	ldr	r3, [pc, #160]	; (8002658 <MX_GPIO_Init+0xe4>)
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	03db      	lsls	r3, r3, #15
 80025bc:	4013      	ands	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c2:	4b25      	ldr	r3, [pc, #148]	; (8002658 <MX_GPIO_Init+0xe4>)
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	4b24      	ldr	r3, [pc, #144]	; (8002658 <MX_GPIO_Init+0xe4>)
 80025c8:	2180      	movs	r1, #128	; 0x80
 80025ca:	0289      	lsls	r1, r1, #10
 80025cc:	430a      	orrs	r2, r1
 80025ce:	615a      	str	r2, [r3, #20]
 80025d0:	4b21      	ldr	r3, [pc, #132]	; (8002658 <MX_GPIO_Init+0xe4>)
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	029b      	lsls	r3, r3, #10
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <MX_GPIO_Init+0xe4>)
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <MX_GPIO_Init+0xe4>)
 80025e4:	2180      	movs	r1, #128	; 0x80
 80025e6:	02c9      	lsls	r1, r1, #11
 80025e8:	430a      	orrs	r2, r1
 80025ea:	615a      	str	r2, [r3, #20]
 80025ec:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <MX_GPIO_Init+0xe4>)
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	02db      	lsls	r3, r3, #11
 80025f4:	4013      	ands	r3, r2
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80025fa:	2390      	movs	r3, #144	; 0x90
 80025fc:	05db      	lsls	r3, r3, #23
 80025fe:	2200      	movs	r2, #0
 8002600:	2120      	movs	r1, #32
 8002602:	0018      	movs	r0, r3
 8002604:	f001 f929 	bl	800385a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002608:	193b      	adds	r3, r7, r4
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	0192      	lsls	r2, r2, #6
 800260e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002610:	193b      	adds	r3, r7, r4
 8002612:	4a12      	ldr	r2, [pc, #72]	; (800265c <MX_GPIO_Init+0xe8>)
 8002614:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	193b      	adds	r3, r7, r4
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800261c:	193b      	adds	r3, r7, r4
 800261e:	4a10      	ldr	r2, [pc, #64]	; (8002660 <MX_GPIO_Init+0xec>)
 8002620:	0019      	movs	r1, r3
 8002622:	0010      	movs	r0, r2
 8002624:	f000 ff84 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002628:	0021      	movs	r1, r4
 800262a:	187b      	adds	r3, r7, r1
 800262c:	2220      	movs	r2, #32
 800262e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002630:	187b      	adds	r3, r7, r1
 8002632:	2201      	movs	r2, #1
 8002634:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	187b      	adds	r3, r7, r1
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	187b      	adds	r3, r7, r1
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002642:	187a      	adds	r2, r7, r1
 8002644:	2390      	movs	r3, #144	; 0x90
 8002646:	05db      	lsls	r3, r3, #23
 8002648:	0011      	movs	r1, r2
 800264a:	0018      	movs	r0, r3
 800264c:	f000 ff70 	bl	8003530 <HAL_GPIO_Init>

}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b00b      	add	sp, #44	; 0x2c
 8002656:	bd90      	pop	{r4, r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	10210000 	.word	0x10210000
 8002660:	48000800 	.word	0x48000800

08002664 <start_collect_data>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_collect_data */
void start_collect_data(void *argument)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //collect the data
	  fetch_data();
 800266c:	f7ff f8e4 	bl	8001838 <fetch_data>

	  osDelay(1);
 8002670:	2001      	movs	r0, #1
 8002672:	f003 f9ff 	bl	8005a74 <osDelay>
	  fetch_data();
 8002676:	e7f9      	b.n	800266c <start_collect_data+0x8>

08002678 <start_calculate_wing_angle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_calculate_wing_angle */
void start_calculate_wing_angle(void *argument)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_calculate_wing_angle */
  /* Infinite loop */
  for(;;)
  {
	  //Pick all of the necessary values that should be used for calculation
	  arbitrate_acceleration();
 8002680:	f7ff fa52 	bl	8001b28 <arbitrate_acceleration>
	  arbitrate_speed();
 8002684:	f7ff fb9a 	bl	8001dbc <arbitrate_speed>
	  arbitrate_steering_angle();
 8002688:	f7ff fc6a 	bl	8001f60 <arbitrate_steering_angle>

	  calculate_wing_angle();
 800268c:	f7ff f968 	bl	8001960 <calculate_wing_angle>


	  osDelay(1);
 8002690:	2001      	movs	r0, #1
 8002692:	f003 f9ef 	bl	8005a74 <osDelay>
	  arbitrate_acceleration();
 8002696:	e7f3      	b.n	8002680 <start_calculate_wing_angle+0x8>

08002698 <start_actuate_wings>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_actuate_wings */
void start_actuate_wings(void *argument)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_actuate_wings */
  /* Infinite loop */
  for(;;)
  {
	  // send information to the servos
	  output_angles();
 80026a0:	f7ff fcc4 	bl	800202c <output_angles>
	  osDelay(1);
 80026a4:	2001      	movs	r0, #1
 80026a6:	f003 f9e5 	bl	8005a74 <osDelay>
	  output_angles();
 80026aa:	e7f9      	b.n	80026a0 <start_actuate_wings+0x8>

080026ac <start_DRS_button>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_DRS_button */
void start_DRS_button(void *argument)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_DRS_button */
  /* Infinite loop */
  for(;;)
  {
	  get_btn_state();
 80026b4:	f7ff fd5a 	bl	800216c <get_btn_state>
	  osDelay(1);
 80026b8:	2001      	movs	r0, #1
 80026ba:	f003 f9db 	bl	8005a74 <osDelay>
	  get_btn_state();
 80026be:	e7f9      	b.n	80026b4 <start_DRS_button+0x8>

080026c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d101      	bne.n	80026d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026d2:	f000 fa15 	bl	8002b00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	46bd      	mov	sp, r7
 80026da:	b002      	add	sp, #8
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	40001000 	.word	0x40001000

080026e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026e8:	46c0      	nop			; (mov r8, r8)
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <HAL_MspInit+0x44>)
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_MspInit+0x44>)
 80026fc:	2101      	movs	r1, #1
 80026fe:	430a      	orrs	r2, r1
 8002700:	619a      	str	r2, [r3, #24]
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <HAL_MspInit+0x44>)
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2201      	movs	r2, #1
 8002708:	4013      	ands	r3, r2
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_MspInit+0x44>)
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_MspInit+0x44>)
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	0549      	lsls	r1, r1, #21
 8002718:	430a      	orrs	r2, r1
 800271a:	61da      	str	r2, [r3, #28]
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_MspInit+0x44>)
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	055b      	lsls	r3, r3, #21
 8002724:	4013      	ands	r3, r2
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	b002      	add	sp, #8
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	2314      	movs	r3, #20
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	0018      	movs	r0, r3
 8002746:	2314      	movs	r3, #20
 8002748:	001a      	movs	r2, r3
 800274a:	2100      	movs	r1, #0
 800274c:	f005 fadb 	bl	8007d06 <memset>
  if(hcan->Instance==CAN)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a20      	ldr	r2, [pc, #128]	; (80027d8 <HAL_CAN_MspInit+0xa0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d13a      	bne.n	80027d0 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_CAN_MspInit+0xa4>)
 800275c:	69da      	ldr	r2, [r3, #28]
 800275e:	4b1f      	ldr	r3, [pc, #124]	; (80027dc <HAL_CAN_MspInit+0xa4>)
 8002760:	2180      	movs	r1, #128	; 0x80
 8002762:	0489      	lsls	r1, r1, #18
 8002764:	430a      	orrs	r2, r1
 8002766:	61da      	str	r2, [r3, #28]
 8002768:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <HAL_CAN_MspInit+0xa4>)
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	049b      	lsls	r3, r3, #18
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002776:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_CAN_MspInit+0xa4>)
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	4b18      	ldr	r3, [pc, #96]	; (80027dc <HAL_CAN_MspInit+0xa4>)
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	02c9      	lsls	r1, r1, #11
 8002780:	430a      	orrs	r2, r1
 8002782:	615a      	str	r2, [r3, #20]
 8002784:	4b15      	ldr	r3, [pc, #84]	; (80027dc <HAL_CAN_MspInit+0xa4>)
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	02db      	lsls	r3, r3, #11
 800278c:	4013      	ands	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002792:	2114      	movs	r1, #20
 8002794:	187b      	adds	r3, r7, r1
 8002796:	22c0      	movs	r2, #192	; 0xc0
 8002798:	0092      	lsls	r2, r2, #2
 800279a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279c:	187b      	adds	r3, r7, r1
 800279e:	2202      	movs	r2, #2
 80027a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	187b      	adds	r3, r7, r1
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	2203      	movs	r2, #3
 80027ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	2204      	movs	r2, #4
 80027b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b4:	187b      	adds	r3, r7, r1
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <HAL_CAN_MspInit+0xa8>)
 80027b8:	0019      	movs	r1, r3
 80027ba:	0010      	movs	r0, r2
 80027bc:	f000 feb8 	bl	8003530 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80027c0:	2200      	movs	r2, #0
 80027c2:	2100      	movs	r1, #0
 80027c4:	201e      	movs	r0, #30
 80027c6:	f000 fe8d 	bl	80034e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80027ca:	201e      	movs	r0, #30
 80027cc:	f000 fe9f 	bl	800350e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b00a      	add	sp, #40	; 0x28
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40006400 	.word	0x40006400
 80027dc:	40021000 	.word	0x40021000
 80027e0:	48000400 	.word	0x48000400

080027e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_TIM_PWM_MspInit+0x34>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d10b      	bne.n	800280e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_TIM_PWM_MspInit+0x38>)
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_TIM_PWM_MspInit+0x38>)
 80027fc:	2102      	movs	r1, #2
 80027fe:	430a      	orrs	r2, r1
 8002800:	61da      	str	r2, [r3, #28]
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_TIM_PWM_MspInit+0x38>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	2202      	movs	r2, #2
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	46bd      	mov	sp, r7
 8002812:	b004      	add	sp, #16
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	40000400 	.word	0x40000400
 800281c:	40021000 	.word	0x40021000

08002820 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b08b      	sub	sp, #44	; 0x2c
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	2314      	movs	r3, #20
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	0018      	movs	r0, r3
 800282e:	2314      	movs	r3, #20
 8002830:	001a      	movs	r2, r3
 8002832:	2100      	movs	r1, #0
 8002834:	f005 fa67 	bl	8007d06 <memset>
  if(htim->Instance==TIM3)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a27      	ldr	r2, [pc, #156]	; (80028dc <HAL_TIM_MspPostInit+0xbc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d148      	bne.n	80028d4 <HAL_TIM_MspPostInit+0xb4>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <HAL_TIM_MspPostInit+0xc0>)
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <HAL_TIM_MspPostInit+0xc0>)
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	0289      	lsls	r1, r1, #10
 800284c:	430a      	orrs	r2, r1
 800284e:	615a      	str	r2, [r3, #20]
 8002850:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <HAL_TIM_MspPostInit+0xc0>)
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	029b      	lsls	r3, r3, #10
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_TIM_MspPostInit+0xc0>)
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <HAL_TIM_MspPostInit+0xc0>)
 8002864:	2180      	movs	r1, #128	; 0x80
 8002866:	02c9      	lsls	r1, r1, #11
 8002868:	430a      	orrs	r2, r1
 800286a:	615a      	str	r2, [r3, #20]
 800286c:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <HAL_TIM_MspPostInit+0xc0>)
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	02db      	lsls	r3, r3, #11
 8002874:	4013      	ands	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800287a:	2414      	movs	r4, #20
 800287c:	193b      	adds	r3, r7, r4
 800287e:	22c0      	movs	r2, #192	; 0xc0
 8002880:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	193b      	adds	r3, r7, r4
 8002884:	2202      	movs	r2, #2
 8002886:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	193b      	adds	r3, r7, r4
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	193b      	adds	r3, r7, r4
 8002890:	2200      	movs	r2, #0
 8002892:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002894:	193b      	adds	r3, r7, r4
 8002896:	2201      	movs	r2, #1
 8002898:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289a:	193a      	adds	r2, r7, r4
 800289c:	2390      	movs	r3, #144	; 0x90
 800289e:	05db      	lsls	r3, r3, #23
 80028a0:	0011      	movs	r1, r2
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 fe44 	bl	8003530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028a8:	0021      	movs	r1, r4
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2201      	movs	r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	2202      	movs	r2, #2
 80028b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	187b      	adds	r3, r7, r1
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	187b      	adds	r3, r7, r1
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80028c2:	187b      	adds	r3, r7, r1
 80028c4:	2201      	movs	r2, #1
 80028c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c8:	187b      	adds	r3, r7, r1
 80028ca:	4a06      	ldr	r2, [pc, #24]	; (80028e4 <HAL_TIM_MspPostInit+0xc4>)
 80028cc:	0019      	movs	r1, r3
 80028ce:	0010      	movs	r0, r2
 80028d0:	f000 fe2e 	bl	8003530 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b00b      	add	sp, #44	; 0x2c
 80028da:	bd90      	pop	{r4, r7, pc}
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40021000 	.word	0x40021000
 80028e4:	48000400 	.word	0x48000400

080028e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	2314      	movs	r3, #20
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	0018      	movs	r0, r3
 80028f6:	2314      	movs	r3, #20
 80028f8:	001a      	movs	r2, r3
 80028fa:	2100      	movs	r1, #0
 80028fc:	f005 fa03 	bl	8007d06 <memset>
  if(huart->Instance==USART2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1c      	ldr	r2, [pc, #112]	; (8002978 <HAL_UART_MspInit+0x90>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d132      	bne.n	8002970 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800290a:	4b1c      	ldr	r3, [pc, #112]	; (800297c <HAL_UART_MspInit+0x94>)
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_UART_MspInit+0x94>)
 8002910:	2180      	movs	r1, #128	; 0x80
 8002912:	0289      	lsls	r1, r1, #10
 8002914:	430a      	orrs	r2, r1
 8002916:	61da      	str	r2, [r3, #28]
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <HAL_UART_MspInit+0x94>)
 800291a:	69da      	ldr	r2, [r3, #28]
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	029b      	lsls	r3, r3, #10
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_UART_MspInit+0x94>)
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_UART_MspInit+0x94>)
 800292c:	2180      	movs	r1, #128	; 0x80
 800292e:	0289      	lsls	r1, r1, #10
 8002930:	430a      	orrs	r2, r1
 8002932:	615a      	str	r2, [r3, #20]
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_UART_MspInit+0x94>)
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	029b      	lsls	r3, r3, #10
 800293c:	4013      	ands	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002942:	2114      	movs	r1, #20
 8002944:	187b      	adds	r3, r7, r1
 8002946:	220c      	movs	r2, #12
 8002948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	187b      	adds	r3, r7, r1
 800294c:	2202      	movs	r2, #2
 800294e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	187b      	adds	r3, r7, r1
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	187b      	adds	r3, r7, r1
 8002958:	2200      	movs	r2, #0
 800295a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800295c:	187b      	adds	r3, r7, r1
 800295e:	2201      	movs	r2, #1
 8002960:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002962:	187a      	adds	r2, r7, r1
 8002964:	2390      	movs	r3, #144	; 0x90
 8002966:	05db      	lsls	r3, r3, #23
 8002968:	0011      	movs	r1, r2
 800296a:	0018      	movs	r0, r3
 800296c:	f000 fde0 	bl	8003530 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	b00a      	add	sp, #40	; 0x28
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40004400 	.word	0x40004400
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	0019      	movs	r1, r3
 8002996:	2011      	movs	r0, #17
 8002998:	f000 fda4 	bl	80034e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800299c:	2011      	movs	r0, #17
 800299e:	f000 fdb6 	bl	800350e <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_InitTick+0xa4>)
 80029a4:	69da      	ldr	r2, [r3, #28]
 80029a6:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <HAL_InitTick+0xa4>)
 80029a8:	2110      	movs	r1, #16
 80029aa:	430a      	orrs	r2, r1
 80029ac:	61da      	str	r2, [r3, #28]
 80029ae:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_InitTick+0xa4>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	2210      	movs	r2, #16
 80029b4:	4013      	ands	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029ba:	230c      	movs	r3, #12
 80029bc:	18fa      	adds	r2, r7, r3
 80029be:	2310      	movs	r3, #16
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	0011      	movs	r1, r2
 80029c4:	0018      	movs	r0, r3
 80029c6:	f001 fc63 	bl	8004290 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029ca:	f001 fc4b 	bl	8004264 <HAL_RCC_GetPCLK1Freq>
 80029ce:	0003      	movs	r3, r0
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	4914      	ldr	r1, [pc, #80]	; (8002a28 <HAL_InitTick+0xa8>)
 80029d6:	0018      	movs	r0, r3
 80029d8:	f7fd fb96 	bl	8000108 <__udivsi3>
 80029dc:	0003      	movs	r3, r0
 80029de:	3b01      	subs	r3, #1
 80029e0:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <HAL_InitTick+0xac>)
 80029e4:	4a12      	ldr	r2, [pc, #72]	; (8002a30 <HAL_InitTick+0xb0>)
 80029e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80029e8:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_InitTick+0xac>)
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <HAL_InitTick+0xb4>)
 80029ec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <HAL_InitTick+0xac>)
 80029f0:	6a3a      	ldr	r2, [r7, #32]
 80029f2:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 80029f4:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <HAL_InitTick+0xac>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <HAL_InitTick+0xac>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_InitTick+0xac>)
 8002a02:	0018      	movs	r0, r3
 8002a04:	f001 fd6e 	bl	80044e4 <HAL_TIM_Base_Init>
 8002a08:	1e03      	subs	r3, r0, #0
 8002a0a:	d105      	bne.n	8002a18 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <HAL_InitTick+0xac>)
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f001 fd9c 	bl	800454c <HAL_TIM_Base_Start_IT>
 8002a14:	0003      	movs	r3, r0
 8002a16:	e000      	b.n	8002a1a <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
}
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b00a      	add	sp, #40	; 0x28
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	40021000 	.word	0x40021000
 8002a28:	000f4240 	.word	0x000f4240
 8002a2c:	20003188 	.word	0x20003188
 8002a30:	40001000 	.word	0x40001000
 8002a34:	000003e7 	.word	0x000003e7

08002a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a46:	e7fe      	b.n	8002a46 <HardFault_Handler+0x4>

08002a48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <TIM6_DAC_IRQHandler+0x14>)
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f001 fe7a 	bl	8004748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a54:	46c0      	nop			; (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	20003188 	.word	0x20003188

08002a60 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <CEC_CAN_IRQHandler+0x14>)
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 faab 	bl	8002fc2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	20003094 	.word	0x20003094

08002a78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a84:	480d      	ldr	r0, [pc, #52]	; (8002abc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a88:	480d      	ldr	r0, [pc, #52]	; (8002ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a8a:	490e      	ldr	r1, [pc, #56]	; (8002ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ac8 <LoopForever+0xe>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a90:	e002      	b.n	8002a98 <LoopCopyDataInit>

08002a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a96:	3304      	adds	r3, #4

08002a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a9c:	d3f9      	bcc.n	8002a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a9e:	4a0b      	ldr	r2, [pc, #44]	; (8002acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002aa0:	4c0b      	ldr	r4, [pc, #44]	; (8002ad0 <LoopForever+0x16>)
  movs r3, #0
 8002aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aa4:	e001      	b.n	8002aaa <LoopFillZerobss>

08002aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aa8:	3204      	adds	r2, #4

08002aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aac:	d3fb      	bcc.n	8002aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002aae:	f7ff ffe3 	bl	8002a78 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002ab2:	f005 f8fb 	bl	8007cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ab6:	f7ff fbdb 	bl	8002270 <main>

08002aba <LoopForever>:

LoopForever:
    b LoopForever
 8002aba:	e7fe      	b.n	8002aba <LoopForever>
  ldr   r0, =_estack
 8002abc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ac4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002ac8:	08007ebc 	.word	0x08007ebc
  ldr r2, =_sbss
 8002acc:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002ad0:	2000320c 	.word	0x2000320c

08002ad4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ad4:	e7fe      	b.n	8002ad4 <ADC1_COMP_IRQHandler>
	...

08002ad8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002adc:	4b07      	ldr	r3, [pc, #28]	; (8002afc <HAL_Init+0x24>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_Init+0x24>)
 8002ae2:	2110      	movs	r1, #16
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7ff ff49 	bl	8002980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aee:	f7ff fdff 	bl	80026f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	0018      	movs	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	40022000 	.word	0x40022000

08002b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_IncTick+0x1c>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	001a      	movs	r2, r3
 8002b0a:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_IncTick+0x20>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	18d2      	adds	r2, r2, r3
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_IncTick+0x20>)
 8002b12:	601a      	str	r2, [r3, #0]
}
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	200000f4 	.word	0x200000f4
 8002b20:	200031c8 	.word	0x200031c8

08002b24 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  return uwTick;
 8002b28:	4b02      	ldr	r3, [pc, #8]	; (8002b34 <HAL_GetTick+0x10>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	200031c8 	.word	0x200031c8

08002b38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e0f0      	b.n	8002d2c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	5c9b      	ldrb	r3, [r3, r2]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f7ff fded 	bl	8002738 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2102      	movs	r1, #2
 8002b6a:	438a      	bics	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b6e:	f7ff ffd9 	bl	8002b24 <HAL_GetTick>
 8002b72:	0003      	movs	r3, r0
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b76:	e013      	b.n	8002ba0 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b78:	f7ff ffd4 	bl	8002b24 <HAL_GetTick>
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b0a      	cmp	r3, #10
 8002b84:	d90c      	bls.n	8002ba0 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	0292      	lsls	r2, r2, #10
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	2105      	movs	r1, #5
 8002b9a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0c5      	b.n	8002d2c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d1e5      	bne.n	8002b78 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bbc:	f7ff ffb2 	bl	8002b24 <HAL_GetTick>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bc4:	e013      	b.n	8002bee <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bc6:	f7ff ffad 	bl	8002b24 <HAL_GetTick>
 8002bca:	0002      	movs	r2, r0
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b0a      	cmp	r3, #10
 8002bd2:	d90c      	bls.n	8002bee <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	0292      	lsls	r2, r2, #10
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2220      	movs	r2, #32
 8002be6:	2105      	movs	r1, #5
 8002be8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e09e      	b.n	8002d2c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d0e5      	beq.n	8002bc6 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	7e1b      	ldrb	r3, [r3, #24]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d108      	bne.n	8002c14 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2180      	movs	r1, #128	; 0x80
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e007      	b.n	8002c24 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2180      	movs	r1, #128	; 0x80
 8002c20:	438a      	bics	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	7e5b      	ldrb	r3, [r3, #25]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d108      	bne.n	8002c3e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2140      	movs	r1, #64	; 0x40
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	e007      	b.n	8002c4e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2140      	movs	r1, #64	; 0x40
 8002c4a:	438a      	bics	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7e9b      	ldrb	r3, [r3, #26]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d108      	bne.n	8002c68 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2120      	movs	r1, #32
 8002c62:	430a      	orrs	r2, r1
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	e007      	b.n	8002c78 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2120      	movs	r1, #32
 8002c74:	438a      	bics	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7edb      	ldrb	r3, [r3, #27]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d108      	bne.n	8002c92 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2110      	movs	r1, #16
 8002c8c:	438a      	bics	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e007      	b.n	8002ca2 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2110      	movs	r1, #16
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	7f1b      	ldrb	r3, [r3, #28]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d108      	bne.n	8002cbc <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2108      	movs	r1, #8
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	e007      	b.n	8002ccc <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2108      	movs	r1, #8
 8002cc8:	438a      	bics	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7f5b      	ldrb	r3, [r3, #29]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d108      	bne.n	8002ce6 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2104      	movs	r1, #4
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	e007      	b.n	8002cf6 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2104      	movs	r1, #4
 8002cf2:	438a      	bics	r2, r1
 8002cf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	0011      	movs	r1, r2
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	1e5a      	subs	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2220      	movs	r2, #32
 8002d26:	2101      	movs	r1, #1
 8002d28:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b004      	add	sp, #16
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d42:	2017      	movs	r0, #23
 8002d44:	183b      	adds	r3, r7, r0
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	2120      	movs	r1, #32
 8002d4a:	5c52      	ldrb	r2, [r2, r1]
 8002d4c:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d4e:	183b      	adds	r3, r7, r0
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d005      	beq.n	8002d62 <HAL_CAN_GetRxMessage+0x2e>
 8002d56:	2317      	movs	r3, #23
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d000      	beq.n	8002d62 <HAL_CAN_GetRxMessage+0x2e>
 8002d60:	e0f8      	b.n	8002f54 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10e      	bne.n	8002d86 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2203      	movs	r2, #3
 8002d70:	4013      	ands	r3, r2
 8002d72:	d117      	bne.n	8002da4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	2280      	movs	r2, #128	; 0x80
 8002d7a:	0392      	lsls	r2, r2, #14
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e0ee      	b.n	8002f64 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d108      	bne.n	8002da4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	0392      	lsls	r2, r2, #14
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0df      	b.n	8002f64 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	321b      	adds	r2, #27
 8002dac:	0112      	lsls	r2, r2, #4
 8002dae:	58d3      	ldr	r3, [r2, r3]
 8002db0:	2204      	movs	r2, #4
 8002db2:	401a      	ands	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	321b      	adds	r2, #27
 8002dc8:	0112      	lsls	r2, r2, #4
 8002dca:	58d3      	ldr	r3, [r2, r3]
 8002dcc:	0d5b      	lsrs	r3, r3, #21
 8002dce:	055b      	lsls	r3, r3, #21
 8002dd0:	0d5a      	lsrs	r2, r3, #21
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	e00a      	b.n	8002dee <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	321b      	adds	r2, #27
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	58d3      	ldr	r3, [r2, r3]
 8002de4:	08db      	lsrs	r3, r3, #3
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	08da      	lsrs	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	321b      	adds	r2, #27
 8002df6:	0112      	lsls	r2, r2, #4
 8002df8:	58d3      	ldr	r3, [r2, r3]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	401a      	ands	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	331b      	adds	r3, #27
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	18d3      	adds	r3, r2, r3
 8002e0e:	3304      	adds	r3, #4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	220f      	movs	r2, #15
 8002e14:	401a      	ands	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	331b      	adds	r3, #27
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	18d3      	adds	r3, r2, r3
 8002e26:	3304      	adds	r3, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0a1b      	lsrs	r3, r3, #8
 8002e2c:	22ff      	movs	r2, #255	; 0xff
 8002e2e:	401a      	ands	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	331b      	adds	r3, #27
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	18d3      	adds	r3, r2, r3
 8002e40:	3304      	adds	r3, #4
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	041b      	lsls	r3, r3, #16
 8002e48:	0c1a      	lsrs	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6819      	ldr	r1, [r3, #0]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	23dc      	movs	r3, #220	; 0xdc
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	188a      	adds	r2, r1, r2
 8002e5c:	18d3      	adds	r3, r2, r3
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6819      	ldr	r1, [r3, #0]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	23dc      	movs	r3, #220	; 0xdc
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	0112      	lsls	r2, r2, #4
 8002e72:	188a      	adds	r2, r1, r2
 8002e74:	18d3      	adds	r3, r2, r3
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0a1a      	lsrs	r2, r3, #8
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6819      	ldr	r1, [r3, #0]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	23dc      	movs	r3, #220	; 0xdc
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	0112      	lsls	r2, r2, #4
 8002e8e:	188a      	adds	r2, r1, r2
 8002e90:	18d3      	adds	r3, r2, r3
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	0c1a      	lsrs	r2, r3, #16
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	3302      	adds	r3, #2
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6819      	ldr	r1, [r3, #0]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	23dc      	movs	r3, #220	; 0xdc
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	0112      	lsls	r2, r2, #4
 8002eaa:	188a      	adds	r2, r1, r2
 8002eac:	18d3      	adds	r3, r2, r3
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0e1a      	lsrs	r2, r3, #24
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	3303      	adds	r3, #3
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6819      	ldr	r1, [r3, #0]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	23de      	movs	r3, #222	; 0xde
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	0112      	lsls	r2, r2, #4
 8002ec6:	188a      	adds	r2, r1, r2
 8002ec8:	18d3      	adds	r3, r2, r3
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6819      	ldr	r1, [r3, #0]
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	23de      	movs	r3, #222	; 0xde
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	0112      	lsls	r2, r2, #4
 8002ee0:	188a      	adds	r2, r1, r2
 8002ee2:	18d3      	adds	r3, r2, r3
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	0a1a      	lsrs	r2, r3, #8
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	3305      	adds	r3, #5
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6819      	ldr	r1, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	23de      	movs	r3, #222	; 0xde
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	0112      	lsls	r2, r2, #4
 8002efc:	188a      	adds	r2, r1, r2
 8002efe:	18d3      	adds	r3, r2, r3
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	0c1a      	lsrs	r2, r3, #16
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	3306      	adds	r3, #6
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6819      	ldr	r1, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	23de      	movs	r3, #222	; 0xde
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	0112      	lsls	r2, r2, #4
 8002f18:	188a      	adds	r2, r1, r2
 8002f1a:	18d3      	adds	r3, r2, r3
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	0e1a      	lsrs	r2, r3, #24
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	3307      	adds	r3, #7
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d108      	bne.n	8002f40 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2120      	movs	r1, #32
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	60da      	str	r2, [r3, #12]
 8002f3e:	e007      	b.n	8002f50 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2120      	movs	r1, #32
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e007      	b.n	8002f64 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	2280      	movs	r2, #128	; 0x80
 8002f5a:	02d2      	lsls	r2, r2, #11
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
  }
}
 8002f64:	0018      	movs	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b006      	add	sp, #24
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f7a:	200b      	movs	r0, #11
 8002f7c:	183b      	adds	r3, r7, r0
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	2120      	movs	r1, #32
 8002f82:	5c52      	ldrb	r2, [r2, r1]
 8002f84:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f86:	183b      	adds	r3, r7, r0
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d004      	beq.n	8002f98 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8002f8e:	230b      	movs	r3, #11
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d10f      	bne.n	8002fb8 <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	e005      	b.n	8002fb8 <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b004      	add	sp, #16
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b08a      	sub	sp, #40	; 0x28
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	2201      	movs	r2, #1
 8003002:	4013      	ands	r3, r2
 8003004:	d100      	bne.n	8003008 <HAL_CAN_IRQHandler+0x46>
 8003006:	e084      	b.n	8003112 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2201      	movs	r2, #1
 800300c:	4013      	ands	r3, r2
 800300e:	d024      	beq.n	800305a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2201      	movs	r2, #1
 8003016:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2202      	movs	r2, #2
 800301c:	4013      	ands	r3, r2
 800301e:	d004      	beq.n	800302a <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	0018      	movs	r0, r3
 8003024:	f000 f97e 	bl	8003324 <HAL_CAN_TxMailbox0CompleteCallback>
 8003028:	e017      	b.n	800305a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2204      	movs	r2, #4
 800302e:	4013      	ands	r3, r2
 8003030:	d005      	beq.n	800303e <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	2280      	movs	r2, #128	; 0x80
 8003036:	0112      	lsls	r2, r2, #4
 8003038:	4313      	orrs	r3, r2
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
 800303c:	e00d      	b.n	800305a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2208      	movs	r2, #8
 8003042:	4013      	ands	r3, r2
 8003044:	d005      	beq.n	8003052 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	2280      	movs	r2, #128	; 0x80
 800304a:	0152      	lsls	r2, r2, #5
 800304c:	4313      	orrs	r3, r2
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
 8003050:	e003      	b.n	800305a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	0018      	movs	r0, r3
 8003056:	f000 f97d 	bl	8003354 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4013      	ands	r3, r2
 8003062:	d028      	beq.n	80030b6 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2280      	movs	r2, #128	; 0x80
 800306a:	0052      	lsls	r2, r2, #1
 800306c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4013      	ands	r3, r2
 8003076:	d004      	beq.n	8003082 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	0018      	movs	r0, r3
 800307c:	f000 f95a 	bl	8003334 <HAL_CAN_TxMailbox1CompleteCallback>
 8003080:	e019      	b.n	80030b6 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4013      	ands	r3, r2
 800308a:	d005      	beq.n	8003098 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	2280      	movs	r2, #128	; 0x80
 8003090:	0192      	lsls	r2, r2, #6
 8003092:	4313      	orrs	r3, r2
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
 8003096:	e00e      	b.n	80030b6 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	4013      	ands	r3, r2
 80030a0:	d005      	beq.n	80030ae <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	2280      	movs	r2, #128	; 0x80
 80030a6:	01d2      	lsls	r2, r2, #7
 80030a8:	4313      	orrs	r3, r2
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
 80030ac:	e003      	b.n	80030b6 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f000 f957 	bl	8003364 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	025b      	lsls	r3, r3, #9
 80030bc:	4013      	ands	r3, r2
 80030be:	d028      	beq.n	8003112 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2280      	movs	r2, #128	; 0x80
 80030c6:	0252      	lsls	r2, r2, #9
 80030c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	029b      	lsls	r3, r3, #10
 80030d0:	4013      	ands	r3, r2
 80030d2:	d004      	beq.n	80030de <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 f934 	bl	8003344 <HAL_CAN_TxMailbox2CompleteCallback>
 80030dc:	e019      	b.n	8003112 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	02db      	lsls	r3, r3, #11
 80030e4:	4013      	ands	r3, r2
 80030e6:	d005      	beq.n	80030f4 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	2280      	movs	r2, #128	; 0x80
 80030ec:	0212      	lsls	r2, r2, #8
 80030ee:	4313      	orrs	r3, r2
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
 80030f2:	e00e      	b.n	8003112 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	031b      	lsls	r3, r3, #12
 80030fa:	4013      	ands	r3, r2
 80030fc:	d005      	beq.n	800310a <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	2280      	movs	r2, #128	; 0x80
 8003102:	0252      	lsls	r2, r2, #9
 8003104:	4313      	orrs	r3, r2
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
 8003108:	e003      	b.n	8003112 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	0018      	movs	r0, r3
 800310e:	f000 f931 	bl	8003374 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	2208      	movs	r2, #8
 8003116:	4013      	ands	r3, r2
 8003118:	d00c      	beq.n	8003134 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2210      	movs	r2, #16
 800311e:	4013      	ands	r3, r2
 8003120:	d008      	beq.n	8003134 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	2280      	movs	r2, #128	; 0x80
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	4313      	orrs	r3, r2
 800312a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2210      	movs	r2, #16
 8003132:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	2204      	movs	r2, #4
 8003138:	4013      	ands	r3, r2
 800313a:	d00b      	beq.n	8003154 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2208      	movs	r2, #8
 8003140:	4013      	ands	r3, r2
 8003142:	d007      	beq.n	8003154 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2208      	movs	r2, #8
 800314a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	0018      	movs	r0, r3
 8003150:	f000 f918 	bl	8003384 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	2202      	movs	r2, #2
 8003158:	4013      	ands	r3, r2
 800315a:	d009      	beq.n	8003170 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2203      	movs	r2, #3
 8003164:	4013      	ands	r3, r2
 8003166:	d003      	beq.n	8003170 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	0018      	movs	r0, r3
 800316c:	f7ff f818 	bl	80021a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	2240      	movs	r2, #64	; 0x40
 8003174:	4013      	ands	r3, r2
 8003176:	d00c      	beq.n	8003192 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	2210      	movs	r2, #16
 800317c:	4013      	ands	r3, r2
 800317e:	d008      	beq.n	8003192 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	2280      	movs	r2, #128	; 0x80
 8003184:	00d2      	lsls	r2, r2, #3
 8003186:	4313      	orrs	r3, r2
 8003188:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2210      	movs	r2, #16
 8003190:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	2220      	movs	r2, #32
 8003196:	4013      	ands	r3, r2
 8003198:	d00b      	beq.n	80031b2 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2208      	movs	r2, #8
 800319e:	4013      	ands	r3, r2
 80031a0:	d007      	beq.n	80031b2 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2208      	movs	r2, #8
 80031a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f000 f8f1 	bl	8003394 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	2210      	movs	r2, #16
 80031b6:	4013      	ands	r3, r2
 80031b8:	d009      	beq.n	80031ce <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2203      	movs	r2, #3
 80031c2:	4013      	ands	r3, r2
 80031c4:	d003      	beq.n	80031ce <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7fe fff6 	bl	80021ba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80031ce:	6a3a      	ldr	r2, [r7, #32]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	029b      	lsls	r3, r3, #10
 80031d4:	4013      	ands	r3, r2
 80031d6:	d00b      	beq.n	80031f0 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	2210      	movs	r2, #16
 80031dc:	4013      	ands	r3, r2
 80031de:	d007      	beq.n	80031f0 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2210      	movs	r2, #16
 80031e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f000 f8da 	bl	80033a4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80031f0:	6a3a      	ldr	r2, [r7, #32]
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	025b      	lsls	r3, r3, #9
 80031f6:	4013      	ands	r3, r2
 80031f8:	d00b      	beq.n	8003212 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	2208      	movs	r2, #8
 80031fe:	4013      	ands	r3, r2
 8003200:	d007      	beq.n	8003212 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2208      	movs	r2, #8
 8003208:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	0018      	movs	r0, r3
 800320e:	f000 f8d1 	bl	80033b4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003212:	6a3a      	ldr	r2, [r7, #32]
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	4013      	ands	r3, r2
 800321a:	d100      	bne.n	800321e <HAL_CAN_IRQHandler+0x25c>
 800321c:	e071      	b.n	8003302 <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	2204      	movs	r2, #4
 8003222:	4013      	ands	r3, r2
 8003224:	d100      	bne.n	8003228 <HAL_CAN_IRQHandler+0x266>
 8003226:	e068      	b.n	80032fa <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003228:	6a3a      	ldr	r2, [r7, #32]
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4013      	ands	r3, r2
 8003230:	d007      	beq.n	8003242 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003238:	d003      	beq.n	8003242 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	2201      	movs	r2, #1
 800323e:	4313      	orrs	r3, r2
 8003240:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003242:	6a3a      	ldr	r2, [r7, #32]
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4013      	ands	r3, r2
 800324a:	d007      	beq.n	800325c <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2202      	movs	r2, #2
 8003250:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003252:	d003      	beq.n	800325c <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	2202      	movs	r2, #2
 8003258:	4313      	orrs	r3, r2
 800325a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800325c:	6a3a      	ldr	r2, [r7, #32]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4013      	ands	r3, r2
 8003264:	d007      	beq.n	8003276 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2204      	movs	r2, #4
 800326a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800326c:	d003      	beq.n	8003276 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	2204      	movs	r2, #4
 8003272:	4313      	orrs	r3, r2
 8003274:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003276:	6a3a      	ldr	r2, [r7, #32]
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	4013      	ands	r3, r2
 800327e:	d03c      	beq.n	80032fa <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2270      	movs	r2, #112	; 0x70
 8003284:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003286:	d038      	beq.n	80032fa <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2270      	movs	r2, #112	; 0x70
 800328c:	4013      	ands	r3, r2
 800328e:	2b30      	cmp	r3, #48	; 0x30
 8003290:	d016      	beq.n	80032c0 <HAL_CAN_IRQHandler+0x2fe>
 8003292:	d804      	bhi.n	800329e <HAL_CAN_IRQHandler+0x2dc>
 8003294:	2b10      	cmp	r3, #16
 8003296:	d009      	beq.n	80032ac <HAL_CAN_IRQHandler+0x2ea>
 8003298:	2b20      	cmp	r3, #32
 800329a:	d00c      	beq.n	80032b6 <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800329c:	e025      	b.n	80032ea <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 800329e:	2b50      	cmp	r3, #80	; 0x50
 80032a0:	d018      	beq.n	80032d4 <HAL_CAN_IRQHandler+0x312>
 80032a2:	2b60      	cmp	r3, #96	; 0x60
 80032a4:	d01b      	beq.n	80032de <HAL_CAN_IRQHandler+0x31c>
 80032a6:	2b40      	cmp	r3, #64	; 0x40
 80032a8:	d00f      	beq.n	80032ca <HAL_CAN_IRQHandler+0x308>
            break;
 80032aa:	e01e      	b.n	80032ea <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	2208      	movs	r2, #8
 80032b0:	4313      	orrs	r3, r2
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032b4:	e019      	b.n	80032ea <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	2210      	movs	r2, #16
 80032ba:	4313      	orrs	r3, r2
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032be:	e014      	b.n	80032ea <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	2220      	movs	r2, #32
 80032c4:	4313      	orrs	r3, r2
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032c8:	e00f      	b.n	80032ea <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	2240      	movs	r2, #64	; 0x40
 80032ce:	4313      	orrs	r3, r2
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032d2:	e00a      	b.n	80032ea <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	4313      	orrs	r3, r2
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032dc:	e005      	b.n	80032ea <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	2280      	movs	r2, #128	; 0x80
 80032e2:	0052      	lsls	r2, r2, #1
 80032e4:	4313      	orrs	r3, r2
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032e8:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2170      	movs	r1, #112	; 0x70
 80032f6:	438a      	bics	r2, r1
 80032f8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2204      	movs	r2, #4
 8003300:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	0018      	movs	r0, r3
 8003318:	f000 f854 	bl	80033c4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800331c:	46c0      	nop			; (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	b00a      	add	sp, #40	; 0x28
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	b002      	add	sp, #8
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	b002      	add	sp, #8
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	b002      	add	sp, #8
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b002      	add	sp, #8
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b002      	add	sp, #8
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80033bc:	46c0      	nop			; (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	b002      	add	sp, #8
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b002      	add	sp, #8
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	0002      	movs	r2, r0
 80033dc:	1dfb      	adds	r3, r7, #7
 80033de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033e0:	1dfb      	adds	r3, r7, #7
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b7f      	cmp	r3, #127	; 0x7f
 80033e6:	d809      	bhi.n	80033fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e8:	1dfb      	adds	r3, r7, #7
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	001a      	movs	r2, r3
 80033ee:	231f      	movs	r3, #31
 80033f0:	401a      	ands	r2, r3
 80033f2:	4b04      	ldr	r3, [pc, #16]	; (8003404 <__NVIC_EnableIRQ+0x30>)
 80033f4:	2101      	movs	r1, #1
 80033f6:	4091      	lsls	r1, r2
 80033f8:	000a      	movs	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]
  }
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	b002      	add	sp, #8
 8003402:	bd80      	pop	{r7, pc}
 8003404:	e000e100 	.word	0xe000e100

08003408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	0002      	movs	r2, r0
 8003410:	6039      	str	r1, [r7, #0]
 8003412:	1dfb      	adds	r3, r7, #7
 8003414:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003416:	1dfb      	adds	r3, r7, #7
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b7f      	cmp	r3, #127	; 0x7f
 800341c:	d828      	bhi.n	8003470 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800341e:	4a2f      	ldr	r2, [pc, #188]	; (80034dc <__NVIC_SetPriority+0xd4>)
 8003420:	1dfb      	adds	r3, r7, #7
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	b25b      	sxtb	r3, r3
 8003426:	089b      	lsrs	r3, r3, #2
 8003428:	33c0      	adds	r3, #192	; 0xc0
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	589b      	ldr	r3, [r3, r2]
 800342e:	1dfa      	adds	r2, r7, #7
 8003430:	7812      	ldrb	r2, [r2, #0]
 8003432:	0011      	movs	r1, r2
 8003434:	2203      	movs	r2, #3
 8003436:	400a      	ands	r2, r1
 8003438:	00d2      	lsls	r2, r2, #3
 800343a:	21ff      	movs	r1, #255	; 0xff
 800343c:	4091      	lsls	r1, r2
 800343e:	000a      	movs	r2, r1
 8003440:	43d2      	mvns	r2, r2
 8003442:	401a      	ands	r2, r3
 8003444:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	22ff      	movs	r2, #255	; 0xff
 800344c:	401a      	ands	r2, r3
 800344e:	1dfb      	adds	r3, r7, #7
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	0018      	movs	r0, r3
 8003454:	2303      	movs	r3, #3
 8003456:	4003      	ands	r3, r0
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800345c:	481f      	ldr	r0, [pc, #124]	; (80034dc <__NVIC_SetPriority+0xd4>)
 800345e:	1dfb      	adds	r3, r7, #7
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	b25b      	sxtb	r3, r3
 8003464:	089b      	lsrs	r3, r3, #2
 8003466:	430a      	orrs	r2, r1
 8003468:	33c0      	adds	r3, #192	; 0xc0
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800346e:	e031      	b.n	80034d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003470:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <__NVIC_SetPriority+0xd8>)
 8003472:	1dfb      	adds	r3, r7, #7
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	0019      	movs	r1, r3
 8003478:	230f      	movs	r3, #15
 800347a:	400b      	ands	r3, r1
 800347c:	3b08      	subs	r3, #8
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	3306      	adds	r3, #6
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	18d3      	adds	r3, r2, r3
 8003486:	3304      	adds	r3, #4
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	1dfa      	adds	r2, r7, #7
 800348c:	7812      	ldrb	r2, [r2, #0]
 800348e:	0011      	movs	r1, r2
 8003490:	2203      	movs	r2, #3
 8003492:	400a      	ands	r2, r1
 8003494:	00d2      	lsls	r2, r2, #3
 8003496:	21ff      	movs	r1, #255	; 0xff
 8003498:	4091      	lsls	r1, r2
 800349a:	000a      	movs	r2, r1
 800349c:	43d2      	mvns	r2, r2
 800349e:	401a      	ands	r2, r3
 80034a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	019b      	lsls	r3, r3, #6
 80034a6:	22ff      	movs	r2, #255	; 0xff
 80034a8:	401a      	ands	r2, r3
 80034aa:	1dfb      	adds	r3, r7, #7
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	0018      	movs	r0, r3
 80034b0:	2303      	movs	r3, #3
 80034b2:	4003      	ands	r3, r0
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b8:	4809      	ldr	r0, [pc, #36]	; (80034e0 <__NVIC_SetPriority+0xd8>)
 80034ba:	1dfb      	adds	r3, r7, #7
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	001c      	movs	r4, r3
 80034c0:	230f      	movs	r3, #15
 80034c2:	4023      	ands	r3, r4
 80034c4:	3b08      	subs	r3, #8
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	430a      	orrs	r2, r1
 80034ca:	3306      	adds	r3, #6
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	18c3      	adds	r3, r0, r3
 80034d0:	3304      	adds	r3, #4
 80034d2:	601a      	str	r2, [r3, #0]
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b003      	add	sp, #12
 80034da:	bd90      	pop	{r4, r7, pc}
 80034dc:	e000e100 	.word	0xe000e100
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	210f      	movs	r1, #15
 80034f0:	187b      	adds	r3, r7, r1
 80034f2:	1c02      	adds	r2, r0, #0
 80034f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	187b      	adds	r3, r7, r1
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b25b      	sxtb	r3, r3
 80034fe:	0011      	movs	r1, r2
 8003500:	0018      	movs	r0, r3
 8003502:	f7ff ff81 	bl	8003408 <__NVIC_SetPriority>
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b004      	add	sp, #16
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	0002      	movs	r2, r0
 8003516:	1dfb      	adds	r3, r7, #7
 8003518:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800351a:	1dfb      	adds	r3, r7, #7
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	b25b      	sxtb	r3, r3
 8003520:	0018      	movs	r0, r3
 8003522:	f7ff ff57 	bl	80033d4 <__NVIC_EnableIRQ>
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	b002      	add	sp, #8
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353e:	e155      	b.n	80037ec <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2101      	movs	r1, #1
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4091      	lsls	r1, r2
 800354a:	000a      	movs	r2, r1
 800354c:	4013      	ands	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d100      	bne.n	8003558 <HAL_GPIO_Init+0x28>
 8003556:	e146      	b.n	80037e6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_Init+0x38>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b12      	cmp	r3, #18
 8003566:	d123      	bne.n	80035b0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	08da      	lsrs	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3208      	adds	r2, #8
 8003570:	0092      	lsls	r2, r2, #2
 8003572:	58d3      	ldr	r3, [r2, r3]
 8003574:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2207      	movs	r2, #7
 800357a:	4013      	ands	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	220f      	movs	r2, #15
 8003580:	409a      	lsls	r2, r3
 8003582:	0013      	movs	r3, r2
 8003584:	43da      	mvns	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2107      	movs	r1, #7
 8003594:	400b      	ands	r3, r1
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	409a      	lsls	r2, r3
 800359a:	0013      	movs	r3, r2
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	08da      	lsrs	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3208      	adds	r2, #8
 80035aa:	0092      	lsls	r2, r2, #2
 80035ac:	6939      	ldr	r1, [r7, #16]
 80035ae:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	409a      	lsls	r2, r3
 80035be:	0013      	movs	r3, r2
 80035c0:	43da      	mvns	r2, r3
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2203      	movs	r2, #3
 80035ce:	401a      	ands	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	409a      	lsls	r2, r3
 80035d6:	0013      	movs	r3, r2
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d00b      	beq.n	8003604 <HAL_GPIO_Init+0xd4>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d007      	beq.n	8003604 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035f8:	2b11      	cmp	r3, #17
 80035fa:	d003      	beq.n	8003604 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b12      	cmp	r3, #18
 8003602:	d130      	bne.n	8003666 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	2203      	movs	r2, #3
 8003610:	409a      	lsls	r2, r3
 8003612:	0013      	movs	r3, r2
 8003614:	43da      	mvns	r2, r3
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	409a      	lsls	r2, r3
 8003626:	0013      	movs	r3, r2
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800363a:	2201      	movs	r2, #1
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	409a      	lsls	r2, r3
 8003640:	0013      	movs	r3, r2
 8003642:	43da      	mvns	r2, r3
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4013      	ands	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	091b      	lsrs	r3, r3, #4
 8003650:	2201      	movs	r2, #1
 8003652:	401a      	ands	r2, r3
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	409a      	lsls	r2, r3
 8003658:	0013      	movs	r3, r2
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	2203      	movs	r2, #3
 8003672:	409a      	lsls	r2, r3
 8003674:	0013      	movs	r3, r2
 8003676:	43da      	mvns	r2, r3
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	409a      	lsls	r2, r3
 8003688:	0013      	movs	r3, r2
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	055b      	lsls	r3, r3, #21
 800369e:	4013      	ands	r3, r2
 80036a0:	d100      	bne.n	80036a4 <HAL_GPIO_Init+0x174>
 80036a2:	e0a0      	b.n	80037e6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a4:	4b57      	ldr	r3, [pc, #348]	; (8003804 <HAL_GPIO_Init+0x2d4>)
 80036a6:	699a      	ldr	r2, [r3, #24]
 80036a8:	4b56      	ldr	r3, [pc, #344]	; (8003804 <HAL_GPIO_Init+0x2d4>)
 80036aa:	2101      	movs	r1, #1
 80036ac:	430a      	orrs	r2, r1
 80036ae:	619a      	str	r2, [r3, #24]
 80036b0:	4b54      	ldr	r3, [pc, #336]	; (8003804 <HAL_GPIO_Init+0x2d4>)
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	2201      	movs	r2, #1
 80036b6:	4013      	ands	r3, r2
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036bc:	4a52      	ldr	r2, [pc, #328]	; (8003808 <HAL_GPIO_Init+0x2d8>)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	089b      	lsrs	r3, r3, #2
 80036c2:	3302      	adds	r3, #2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	589b      	ldr	r3, [r3, r2]
 80036c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2203      	movs	r2, #3
 80036ce:	4013      	ands	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	220f      	movs	r2, #15
 80036d4:	409a      	lsls	r2, r3
 80036d6:	0013      	movs	r3, r2
 80036d8:	43da      	mvns	r2, r3
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	2390      	movs	r3, #144	; 0x90
 80036e4:	05db      	lsls	r3, r3, #23
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d019      	beq.n	800371e <HAL_GPIO_Init+0x1ee>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a47      	ldr	r2, [pc, #284]	; (800380c <HAL_GPIO_Init+0x2dc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d013      	beq.n	800371a <HAL_GPIO_Init+0x1ea>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a46      	ldr	r2, [pc, #280]	; (8003810 <HAL_GPIO_Init+0x2e0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00d      	beq.n	8003716 <HAL_GPIO_Init+0x1e6>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a45      	ldr	r2, [pc, #276]	; (8003814 <HAL_GPIO_Init+0x2e4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d007      	beq.n	8003712 <HAL_GPIO_Init+0x1e2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a44      	ldr	r2, [pc, #272]	; (8003818 <HAL_GPIO_Init+0x2e8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <HAL_GPIO_Init+0x1de>
 800370a:	2304      	movs	r3, #4
 800370c:	e008      	b.n	8003720 <HAL_GPIO_Init+0x1f0>
 800370e:	2305      	movs	r3, #5
 8003710:	e006      	b.n	8003720 <HAL_GPIO_Init+0x1f0>
 8003712:	2303      	movs	r3, #3
 8003714:	e004      	b.n	8003720 <HAL_GPIO_Init+0x1f0>
 8003716:	2302      	movs	r3, #2
 8003718:	e002      	b.n	8003720 <HAL_GPIO_Init+0x1f0>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <HAL_GPIO_Init+0x1f0>
 800371e:	2300      	movs	r3, #0
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	2103      	movs	r1, #3
 8003724:	400a      	ands	r2, r1
 8003726:	0092      	lsls	r2, r2, #2
 8003728:	4093      	lsls	r3, r2
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003730:	4935      	ldr	r1, [pc, #212]	; (8003808 <HAL_GPIO_Init+0x2d8>)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	089b      	lsrs	r3, r3, #2
 8003736:	3302      	adds	r3, #2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800373e:	4b37      	ldr	r3, [pc, #220]	; (800381c <HAL_GPIO_Init+0x2ec>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	43da      	mvns	r2, r3
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4013      	ands	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	025b      	lsls	r3, r3, #9
 8003756:	4013      	ands	r3, r2
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003762:	4b2e      	ldr	r3, [pc, #184]	; (800381c <HAL_GPIO_Init+0x2ec>)
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003768:	4b2c      	ldr	r3, [pc, #176]	; (800381c <HAL_GPIO_Init+0x2ec>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	43da      	mvns	r2, r3
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4013      	ands	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	029b      	lsls	r3, r3, #10
 8003780:	4013      	ands	r3, r2
 8003782:	d003      	beq.n	800378c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800378c:	4b23      	ldr	r3, [pc, #140]	; (800381c <HAL_GPIO_Init+0x2ec>)
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003792:	4b22      	ldr	r3, [pc, #136]	; (800381c <HAL_GPIO_Init+0x2ec>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	43da      	mvns	r2, r3
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4013      	ands	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	035b      	lsls	r3, r3, #13
 80037aa:	4013      	ands	r3, r2
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037b6:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_GPIO_Init+0x2ec>)
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80037bc:	4b17      	ldr	r3, [pc, #92]	; (800381c <HAL_GPIO_Init+0x2ec>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	43da      	mvns	r2, r3
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	2380      	movs	r3, #128	; 0x80
 80037d2:	039b      	lsls	r3, r3, #14
 80037d4:	4013      	ands	r3, r2
 80037d6:	d003      	beq.n	80037e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <HAL_GPIO_Init+0x2ec>)
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	3301      	adds	r3, #1
 80037ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	40da      	lsrs	r2, r3
 80037f4:	1e13      	subs	r3, r2, #0
 80037f6:	d000      	beq.n	80037fa <HAL_GPIO_Init+0x2ca>
 80037f8:	e6a2      	b.n	8003540 <HAL_GPIO_Init+0x10>
  } 
}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b006      	add	sp, #24
 8003800:	bd80      	pop	{r7, pc}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	40021000 	.word	0x40021000
 8003808:	40010000 	.word	0x40010000
 800380c:	48000400 	.word	0x48000400
 8003810:	48000800 	.word	0x48000800
 8003814:	48000c00 	.word	0x48000c00
 8003818:	48001000 	.word	0x48001000
 800381c:	40010400 	.word	0x40010400

08003820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	000a      	movs	r2, r1
 800382a:	1cbb      	adds	r3, r7, #2
 800382c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	1cba      	adds	r2, r7, #2
 8003834:	8812      	ldrh	r2, [r2, #0]
 8003836:	4013      	ands	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800383a:	230f      	movs	r3, #15
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	e003      	b.n	800384c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003844:	230f      	movs	r3, #15
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800384c:	230f      	movs	r3, #15
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	781b      	ldrb	r3, [r3, #0]
  }
 8003852:	0018      	movs	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	b004      	add	sp, #16
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	0008      	movs	r0, r1
 8003864:	0011      	movs	r1, r2
 8003866:	1cbb      	adds	r3, r7, #2
 8003868:	1c02      	adds	r2, r0, #0
 800386a:	801a      	strh	r2, [r3, #0]
 800386c:	1c7b      	adds	r3, r7, #1
 800386e:	1c0a      	adds	r2, r1, #0
 8003870:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003872:	1c7b      	adds	r3, r7, #1
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d004      	beq.n	8003884 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800387a:	1cbb      	adds	r3, r7, #2
 800387c:	881a      	ldrh	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003882:	e003      	b.n	800388c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003884:	1cbb      	adds	r3, r7, #2
 8003886:	881a      	ldrh	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	b002      	add	sp, #8
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f000 fb76 	bl	8003f94 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2201      	movs	r2, #1
 80038ae:	4013      	ands	r3, r2
 80038b0:	d100      	bne.n	80038b4 <HAL_RCC_OscConfig+0x20>
 80038b2:	e08e      	b.n	80039d2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038b4:	4bc5      	ldr	r3, [pc, #788]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	220c      	movs	r2, #12
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d00e      	beq.n	80038de <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038c0:	4bc2      	ldr	r3, [pc, #776]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	220c      	movs	r2, #12
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d117      	bne.n	80038fc <HAL_RCC_OscConfig+0x68>
 80038cc:	4bbf      	ldr	r3, [pc, #764]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	23c0      	movs	r3, #192	; 0xc0
 80038d2:	025b      	lsls	r3, r3, #9
 80038d4:	401a      	ands	r2, r3
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	025b      	lsls	r3, r3, #9
 80038da:	429a      	cmp	r2, r3
 80038dc:	d10e      	bne.n	80038fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038de:	4bbb      	ldr	r3, [pc, #748]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	029b      	lsls	r3, r3, #10
 80038e6:	4013      	ands	r3, r2
 80038e8:	d100      	bne.n	80038ec <HAL_RCC_OscConfig+0x58>
 80038ea:	e071      	b.n	80039d0 <HAL_RCC_OscConfig+0x13c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d000      	beq.n	80038f6 <HAL_RCC_OscConfig+0x62>
 80038f4:	e06c      	b.n	80039d0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f000 fb4c 	bl	8003f94 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d107      	bne.n	8003914 <HAL_RCC_OscConfig+0x80>
 8003904:	4bb1      	ldr	r3, [pc, #708]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4bb0      	ldr	r3, [pc, #704]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800390a:	2180      	movs	r1, #128	; 0x80
 800390c:	0249      	lsls	r1, r1, #9
 800390e:	430a      	orrs	r2, r1
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e02f      	b.n	8003974 <HAL_RCC_OscConfig+0xe0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10c      	bne.n	8003936 <HAL_RCC_OscConfig+0xa2>
 800391c:	4bab      	ldr	r3, [pc, #684]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4baa      	ldr	r3, [pc, #680]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003922:	49ab      	ldr	r1, [pc, #684]	; (8003bd0 <HAL_RCC_OscConfig+0x33c>)
 8003924:	400a      	ands	r2, r1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	4ba8      	ldr	r3, [pc, #672]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4ba7      	ldr	r3, [pc, #668]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800392e:	49a9      	ldr	r1, [pc, #676]	; (8003bd4 <HAL_RCC_OscConfig+0x340>)
 8003930:	400a      	ands	r2, r1
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e01e      	b.n	8003974 <HAL_RCC_OscConfig+0xe0>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d10e      	bne.n	800395c <HAL_RCC_OscConfig+0xc8>
 800393e:	4ba3      	ldr	r3, [pc, #652]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4ba2      	ldr	r3, [pc, #648]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003944:	2180      	movs	r1, #128	; 0x80
 8003946:	02c9      	lsls	r1, r1, #11
 8003948:	430a      	orrs	r2, r1
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	4b9f      	ldr	r3, [pc, #636]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4b9e      	ldr	r3, [pc, #632]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003952:	2180      	movs	r1, #128	; 0x80
 8003954:	0249      	lsls	r1, r1, #9
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0xe0>
 800395c:	4b9b      	ldr	r3, [pc, #620]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b9a      	ldr	r3, [pc, #616]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003962:	499b      	ldr	r1, [pc, #620]	; (8003bd0 <HAL_RCC_OscConfig+0x33c>)
 8003964:	400a      	ands	r2, r1
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	4b98      	ldr	r3, [pc, #608]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b97      	ldr	r3, [pc, #604]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800396e:	4999      	ldr	r1, [pc, #612]	; (8003bd4 <HAL_RCC_OscConfig+0x340>)
 8003970:	400a      	ands	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d014      	beq.n	80039a6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7ff f8d2 	bl	8002b24 <HAL_GetTick>
 8003980:	0003      	movs	r3, r0
 8003982:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003986:	f7ff f8cd 	bl	8002b24 <HAL_GetTick>
 800398a:	0002      	movs	r2, r0
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b64      	cmp	r3, #100	; 0x64
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e2fd      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003998:	4b8c      	ldr	r3, [pc, #560]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	029b      	lsls	r3, r3, #10
 80039a0:	4013      	ands	r3, r2
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0xf2>
 80039a4:	e015      	b.n	80039d2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a6:	f7ff f8bd 	bl	8002b24 <HAL_GetTick>
 80039aa:	0003      	movs	r3, r0
 80039ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b0:	f7ff f8b8 	bl	8002b24 <HAL_GetTick>
 80039b4:	0002      	movs	r2, r0
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e2e8      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c2:	4b82      	ldr	r3, [pc, #520]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	029b      	lsls	r3, r3, #10
 80039ca:	4013      	ands	r3, r2
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x11c>
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2202      	movs	r2, #2
 80039d8:	4013      	ands	r3, r2
 80039da:	d100      	bne.n	80039de <HAL_RCC_OscConfig+0x14a>
 80039dc:	e06c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039de:	4b7b      	ldr	r3, [pc, #492]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	220c      	movs	r2, #12
 80039e4:	4013      	ands	r3, r2
 80039e6:	d00e      	beq.n	8003a06 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039e8:	4b78      	ldr	r3, [pc, #480]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	220c      	movs	r2, #12
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d11f      	bne.n	8003a34 <HAL_RCC_OscConfig+0x1a0>
 80039f4:	4b75      	ldr	r3, [pc, #468]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	23c0      	movs	r3, #192	; 0xc0
 80039fa:	025b      	lsls	r3, r3, #9
 80039fc:	401a      	ands	r2, r3
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d116      	bne.n	8003a34 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	4b71      	ldr	r3, [pc, #452]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_OscConfig+0x188>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e2bb      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1c:	4b6b      	ldr	r3, [pc, #428]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	22f8      	movs	r2, #248	; 0xf8
 8003a22:	4393      	bics	r3, r2
 8003a24:	0019      	movs	r1, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00da      	lsls	r2, r3, #3
 8003a2c:	4b67      	ldr	r3, [pc, #412]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	e041      	b.n	8003ab8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d024      	beq.n	8003a86 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a3c:	4b63      	ldr	r3, [pc, #396]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b62      	ldr	r3, [pc, #392]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a42:	2101      	movs	r1, #1
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7ff f86c 	bl	8002b24 <HAL_GetTick>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a52:	f7ff f867 	bl	8002b24 <HAL_GetTick>
 8003a56:	0002      	movs	r2, r0
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e297      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a64:	4b59      	ldr	r3, [pc, #356]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d0f1      	beq.n	8003a52 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6e:	4b57      	ldr	r3, [pc, #348]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	22f8      	movs	r2, #248	; 0xf8
 8003a74:	4393      	bics	r3, r2
 8003a76:	0019      	movs	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	00da      	lsls	r2, r3, #3
 8003a7e:	4b53      	ldr	r3, [pc, #332]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a80:	430a      	orrs	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e018      	b.n	8003ab8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a86:	4b51      	ldr	r3, [pc, #324]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	4b50      	ldr	r3, [pc, #320]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	438a      	bics	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7ff f847 	bl	8002b24 <HAL_GetTick>
 8003a96:	0003      	movs	r3, r0
 8003a98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9c:	f7ff f842 	bl	8002b24 <HAL_GetTick>
 8003aa0:	0002      	movs	r2, r0
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e272      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aae:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d1f1      	bne.n	8003a9c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2208      	movs	r2, #8
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d036      	beq.n	8003b30 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d019      	beq.n	8003afe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aca:	4b40      	ldr	r3, [pc, #256]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ace:	4b3f      	ldr	r3, [pc, #252]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad6:	f7ff f825 	bl	8002b24 <HAL_GetTick>
 8003ada:	0003      	movs	r3, r0
 8003adc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae0:	f7ff f820 	bl	8002b24 <HAL_GetTick>
 8003ae4:	0002      	movs	r2, r0
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e250      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	4b36      	ldr	r3, [pc, #216]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	2202      	movs	r2, #2
 8003af8:	4013      	ands	r3, r2
 8003afa:	d0f1      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x24c>
 8003afc:	e018      	b.n	8003b30 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003afe:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b02:	4b32      	ldr	r3, [pc, #200]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b04:	2101      	movs	r1, #1
 8003b06:	438a      	bics	r2, r1
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0a:	f7ff f80b 	bl	8002b24 <HAL_GetTick>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b14:	f7ff f806 	bl	8002b24 <HAL_GetTick>
 8003b18:	0002      	movs	r2, r0
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e236      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b26:	4b29      	ldr	r3, [pc, #164]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d1f1      	bne.n	8003b14 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2204      	movs	r2, #4
 8003b36:	4013      	ands	r3, r2
 8003b38:	d100      	bne.n	8003b3c <HAL_RCC_OscConfig+0x2a8>
 8003b3a:	e0b5      	b.n	8003ca8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3c:	231f      	movs	r3, #31
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b44:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	055b      	lsls	r3, r3, #21
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d111      	bne.n	8003b74 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b50:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b56:	2180      	movs	r1, #128	; 0x80
 8003b58:	0549      	lsls	r1, r1, #21
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	61da      	str	r2, [r3, #28]
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	055b      	lsls	r3, r3, #21
 8003b66:	4013      	ands	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b6c:	231f      	movs	r3, #31
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	2201      	movs	r2, #1
 8003b72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b74:	4b18      	ldr	r3, [pc, #96]	; (8003bd8 <HAL_RCC_OscConfig+0x344>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	2380      	movs	r3, #128	; 0x80
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d11a      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b80:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <HAL_RCC_OscConfig+0x344>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	4b14      	ldr	r3, [pc, #80]	; (8003bd8 <HAL_RCC_OscConfig+0x344>)
 8003b86:	2180      	movs	r1, #128	; 0x80
 8003b88:	0049      	lsls	r1, r1, #1
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8e:	f7fe ffc9 	bl	8002b24 <HAL_GetTick>
 8003b92:	0003      	movs	r3, r0
 8003b94:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b98:	f7fe ffc4 	bl	8002b24 <HAL_GetTick>
 8003b9c:	0002      	movs	r2, r0
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e1f4      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_RCC_OscConfig+0x344>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	2380      	movs	r3, #128	; 0x80
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d10e      	bne.n	8003bdc <HAL_RCC_OscConfig+0x348>
 8003bbe:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003bc0:	6a1a      	ldr	r2, [r3, #32]
 8003bc2:	4b02      	ldr	r3, [pc, #8]	; (8003bcc <HAL_RCC_OscConfig+0x338>)
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	621a      	str	r2, [r3, #32]
 8003bca:	e035      	b.n	8003c38 <HAL_RCC_OscConfig+0x3a4>
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	fffeffff 	.word	0xfffeffff
 8003bd4:	fffbffff 	.word	0xfffbffff
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10c      	bne.n	8003bfe <HAL_RCC_OscConfig+0x36a>
 8003be4:	4bca      	ldr	r3, [pc, #808]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	4bc9      	ldr	r3, [pc, #804]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003bea:	2101      	movs	r1, #1
 8003bec:	438a      	bics	r2, r1
 8003bee:	621a      	str	r2, [r3, #32]
 8003bf0:	4bc7      	ldr	r3, [pc, #796]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003bf2:	6a1a      	ldr	r2, [r3, #32]
 8003bf4:	4bc6      	ldr	r3, [pc, #792]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003bf6:	2104      	movs	r1, #4
 8003bf8:	438a      	bics	r2, r1
 8003bfa:	621a      	str	r2, [r3, #32]
 8003bfc:	e01c      	b.n	8003c38 <HAL_RCC_OscConfig+0x3a4>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b05      	cmp	r3, #5
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x38c>
 8003c06:	4bc2      	ldr	r3, [pc, #776]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c08:	6a1a      	ldr	r2, [r3, #32]
 8003c0a:	4bc1      	ldr	r3, [pc, #772]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c0c:	2104      	movs	r1, #4
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	621a      	str	r2, [r3, #32]
 8003c12:	4bbf      	ldr	r3, [pc, #764]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c14:	6a1a      	ldr	r2, [r3, #32]
 8003c16:	4bbe      	ldr	r3, [pc, #760]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c18:	2101      	movs	r1, #1
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	621a      	str	r2, [r3, #32]
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCC_OscConfig+0x3a4>
 8003c20:	4bbb      	ldr	r3, [pc, #748]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c22:	6a1a      	ldr	r2, [r3, #32]
 8003c24:	4bba      	ldr	r3, [pc, #744]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c26:	2101      	movs	r1, #1
 8003c28:	438a      	bics	r2, r1
 8003c2a:	621a      	str	r2, [r3, #32]
 8003c2c:	4bb8      	ldr	r3, [pc, #736]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c2e:	6a1a      	ldr	r2, [r3, #32]
 8003c30:	4bb7      	ldr	r3, [pc, #732]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c32:	2104      	movs	r1, #4
 8003c34:	438a      	bics	r2, r1
 8003c36:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d014      	beq.n	8003c6a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c40:	f7fe ff70 	bl	8002b24 <HAL_GetTick>
 8003c44:	0003      	movs	r3, r0
 8003c46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c48:	e009      	b.n	8003c5e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7fe ff6b 	bl	8002b24 <HAL_GetTick>
 8003c4e:	0002      	movs	r2, r0
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	4aaf      	ldr	r2, [pc, #700]	; (8003f14 <HAL_RCC_OscConfig+0x680>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e19a      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5e:	4bac      	ldr	r3, [pc, #688]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	2202      	movs	r2, #2
 8003c64:	4013      	ands	r3, r2
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x3b6>
 8003c68:	e013      	b.n	8003c92 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6a:	f7fe ff5b 	bl	8002b24 <HAL_GetTick>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c72:	e009      	b.n	8003c88 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c74:	f7fe ff56 	bl	8002b24 <HAL_GetTick>
 8003c78:	0002      	movs	r2, r0
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	4aa5      	ldr	r2, [pc, #660]	; (8003f14 <HAL_RCC_OscConfig+0x680>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e185      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c88:	4ba1      	ldr	r3, [pc, #644]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c92:	231f      	movs	r3, #31
 8003c94:	18fb      	adds	r3, r7, r3
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9c:	4b9c      	ldr	r3, [pc, #624]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003c9e:	69da      	ldr	r2, [r3, #28]
 8003ca0:	4b9b      	ldr	r3, [pc, #620]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ca2:	499d      	ldr	r1, [pc, #628]	; (8003f18 <HAL_RCC_OscConfig+0x684>)
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2210      	movs	r2, #16
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d063      	beq.n	8003d7a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d12a      	bne.n	8003d10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003cba:	4b95      	ldr	r3, [pc, #596]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbe:	4b94      	ldr	r3, [pc, #592]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003cc0:	2104      	movs	r1, #4
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003cc6:	4b92      	ldr	r3, [pc, #584]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cca:	4b91      	ldr	r3, [pc, #580]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ccc:	2101      	movs	r1, #1
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd2:	f7fe ff27 	bl	8002b24 <HAL_GetTick>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003cdc:	f7fe ff22 	bl	8002b24 <HAL_GetTick>
 8003ce0:	0002      	movs	r2, r0
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e152      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003cee:	4b88      	ldr	r3, [pc, #544]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d0f1      	beq.n	8003cdc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003cf8:	4b85      	ldr	r3, [pc, #532]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfc:	22f8      	movs	r2, #248	; 0xf8
 8003cfe:	4393      	bics	r3, r2
 8003d00:	0019      	movs	r1, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	00da      	lsls	r2, r3, #3
 8003d08:	4b81      	ldr	r3, [pc, #516]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d0e:	e034      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	3305      	adds	r3, #5
 8003d16:	d111      	bne.n	8003d3c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003d18:	4b7d      	ldr	r3, [pc, #500]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d1c:	4b7c      	ldr	r3, [pc, #496]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d1e:	2104      	movs	r1, #4
 8003d20:	438a      	bics	r2, r1
 8003d22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d24:	4b7a      	ldr	r3, [pc, #488]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d28:	22f8      	movs	r2, #248	; 0xf8
 8003d2a:	4393      	bics	r3, r2
 8003d2c:	0019      	movs	r1, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	00da      	lsls	r2, r3, #3
 8003d34:	4b76      	ldr	r3, [pc, #472]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d36:	430a      	orrs	r2, r1
 8003d38:	635a      	str	r2, [r3, #52]	; 0x34
 8003d3a:	e01e      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d3c:	4b74      	ldr	r3, [pc, #464]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d40:	4b73      	ldr	r3, [pc, #460]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d42:	2104      	movs	r1, #4
 8003d44:	430a      	orrs	r2, r1
 8003d46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003d48:	4b71      	ldr	r3, [pc, #452]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d4c:	4b70      	ldr	r3, [pc, #448]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d4e:	2101      	movs	r1, #1
 8003d50:	438a      	bics	r2, r1
 8003d52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d54:	f7fe fee6 	bl	8002b24 <HAL_GetTick>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d5e:	f7fe fee1 	bl	8002b24 <HAL_GetTick>
 8003d62:	0002      	movs	r2, r0
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e111      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d70:	4b67      	ldr	r3, [pc, #412]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	2202      	movs	r2, #2
 8003d76:	4013      	ands	r3, r2
 8003d78:	d1f1      	bne.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	4013      	ands	r3, r2
 8003d82:	d05c      	beq.n	8003e3e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003d84:	4b62      	ldr	r3, [pc, #392]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	220c      	movs	r2, #12
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b0c      	cmp	r3, #12
 8003d8e:	d00e      	beq.n	8003dae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d90:	4b5f      	ldr	r3, [pc, #380]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	220c      	movs	r2, #12
 8003d96:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d114      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d9c:	4b5c      	ldr	r3, [pc, #368]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	23c0      	movs	r3, #192	; 0xc0
 8003da2:	025b      	lsls	r3, r3, #9
 8003da4:	401a      	ands	r2, r3
 8003da6:	23c0      	movs	r3, #192	; 0xc0
 8003da8:	025b      	lsls	r3, r3, #9
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d10b      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003dae:	4b58      	ldr	r3, [pc, #352]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	025b      	lsls	r3, r3, #9
 8003db6:	4013      	ands	r3, r2
 8003db8:	d040      	beq.n	8003e3c <HAL_RCC_OscConfig+0x5a8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d03c      	beq.n	8003e3c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e0e6      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d01b      	beq.n	8003e06 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003dce:	4b50      	ldr	r3, [pc, #320]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dd2:	4b4f      	ldr	r3, [pc, #316]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003dd4:	2180      	movs	r1, #128	; 0x80
 8003dd6:	0249      	lsls	r1, r1, #9
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fea2 	bl	8002b24 <HAL_GetTick>
 8003de0:	0003      	movs	r3, r0
 8003de2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003de6:	f7fe fe9d 	bl	8002b24 <HAL_GetTick>
 8003dea:	0002      	movs	r2, r0
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e0cd      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003df8:	4b45      	ldr	r3, [pc, #276]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	025b      	lsls	r3, r3, #9
 8003e00:	4013      	ands	r3, r2
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCC_OscConfig+0x552>
 8003e04:	e01b      	b.n	8003e3e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003e06:	4b42      	ldr	r3, [pc, #264]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e0a:	4b41      	ldr	r3, [pc, #260]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e0c:	4943      	ldr	r1, [pc, #268]	; (8003f1c <HAL_RCC_OscConfig+0x688>)
 8003e0e:	400a      	ands	r2, r1
 8003e10:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e12:	f7fe fe87 	bl	8002b24 <HAL_GetTick>
 8003e16:	0003      	movs	r3, r0
 8003e18:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e1c:	f7fe fe82 	bl	8002b24 <HAL_GetTick>
 8003e20:	0002      	movs	r2, r0
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e0b2      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003e2e:	4b38      	ldr	r3, [pc, #224]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e32:	2380      	movs	r3, #128	; 0x80
 8003e34:	025b      	lsls	r3, r3, #9
 8003e36:	4013      	ands	r3, r2
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x588>
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003e3c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d100      	bne.n	8003e48 <HAL_RCC_OscConfig+0x5b4>
 8003e46:	e0a4      	b.n	8003f92 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e48:	4b31      	ldr	r3, [pc, #196]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	220c      	movs	r2, #12
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d100      	bne.n	8003e56 <HAL_RCC_OscConfig+0x5c2>
 8003e54:	e078      	b.n	8003f48 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d14c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5e:	4b2c      	ldr	r3, [pc, #176]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e64:	492e      	ldr	r1, [pc, #184]	; (8003f20 <HAL_RCC_OscConfig+0x68c>)
 8003e66:	400a      	ands	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6a:	f7fe fe5b 	bl	8002b24 <HAL_GetTick>
 8003e6e:	0003      	movs	r3, r0
 8003e70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fe fe56 	bl	8002b24 <HAL_GetTick>
 8003e78:	0002      	movs	r2, r0
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e086      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e86:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	2380      	movs	r3, #128	; 0x80
 8003e8c:	049b      	lsls	r3, r3, #18
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e92:	4b1f      	ldr	r3, [pc, #124]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	220f      	movs	r2, #15
 8003e98:	4393      	bics	r3, r2
 8003e9a:	0019      	movs	r1, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ea6:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4a1e      	ldr	r2, [pc, #120]	; (8003f24 <HAL_RCC_OscConfig+0x690>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	0019      	movs	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec0:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003ec6:	2180      	movs	r1, #128	; 0x80
 8003ec8:	0449      	lsls	r1, r1, #17
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ece:	f7fe fe29 	bl	8002b24 <HAL_GetTick>
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed8:	f7fe fe24 	bl	8002b24 <HAL_GetTick>
 8003edc:	0002      	movs	r2, r0
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e054      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	2380      	movs	r3, #128	; 0x80
 8003ef0:	049b      	lsls	r3, r3, #18
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x644>
 8003ef6:	e04c      	b.n	8003f92 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <HAL_RCC_OscConfig+0x67c>)
 8003efe:	4908      	ldr	r1, [pc, #32]	; (8003f20 <HAL_RCC_OscConfig+0x68c>)
 8003f00:	400a      	ands	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fe fe0e 	bl	8002b24 <HAL_GetTick>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f0c:	e015      	b.n	8003f3a <HAL_RCC_OscConfig+0x6a6>
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	40021000 	.word	0x40021000
 8003f14:	00001388 	.word	0x00001388
 8003f18:	efffffff 	.word	0xefffffff
 8003f1c:	fffeffff 	.word	0xfffeffff
 8003f20:	feffffff 	.word	0xfeffffff
 8003f24:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f28:	f7fe fdfc 	bl	8002b24 <HAL_GetTick>
 8003f2c:	0002      	movs	r2, r0
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e02c      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f3a:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <HAL_RCC_OscConfig+0x708>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	049b      	lsls	r3, r3, #18
 8003f42:	4013      	ands	r3, r2
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x694>
 8003f46:	e024      	b.n	8003f92 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e01f      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <HAL_RCC_OscConfig+0x708>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <HAL_RCC_OscConfig+0x708>)
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	23c0      	movs	r3, #192	; 0xc0
 8003f64:	025b      	lsls	r3, r3, #9
 8003f66:	401a      	ands	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d10e      	bne.n	8003f8e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	220f      	movs	r2, #15
 8003f74:	401a      	ands	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d107      	bne.n	8003f8e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	23f0      	movs	r3, #240	; 0xf0
 8003f82:	039b      	lsls	r3, r3, #14
 8003f84:	401a      	ands	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	0018      	movs	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b008      	add	sp, #32
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000

08003fa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0bf      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb4:	4b61      	ldr	r3, [pc, #388]	; (800413c <HAL_RCC_ClockConfig+0x19c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4013      	ands	r3, r2
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d911      	bls.n	8003fe6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc2:	4b5e      	ldr	r3, [pc, #376]	; (800413c <HAL_RCC_ClockConfig+0x19c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	4393      	bics	r3, r2
 8003fca:	0019      	movs	r1, r3
 8003fcc:	4b5b      	ldr	r3, [pc, #364]	; (800413c <HAL_RCC_ClockConfig+0x19c>)
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd4:	4b59      	ldr	r3, [pc, #356]	; (800413c <HAL_RCC_ClockConfig+0x19c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	4013      	ands	r3, r2
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d001      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e0a6      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2202      	movs	r2, #2
 8003fec:	4013      	ands	r3, r2
 8003fee:	d015      	beq.n	800401c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d006      	beq.n	8004008 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ffa:	4b51      	ldr	r3, [pc, #324]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	4b50      	ldr	r3, [pc, #320]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004000:	21e0      	movs	r1, #224	; 0xe0
 8004002:	00c9      	lsls	r1, r1, #3
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004008:	4b4d      	ldr	r3, [pc, #308]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	22f0      	movs	r2, #240	; 0xf0
 800400e:	4393      	bics	r3, r2
 8004010:	0019      	movs	r1, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	4b4a      	ldr	r3, [pc, #296]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004018:	430a      	orrs	r2, r1
 800401a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2201      	movs	r2, #1
 8004022:	4013      	ands	r3, r2
 8004024:	d04c      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402e:	4b44      	ldr	r3, [pc, #272]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	029b      	lsls	r3, r3, #10
 8004036:	4013      	ands	r3, r2
 8004038:	d120      	bne.n	800407c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e07a      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004046:	4b3e      	ldr	r3, [pc, #248]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	049b      	lsls	r3, r3, #18
 800404e:	4013      	ands	r3, r2
 8004050:	d114      	bne.n	800407c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e06e      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b03      	cmp	r3, #3
 800405c:	d107      	bne.n	800406e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800405e:	4b38      	ldr	r3, [pc, #224]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	025b      	lsls	r3, r3, #9
 8004066:	4013      	ands	r3, r2
 8004068:	d108      	bne.n	800407c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e062      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406e:	4b34      	ldr	r3, [pc, #208]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2202      	movs	r2, #2
 8004074:	4013      	ands	r3, r2
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e05b      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800407c:	4b30      	ldr	r3, [pc, #192]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2203      	movs	r2, #3
 8004082:	4393      	bics	r3, r2
 8004084:	0019      	movs	r1, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 800408c:	430a      	orrs	r2, r1
 800408e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004090:	f7fe fd48 	bl	8002b24 <HAL_GetTick>
 8004094:	0003      	movs	r3, r0
 8004096:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004098:	e009      	b.n	80040ae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409a:	f7fe fd43 	bl	8002b24 <HAL_GetTick>
 800409e:	0002      	movs	r2, r0
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	4a27      	ldr	r2, [pc, #156]	; (8004144 <HAL_RCC_ClockConfig+0x1a4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e042      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	4b24      	ldr	r3, [pc, #144]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	220c      	movs	r2, #12
 80040b4:	401a      	ands	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	429a      	cmp	r2, r3
 80040be:	d1ec      	bne.n	800409a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040c0:	4b1e      	ldr	r3, [pc, #120]	; (800413c <HAL_RCC_ClockConfig+0x19c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2201      	movs	r2, #1
 80040c6:	4013      	ands	r3, r2
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d211      	bcs.n	80040f2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b1b      	ldr	r3, [pc, #108]	; (800413c <HAL_RCC_ClockConfig+0x19c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2201      	movs	r2, #1
 80040d4:	4393      	bics	r3, r2
 80040d6:	0019      	movs	r1, r3
 80040d8:	4b18      	ldr	r3, [pc, #96]	; (800413c <HAL_RCC_ClockConfig+0x19c>)
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e0:	4b16      	ldr	r3, [pc, #88]	; (800413c <HAL_RCC_ClockConfig+0x19c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2201      	movs	r2, #1
 80040e6:	4013      	ands	r3, r2
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d001      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e020      	b.n	8004134 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2204      	movs	r2, #4
 80040f8:	4013      	ands	r3, r2
 80040fa:	d009      	beq.n	8004110 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040fc:	4b10      	ldr	r3, [pc, #64]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a11      	ldr	r2, [pc, #68]	; (8004148 <HAL_RCC_ClockConfig+0x1a8>)
 8004102:	4013      	ands	r3, r2
 8004104:	0019      	movs	r1, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 800410c:	430a      	orrs	r2, r1
 800410e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004110:	f000 f820 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004114:	0001      	movs	r1, r0
 8004116:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <HAL_RCC_ClockConfig+0x1a0>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	091b      	lsrs	r3, r3, #4
 800411c:	220f      	movs	r2, #15
 800411e:	4013      	ands	r3, r2
 8004120:	4a0a      	ldr	r2, [pc, #40]	; (800414c <HAL_RCC_ClockConfig+0x1ac>)
 8004122:	5cd3      	ldrb	r3, [r2, r3]
 8004124:	000a      	movs	r2, r1
 8004126:	40da      	lsrs	r2, r3
 8004128:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCC_ClockConfig+0x1b0>)
 800412a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800412c:	2000      	movs	r0, #0
 800412e:	f7fe fc27 	bl	8002980 <HAL_InitTick>
  
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	0018      	movs	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	b004      	add	sp, #16
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40022000 	.word	0x40022000
 8004140:	40021000 	.word	0x40021000
 8004144:	00001388 	.word	0x00001388
 8004148:	fffff8ff 	.word	0xfffff8ff
 800414c:	08007e74 	.word	0x08007e74
 8004150:	200000f0 	.word	0x200000f0

08004154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004154:	b590      	push	{r4, r7, lr}
 8004156:	b08f      	sub	sp, #60	; 0x3c
 8004158:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800415a:	2314      	movs	r3, #20
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	4a37      	ldr	r2, [pc, #220]	; (800423c <HAL_RCC_GetSysClockFreq+0xe8>)
 8004160:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004162:	c313      	stmia	r3!, {r0, r1, r4}
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004168:	1d3b      	adds	r3, r7, #4
 800416a:	4a35      	ldr	r2, [pc, #212]	; (8004240 <HAL_RCC_GetSysClockFreq+0xec>)
 800416c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800416e:	c313      	stmia	r3!, {r0, r1, r4}
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004178:	2300      	movs	r3, #0
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
 800417c:	2300      	movs	r3, #0
 800417e:	637b      	str	r3, [r7, #52]	; 0x34
 8004180:	2300      	movs	r3, #0
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004188:	4b2e      	ldr	r3, [pc, #184]	; (8004244 <HAL_RCC_GetSysClockFreq+0xf0>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004190:	220c      	movs	r2, #12
 8004192:	4013      	ands	r3, r2
 8004194:	2b08      	cmp	r3, #8
 8004196:	d006      	beq.n	80041a6 <HAL_RCC_GetSysClockFreq+0x52>
 8004198:	2b0c      	cmp	r3, #12
 800419a:	d043      	beq.n	8004224 <HAL_RCC_GetSysClockFreq+0xd0>
 800419c:	2b04      	cmp	r3, #4
 800419e:	d144      	bne.n	800422a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041a0:	4b29      	ldr	r3, [pc, #164]	; (8004248 <HAL_RCC_GetSysClockFreq+0xf4>)
 80041a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041a4:	e044      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80041a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a8:	0c9b      	lsrs	r3, r3, #18
 80041aa:	220f      	movs	r2, #15
 80041ac:	4013      	ands	r3, r2
 80041ae:	2214      	movs	r2, #20
 80041b0:	18ba      	adds	r2, r7, r2
 80041b2:	5cd3      	ldrb	r3, [r2, r3]
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80041b6:	4b23      	ldr	r3, [pc, #140]	; (8004244 <HAL_RCC_GetSysClockFreq+0xf0>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	220f      	movs	r2, #15
 80041bc:	4013      	ands	r3, r2
 80041be:	1d3a      	adds	r2, r7, #4
 80041c0:	5cd3      	ldrb	r3, [r2, r3]
 80041c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c6:	23c0      	movs	r3, #192	; 0xc0
 80041c8:	025b      	lsls	r3, r3, #9
 80041ca:	401a      	ands	r2, r3
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	025b      	lsls	r3, r3, #9
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d109      	bne.n	80041e8 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041d6:	481c      	ldr	r0, [pc, #112]	; (8004248 <HAL_RCC_GetSysClockFreq+0xf4>)
 80041d8:	f7fb ff96 	bl	8000108 <__udivsi3>
 80041dc:	0003      	movs	r3, r0
 80041de:	001a      	movs	r2, r3
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	4353      	muls	r3, r2
 80041e4:	637b      	str	r3, [r7, #52]	; 0x34
 80041e6:	e01a      	b.n	800421e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80041e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ea:	23c0      	movs	r3, #192	; 0xc0
 80041ec:	025b      	lsls	r3, r3, #9
 80041ee:	401a      	ands	r2, r3
 80041f0:	23c0      	movs	r3, #192	; 0xc0
 80041f2:	025b      	lsls	r3, r3, #9
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d109      	bne.n	800420c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041fa:	4814      	ldr	r0, [pc, #80]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041fc:	f7fb ff84 	bl	8000108 <__udivsi3>
 8004200:	0003      	movs	r3, r0
 8004202:	001a      	movs	r2, r3
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	4353      	muls	r3, r2
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
 800420a:	e008      	b.n	800421e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800420c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800420e:	480e      	ldr	r0, [pc, #56]	; (8004248 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004210:	f7fb ff7a 	bl	8000108 <__udivsi3>
 8004214:	0003      	movs	r3, r0
 8004216:	001a      	movs	r2, r3
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	4353      	muls	r3, r2
 800421c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800421e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004220:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004222:	e005      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004224:	4b09      	ldr	r3, [pc, #36]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004226:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004228:	e002      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <HAL_RCC_GetSysClockFreq+0xf4>)
 800422c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800422e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004232:	0018      	movs	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	b00f      	add	sp, #60	; 0x3c
 8004238:	bd90      	pop	{r4, r7, pc}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	08007d6c 	.word	0x08007d6c
 8004240:	08007d7c 	.word	0x08007d7c
 8004244:	40021000 	.word	0x40021000
 8004248:	007a1200 	.word	0x007a1200
 800424c:	02dc6c00 	.word	0x02dc6c00

08004250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004254:	4b02      	ldr	r3, [pc, #8]	; (8004260 <HAL_RCC_GetHCLKFreq+0x10>)
 8004256:	681b      	ldr	r3, [r3, #0]
}
 8004258:	0018      	movs	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	200000f0 	.word	0x200000f0

08004264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004268:	f7ff fff2 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 800426c:	0001      	movs	r1, r0
 800426e:	4b06      	ldr	r3, [pc, #24]	; (8004288 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	2207      	movs	r2, #7
 8004276:	4013      	ands	r3, r2
 8004278:	4a04      	ldr	r2, [pc, #16]	; (800428c <HAL_RCC_GetPCLK1Freq+0x28>)
 800427a:	5cd3      	ldrb	r3, [r2, r3]
 800427c:	40d9      	lsrs	r1, r3
 800427e:	000b      	movs	r3, r1
}    
 8004280:	0018      	movs	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	40021000 	.word	0x40021000
 800428c:	08007e84 	.word	0x08007e84

08004290 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2207      	movs	r2, #7
 800429e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042a0:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <HAL_RCC_GetClockConfig+0x4c>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2203      	movs	r2, #3
 80042a6:	401a      	ands	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RCC_GetClockConfig+0x4c>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	22f0      	movs	r2, #240	; 0xf0
 80042b2:	401a      	ands	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80042b8:	4b08      	ldr	r3, [pc, #32]	; (80042dc <HAL_RCC_GetClockConfig+0x4c>)
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	23e0      	movs	r3, #224	; 0xe0
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	401a      	ands	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <HAL_RCC_GetClockConfig+0x50>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2201      	movs	r2, #1
 80042cc:	401a      	ands	r2, r3
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	601a      	str	r2, [r3, #0]
}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b002      	add	sp, #8
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	40021000 	.word	0x40021000
 80042e0:	40022000 	.word	0x40022000

080042e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	025b      	lsls	r3, r3, #9
 80042fc:	4013      	ands	r3, r2
 80042fe:	d100      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004300:	e08f      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004302:	2317      	movs	r3, #23
 8004304:	18fb      	adds	r3, r7, r3
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430a:	4b6f      	ldr	r3, [pc, #444]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	2380      	movs	r3, #128	; 0x80
 8004310:	055b      	lsls	r3, r3, #21
 8004312:	4013      	ands	r3, r2
 8004314:	d111      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004316:	4b6c      	ldr	r3, [pc, #432]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004318:	69da      	ldr	r2, [r3, #28]
 800431a:	4b6b      	ldr	r3, [pc, #428]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800431c:	2180      	movs	r1, #128	; 0x80
 800431e:	0549      	lsls	r1, r1, #21
 8004320:	430a      	orrs	r2, r1
 8004322:	61da      	str	r2, [r3, #28]
 8004324:	4b68      	ldr	r3, [pc, #416]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004326:	69da      	ldr	r2, [r3, #28]
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	055b      	lsls	r3, r3, #21
 800432c:	4013      	ands	r3, r2
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004332:	2317      	movs	r3, #23
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	2201      	movs	r2, #1
 8004338:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433a:	4b64      	ldr	r3, [pc, #400]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	2380      	movs	r3, #128	; 0x80
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	4013      	ands	r3, r2
 8004344:	d11a      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004346:	4b61      	ldr	r3, [pc, #388]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b60      	ldr	r3, [pc, #384]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800434c:	2180      	movs	r1, #128	; 0x80
 800434e:	0049      	lsls	r1, r1, #1
 8004350:	430a      	orrs	r2, r1
 8004352:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004354:	f7fe fbe6 	bl	8002b24 <HAL_GetTick>
 8004358:	0003      	movs	r3, r0
 800435a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435c:	e008      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435e:	f7fe fbe1 	bl	8002b24 <HAL_GetTick>
 8004362:	0002      	movs	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b64      	cmp	r3, #100	; 0x64
 800436a:	d901      	bls.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e0a6      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004370:	4b56      	ldr	r3, [pc, #344]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4013      	ands	r3, r2
 800437a:	d0f0      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800437c:	4b52      	ldr	r3, [pc, #328]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800437e:	6a1a      	ldr	r2, [r3, #32]
 8004380:	23c0      	movs	r3, #192	; 0xc0
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4013      	ands	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d034      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	23c0      	movs	r3, #192	; 0xc0
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4013      	ands	r3, r2
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	429a      	cmp	r2, r3
 800439c:	d02c      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800439e:	4b4a      	ldr	r3, [pc, #296]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	4a4b      	ldr	r2, [pc, #300]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043a8:	4b47      	ldr	r3, [pc, #284]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043aa:	6a1a      	ldr	r2, [r3, #32]
 80043ac:	4b46      	ldr	r3, [pc, #280]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043ae:	2180      	movs	r1, #128	; 0x80
 80043b0:	0249      	lsls	r1, r1, #9
 80043b2:	430a      	orrs	r2, r1
 80043b4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043b6:	4b44      	ldr	r3, [pc, #272]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043b8:	6a1a      	ldr	r2, [r3, #32]
 80043ba:	4b43      	ldr	r3, [pc, #268]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043bc:	4945      	ldr	r1, [pc, #276]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80043be:	400a      	ands	r2, r1
 80043c0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043c2:	4b41      	ldr	r3, [pc, #260]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	4013      	ands	r3, r2
 80043ce:	d013      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7fe fba8 	bl	8002b24 <HAL_GetTick>
 80043d4:	0003      	movs	r3, r0
 80043d6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d8:	e009      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043da:	f7fe fba3 	bl	8002b24 <HAL_GetTick>
 80043de:	0002      	movs	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	4a3c      	ldr	r2, [pc, #240]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e067      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ee:	4b36      	ldr	r3, [pc, #216]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	2202      	movs	r2, #2
 80043f4:	4013      	ands	r3, r2
 80043f6:	d0f0      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043f8:	4b33      	ldr	r3, [pc, #204]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	4a34      	ldr	r2, [pc, #208]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80043fe:	4013      	ands	r3, r2
 8004400:	0019      	movs	r1, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	4b30      	ldr	r3, [pc, #192]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004408:	430a      	orrs	r2, r1
 800440a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800440c:	2317      	movs	r3, #23
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d105      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004416:	4b2c      	ldr	r3, [pc, #176]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	4b2b      	ldr	r3, [pc, #172]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800441c:	492f      	ldr	r1, [pc, #188]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800441e:	400a      	ands	r2, r1
 8004420:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2201      	movs	r2, #1
 8004428:	4013      	ands	r3, r2
 800442a:	d009      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800442c:	4b26      	ldr	r3, [pc, #152]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	2203      	movs	r2, #3
 8004432:	4393      	bics	r3, r2
 8004434:	0019      	movs	r1, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	4b23      	ldr	r3, [pc, #140]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800443c:	430a      	orrs	r2, r1
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2202      	movs	r2, #2
 8004446:	4013      	ands	r3, r2
 8004448:	d009      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800444a:	4b1f      	ldr	r3, [pc, #124]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	4a24      	ldr	r2, [pc, #144]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004450:	4013      	ands	r3, r2
 8004452:	0019      	movs	r1, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800445a:	430a      	orrs	r2, r1
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2220      	movs	r2, #32
 8004464:	4013      	ands	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004468:	4b17      	ldr	r3, [pc, #92]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	2210      	movs	r2, #16
 800446e:	4393      	bics	r3, r2
 8004470:	0019      	movs	r1, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004478:	430a      	orrs	r2, r1
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	029b      	lsls	r3, r3, #10
 8004484:	4013      	ands	r3, r2
 8004486:	d009      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004488:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	2280      	movs	r2, #128	; 0x80
 800448e:	4393      	bics	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004498:	430a      	orrs	r2, r1
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4013      	ands	r3, r2
 80044a6:	d009      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044a8:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	2240      	movs	r2, #64	; 0x40
 80044ae:	4393      	bics	r3, r2
 80044b0:	0019      	movs	r1, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695a      	ldr	r2, [r3, #20]
 80044b6:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044b8:	430a      	orrs	r2, r1
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	0018      	movs	r0, r3
 80044c0:	46bd      	mov	sp, r7
 80044c2:	b006      	add	sp, #24
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40007000 	.word	0x40007000
 80044d0:	fffffcff 	.word	0xfffffcff
 80044d4:	fffeffff 	.word	0xfffeffff
 80044d8:	00001388 	.word	0x00001388
 80044dc:	efffffff 	.word	0xefffffff
 80044e0:	fffcffff 	.word	0xfffcffff

080044e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e01e      	b.n	8004534 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	223d      	movs	r2, #61	; 0x3d
 80044fa:	5c9b      	ldrb	r3, [r3, r2]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d107      	bne.n	8004512 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	223c      	movs	r2, #60	; 0x3c
 8004506:	2100      	movs	r1, #0
 8004508:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	0018      	movs	r0, r3
 800450e:	f000 f815 	bl	800453c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	223d      	movs	r2, #61	; 0x3d
 8004516:	2102      	movs	r1, #2
 8004518:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	0019      	movs	r1, r3
 8004524:	0010      	movs	r0, r2
 8004526:	f000 fafd 	bl	8004b24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	223d      	movs	r2, #61	; 0x3d
 800452e:	2101      	movs	r1, #1
 8004530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	0018      	movs	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	b002      	add	sp, #8
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004544:	46c0      	nop			; (mov r8, r8)
 8004546:	46bd      	mov	sp, r7
 8004548:	b002      	add	sp, #8
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2101      	movs	r1, #1
 8004560:	430a      	orrs	r2, r1
 8004562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2207      	movs	r2, #7
 800456c:	4013      	ands	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b06      	cmp	r3, #6
 8004574:	d007      	beq.n	8004586 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2101      	movs	r1, #1
 8004582:	430a      	orrs	r2, r1
 8004584:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	0018      	movs	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	b004      	add	sp, #16
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e01e      	b.n	80045e0 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	223d      	movs	r2, #61	; 0x3d
 80045a6:	5c9b      	ldrb	r3, [r3, r2]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d107      	bne.n	80045be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	223c      	movs	r2, #60	; 0x3c
 80045b2:	2100      	movs	r1, #0
 80045b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7fe f913 	bl	80027e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	223d      	movs	r2, #61	; 0x3d
 80045c2:	2102      	movs	r1, #2
 80045c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3304      	adds	r3, #4
 80045ce:	0019      	movs	r1, r3
 80045d0:	0010      	movs	r0, r2
 80045d2:	f000 faa7 	bl	8004b24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	223d      	movs	r2, #61	; 0x3d
 80045da:	2101      	movs	r1, #1
 80045dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	0018      	movs	r0, r3
 80045e2:	46bd      	mov	sp, r7
 80045e4:	b002      	add	sp, #8
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6839      	ldr	r1, [r7, #0]
 80045f8:	2201      	movs	r2, #1
 80045fa:	0018      	movs	r0, r3
 80045fc:	f000 fd0e 	bl	800501c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1a      	ldr	r2, [pc, #104]	; (8004670 <HAL_TIM_PWM_Start+0x88>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00e      	beq.n	8004628 <HAL_TIM_PWM_Start+0x40>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a19      	ldr	r2, [pc, #100]	; (8004674 <HAL_TIM_PWM_Start+0x8c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d009      	beq.n	8004628 <HAL_TIM_PWM_Start+0x40>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a17      	ldr	r2, [pc, #92]	; (8004678 <HAL_TIM_PWM_Start+0x90>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_TIM_PWM_Start+0x40>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a16      	ldr	r2, [pc, #88]	; (800467c <HAL_TIM_PWM_Start+0x94>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d101      	bne.n	800462c <HAL_TIM_PWM_Start+0x44>
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <HAL_TIM_PWM_Start+0x46>
 800462c:	2300      	movs	r3, #0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d008      	beq.n	8004644 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2180      	movs	r1, #128	; 0x80
 800463e:	0209      	lsls	r1, r1, #8
 8004640:	430a      	orrs	r2, r1
 8004642:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2207      	movs	r2, #7
 800464c:	4013      	ands	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b06      	cmp	r3, #6
 8004654:	d007      	beq.n	8004666 <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2101      	movs	r1, #1
 8004662:	430a      	orrs	r2, r1
 8004664:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	0018      	movs	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	b004      	add	sp, #16
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40012c00 	.word	0x40012c00
 8004674:	40014000 	.word	0x40014000
 8004678:	40014400 	.word	0x40014400
 800467c:	40014800 	.word	0x40014800

08004680 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6839      	ldr	r1, [r7, #0]
 8004690:	2200      	movs	r2, #0
 8004692:	0018      	movs	r0, r3
 8004694:	f000 fcc2 	bl	800501c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a23      	ldr	r2, [pc, #140]	; (800472c <HAL_TIM_PWM_Stop+0xac>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00e      	beq.n	80046c0 <HAL_TIM_PWM_Stop+0x40>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a22      	ldr	r2, [pc, #136]	; (8004730 <HAL_TIM_PWM_Stop+0xb0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d009      	beq.n	80046c0 <HAL_TIM_PWM_Stop+0x40>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a20      	ldr	r2, [pc, #128]	; (8004734 <HAL_TIM_PWM_Stop+0xb4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <HAL_TIM_PWM_Stop+0x40>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1f      	ldr	r2, [pc, #124]	; (8004738 <HAL_TIM_PWM_Stop+0xb8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d101      	bne.n	80046c4 <HAL_TIM_PWM_Stop+0x44>
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <HAL_TIM_PWM_Stop+0x46>
 80046c4:	2300      	movs	r3, #0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d013      	beq.n	80046f2 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	4a1a      	ldr	r2, [pc, #104]	; (800473c <HAL_TIM_PWM_Stop+0xbc>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	d10d      	bne.n	80046f2 <HAL_TIM_PWM_Stop+0x72>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	4a18      	ldr	r2, [pc, #96]	; (8004740 <HAL_TIM_PWM_Stop+0xc0>)
 80046de:	4013      	ands	r3, r2
 80046e0:	d107      	bne.n	80046f2 <HAL_TIM_PWM_Stop+0x72>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4915      	ldr	r1, [pc, #84]	; (8004744 <HAL_TIM_PWM_Stop+0xc4>)
 80046ee:	400a      	ands	r2, r1
 80046f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	4a10      	ldr	r2, [pc, #64]	; (800473c <HAL_TIM_PWM_Stop+0xbc>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	d10d      	bne.n	800471a <HAL_TIM_PWM_Stop+0x9a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	4a0e      	ldr	r2, [pc, #56]	; (8004740 <HAL_TIM_PWM_Stop+0xc0>)
 8004706:	4013      	ands	r3, r2
 8004708:	d107      	bne.n	800471a <HAL_TIM_PWM_Stop+0x9a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2101      	movs	r1, #1
 8004716:	438a      	bics	r2, r1
 8004718:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	223d      	movs	r2, #61	; 0x3d
 800471e:	2101      	movs	r1, #1
 8004720:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	0018      	movs	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	b002      	add	sp, #8
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40014000 	.word	0x40014000
 8004734:	40014400 	.word	0x40014400
 8004738:	40014800 	.word	0x40014800
 800473c:	00001111 	.word	0x00001111
 8004740:	00000444 	.word	0x00000444
 8004744:	ffff7fff 	.word	0xffff7fff

08004748 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2202      	movs	r2, #2
 8004758:	4013      	ands	r3, r2
 800475a:	2b02      	cmp	r3, #2
 800475c:	d124      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	2202      	movs	r2, #2
 8004766:	4013      	ands	r3, r2
 8004768:	2b02      	cmp	r3, #2
 800476a:	d11d      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2203      	movs	r2, #3
 8004772:	4252      	negs	r2, r2
 8004774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	2203      	movs	r2, #3
 8004784:	4013      	ands	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	0018      	movs	r0, r3
 800478c:	f000 f9b2 	bl	8004af4 <HAL_TIM_IC_CaptureCallback>
 8004790:	e007      	b.n	80047a2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0018      	movs	r0, r3
 8004796:	f000 f9a5 	bl	8004ae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0018      	movs	r0, r3
 800479e:	f000 f9b1 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2204      	movs	r2, #4
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d125      	bne.n	8004802 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	2204      	movs	r2, #4
 80047be:	4013      	ands	r3, r2
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d11e      	bne.n	8004802 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2205      	movs	r2, #5
 80047ca:	4252      	negs	r2, r2
 80047cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2202      	movs	r2, #2
 80047d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	23c0      	movs	r3, #192	; 0xc0
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4013      	ands	r3, r2
 80047e0:	d004      	beq.n	80047ec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f000 f985 	bl	8004af4 <HAL_TIM_IC_CaptureCallback>
 80047ea:	e007      	b.n	80047fc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	0018      	movs	r0, r3
 80047f0:	f000 f978 	bl	8004ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	0018      	movs	r0, r3
 80047f8:	f000 f984 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2208      	movs	r2, #8
 800480a:	4013      	ands	r3, r2
 800480c:	2b08      	cmp	r3, #8
 800480e:	d124      	bne.n	800485a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	2208      	movs	r2, #8
 8004818:	4013      	ands	r3, r2
 800481a:	2b08      	cmp	r3, #8
 800481c:	d11d      	bne.n	800485a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2209      	movs	r2, #9
 8004824:	4252      	negs	r2, r2
 8004826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2204      	movs	r2, #4
 800482c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	2203      	movs	r2, #3
 8004836:	4013      	ands	r3, r2
 8004838:	d004      	beq.n	8004844 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	0018      	movs	r0, r3
 800483e:	f000 f959 	bl	8004af4 <HAL_TIM_IC_CaptureCallback>
 8004842:	e007      	b.n	8004854 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	0018      	movs	r0, r3
 8004848:	f000 f94c 	bl	8004ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	0018      	movs	r0, r3
 8004850:	f000 f958 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	2210      	movs	r2, #16
 8004862:	4013      	ands	r3, r2
 8004864:	2b10      	cmp	r3, #16
 8004866:	d125      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	2210      	movs	r2, #16
 8004870:	4013      	ands	r3, r2
 8004872:	2b10      	cmp	r3, #16
 8004874:	d11e      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2211      	movs	r2, #17
 800487c:	4252      	negs	r2, r2
 800487e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2208      	movs	r2, #8
 8004884:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	23c0      	movs	r3, #192	; 0xc0
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4013      	ands	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	0018      	movs	r0, r3
 8004898:	f000 f92c 	bl	8004af4 <HAL_TIM_IC_CaptureCallback>
 800489c:	e007      	b.n	80048ae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	0018      	movs	r0, r3
 80048a2:	f000 f91f 	bl	8004ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	0018      	movs	r0, r3
 80048aa:	f000 f92b 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2201      	movs	r2, #1
 80048bc:	4013      	ands	r3, r2
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d10f      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d108      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2202      	movs	r2, #2
 80048d6:	4252      	negs	r2, r2
 80048d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	0018      	movs	r0, r3
 80048de:	f7fd feef 	bl	80026c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	2280      	movs	r2, #128	; 0x80
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b80      	cmp	r3, #128	; 0x80
 80048ee:	d10f      	bne.n	8004910 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	2280      	movs	r2, #128	; 0x80
 80048f8:	4013      	ands	r3, r2
 80048fa:	2b80      	cmp	r3, #128	; 0x80
 80048fc:	d108      	bne.n	8004910 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2281      	movs	r2, #129	; 0x81
 8004904:	4252      	negs	r2, r2
 8004906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	0018      	movs	r0, r3
 800490c:	f000 fc10 	bl	8005130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2240      	movs	r2, #64	; 0x40
 8004918:	4013      	ands	r3, r2
 800491a:	2b40      	cmp	r3, #64	; 0x40
 800491c:	d10f      	bne.n	800493e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	2240      	movs	r2, #64	; 0x40
 8004926:	4013      	ands	r3, r2
 8004928:	2b40      	cmp	r3, #64	; 0x40
 800492a:	d108      	bne.n	800493e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2241      	movs	r2, #65	; 0x41
 8004932:	4252      	negs	r2, r2
 8004934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0018      	movs	r0, r3
 800493a:	f000 f8eb 	bl	8004b14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	2220      	movs	r2, #32
 8004946:	4013      	ands	r3, r2
 8004948:	2b20      	cmp	r3, #32
 800494a:	d10f      	bne.n	800496c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	4013      	ands	r3, r2
 8004956:	2b20      	cmp	r3, #32
 8004958:	d108      	bne.n	800496c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2221      	movs	r2, #33	; 0x21
 8004960:	4252      	negs	r2, r2
 8004962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	0018      	movs	r0, r3
 8004968:	f000 fbda 	bl	8005120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800496c:	46c0      	nop			; (mov r8, r8)
 800496e:	46bd      	mov	sp, r7
 8004970:	b002      	add	sp, #8
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	223c      	movs	r2, #60	; 0x3c
 8004984:	5c9b      	ldrb	r3, [r3, r2]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800498a:	2302      	movs	r3, #2
 800498c:	e0a4      	b.n	8004ad8 <HAL_TIM_PWM_ConfigChannel+0x164>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	223c      	movs	r2, #60	; 0x3c
 8004992:	2101      	movs	r1, #1
 8004994:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	223d      	movs	r2, #61	; 0x3d
 800499a:	2102      	movs	r1, #2
 800499c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d029      	beq.n	80049f8 <HAL_TIM_PWM_ConfigChannel+0x84>
 80049a4:	d802      	bhi.n	80049ac <HAL_TIM_PWM_ConfigChannel+0x38>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80049aa:	e08c      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d046      	beq.n	8004a3e <HAL_TIM_PWM_ConfigChannel+0xca>
 80049b0:	2b0c      	cmp	r3, #12
 80049b2:	d065      	beq.n	8004a80 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80049b4:	e087      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	0011      	movs	r1, r2
 80049be:	0018      	movs	r0, r3
 80049c0:	f000 f930 	bl	8004c24 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2108      	movs	r1, #8
 80049d0:	430a      	orrs	r2, r1
 80049d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2104      	movs	r1, #4
 80049e0:	438a      	bics	r2, r1
 80049e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6999      	ldr	r1, [r3, #24]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	691a      	ldr	r2, [r3, #16]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	619a      	str	r2, [r3, #24]
      break;
 80049f6:	e066      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	0011      	movs	r1, r2
 8004a00:	0018      	movs	r0, r3
 8004a02:	f000 f997 	bl	8004d34 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699a      	ldr	r2, [r3, #24]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2180      	movs	r1, #128	; 0x80
 8004a12:	0109      	lsls	r1, r1, #4
 8004a14:	430a      	orrs	r2, r1
 8004a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	492f      	ldr	r1, [pc, #188]	; (8004ae0 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8004a24:	400a      	ands	r2, r1
 8004a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6999      	ldr	r1, [r3, #24]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	021a      	lsls	r2, r3, #8
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	619a      	str	r2, [r3, #24]
      break;
 8004a3c:	e043      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	0011      	movs	r1, r2
 8004a46:	0018      	movs	r0, r3
 8004a48:	f000 f9f8 	bl	8004e3c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69da      	ldr	r2, [r3, #28]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2108      	movs	r1, #8
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69da      	ldr	r2, [r3, #28]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2104      	movs	r1, #4
 8004a68:	438a      	bics	r2, r1
 8004a6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69d9      	ldr	r1, [r3, #28]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	61da      	str	r2, [r3, #28]
      break;
 8004a7e:	e022      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	0011      	movs	r1, r2
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f000 fa5d 	bl	8004f48 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2180      	movs	r1, #128	; 0x80
 8004a9a:	0109      	lsls	r1, r1, #4
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	69da      	ldr	r2, [r3, #28]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	490d      	ldr	r1, [pc, #52]	; (8004ae0 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8004aac:	400a      	ands	r2, r1
 8004aae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69d9      	ldr	r1, [r3, #28]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	021a      	lsls	r2, r3, #8
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	61da      	str	r2, [r3, #28]
      break;
 8004ac4:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	223d      	movs	r2, #61	; 0x3d
 8004aca:	2101      	movs	r1, #1
 8004acc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	223c      	movs	r2, #60	; 0x3c
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	0018      	movs	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b004      	add	sp, #16
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	fffffbff 	.word	0xfffffbff

08004ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aec:	46c0      	nop			; (mov r8, r8)
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b002      	add	sp, #8
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004afc:	46c0      	nop			; (mov r8, r8)
 8004afe:	46bd      	mov	sp, r7
 8004b00:	b002      	add	sp, #8
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b0c:	46c0      	nop			; (mov r8, r8)
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b002      	add	sp, #8
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b1c:	46c0      	nop			; (mov r8, r8)
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b002      	add	sp, #8
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a34      	ldr	r2, [pc, #208]	; (8004c08 <TIM_Base_SetConfig+0xe4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d008      	beq.n	8004b4e <TIM_Base_SetConfig+0x2a>
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	05db      	lsls	r3, r3, #23
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d003      	beq.n	8004b4e <TIM_Base_SetConfig+0x2a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a30      	ldr	r2, [pc, #192]	; (8004c0c <TIM_Base_SetConfig+0xe8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d108      	bne.n	8004b60 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2270      	movs	r2, #112	; 0x70
 8004b52:	4393      	bics	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a29      	ldr	r2, [pc, #164]	; (8004c08 <TIM_Base_SetConfig+0xe4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d018      	beq.n	8004b9a <TIM_Base_SetConfig+0x76>
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	2380      	movs	r3, #128	; 0x80
 8004b6c:	05db      	lsls	r3, r3, #23
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d013      	beq.n	8004b9a <TIM_Base_SetConfig+0x76>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a25      	ldr	r2, [pc, #148]	; (8004c0c <TIM_Base_SetConfig+0xe8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00f      	beq.n	8004b9a <TIM_Base_SetConfig+0x76>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a24      	ldr	r2, [pc, #144]	; (8004c10 <TIM_Base_SetConfig+0xec>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00b      	beq.n	8004b9a <TIM_Base_SetConfig+0x76>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a23      	ldr	r2, [pc, #140]	; (8004c14 <TIM_Base_SetConfig+0xf0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d007      	beq.n	8004b9a <TIM_Base_SetConfig+0x76>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a22      	ldr	r2, [pc, #136]	; (8004c18 <TIM_Base_SetConfig+0xf4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d003      	beq.n	8004b9a <TIM_Base_SetConfig+0x76>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a21      	ldr	r2, [pc, #132]	; (8004c1c <TIM_Base_SetConfig+0xf8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d108      	bne.n	8004bac <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4a20      	ldr	r2, [pc, #128]	; (8004c20 <TIM_Base_SetConfig+0xfc>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2280      	movs	r2, #128	; 0x80
 8004bb0:	4393      	bics	r3, r2
 8004bb2:	001a      	movs	r2, r3
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a0c      	ldr	r2, [pc, #48]	; (8004c08 <TIM_Base_SetConfig+0xe4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xce>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a0d      	ldr	r2, [pc, #52]	; (8004c14 <TIM_Base_SetConfig+0xf0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d007      	beq.n	8004bf2 <TIM_Base_SetConfig+0xce>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a0c      	ldr	r2, [pc, #48]	; (8004c18 <TIM_Base_SetConfig+0xf4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d003      	beq.n	8004bf2 <TIM_Base_SetConfig+0xce>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a0b      	ldr	r2, [pc, #44]	; (8004c1c <TIM_Base_SetConfig+0xf8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d103      	bne.n	8004bfa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	615a      	str	r2, [r3, #20]
}
 8004c00:	46c0      	nop			; (mov r8, r8)
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b004      	add	sp, #16
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	40000400 	.word	0x40000400
 8004c10:	40002000 	.word	0x40002000
 8004c14:	40014000 	.word	0x40014000
 8004c18:	40014400 	.word	0x40014400
 8004c1c:	40014800 	.word	0x40014800
 8004c20:	fffffcff 	.word	0xfffffcff

08004c24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	2201      	movs	r2, #1
 8004c34:	4393      	bics	r3, r2
 8004c36:	001a      	movs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2270      	movs	r2, #112	; 0x70
 8004c52:	4393      	bics	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2203      	movs	r2, #3
 8004c5a:	4393      	bics	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	4393      	bics	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a27      	ldr	r2, [pc, #156]	; (8004d1c <TIM_OC1_SetConfig+0xf8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00b      	beq.n	8004c9a <TIM_OC1_SetConfig+0x76>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a26      	ldr	r2, [pc, #152]	; (8004d20 <TIM_OC1_SetConfig+0xfc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <TIM_OC1_SetConfig+0x76>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a25      	ldr	r2, [pc, #148]	; (8004d24 <TIM_OC1_SetConfig+0x100>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_OC1_SetConfig+0x76>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a24      	ldr	r2, [pc, #144]	; (8004d28 <TIM_OC1_SetConfig+0x104>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d10c      	bne.n	8004cb4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2208      	movs	r2, #8
 8004c9e:	4393      	bics	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2204      	movs	r2, #4
 8004cb0:	4393      	bics	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a19      	ldr	r2, [pc, #100]	; (8004d1c <TIM_OC1_SetConfig+0xf8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00b      	beq.n	8004cd4 <TIM_OC1_SetConfig+0xb0>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a18      	ldr	r2, [pc, #96]	; (8004d20 <TIM_OC1_SetConfig+0xfc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d007      	beq.n	8004cd4 <TIM_OC1_SetConfig+0xb0>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a17      	ldr	r2, [pc, #92]	; (8004d24 <TIM_OC1_SetConfig+0x100>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d003      	beq.n	8004cd4 <TIM_OC1_SetConfig+0xb0>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a16      	ldr	r2, [pc, #88]	; (8004d28 <TIM_OC1_SetConfig+0x104>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d111      	bne.n	8004cf8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <TIM_OC1_SetConfig+0x108>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4a14      	ldr	r2, [pc, #80]	; (8004d30 <TIM_OC1_SetConfig+0x10c>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	621a      	str	r2, [r3, #32]
}
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b006      	add	sp, #24
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40014400 	.word	0x40014400
 8004d28:	40014800 	.word	0x40014800
 8004d2c:	fffffeff 	.word	0xfffffeff
 8004d30:	fffffdff 	.word	0xfffffdff

08004d34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	2210      	movs	r2, #16
 8004d44:	4393      	bics	r3, r2
 8004d46:	001a      	movs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4a2e      	ldr	r2, [pc, #184]	; (8004e1c <TIM_OC2_SetConfig+0xe8>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4a2d      	ldr	r2, [pc, #180]	; (8004e20 <TIM_OC2_SetConfig+0xec>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	4393      	bics	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a24      	ldr	r2, [pc, #144]	; (8004e24 <TIM_OC2_SetConfig+0xf0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d10d      	bne.n	8004db2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2280      	movs	r2, #128	; 0x80
 8004d9a:	4393      	bics	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2240      	movs	r2, #64	; 0x40
 8004dae:	4393      	bics	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a1b      	ldr	r2, [pc, #108]	; (8004e24 <TIM_OC2_SetConfig+0xf0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00b      	beq.n	8004dd2 <TIM_OC2_SetConfig+0x9e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a1a      	ldr	r2, [pc, #104]	; (8004e28 <TIM_OC2_SetConfig+0xf4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d007      	beq.n	8004dd2 <TIM_OC2_SetConfig+0x9e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a19      	ldr	r2, [pc, #100]	; (8004e2c <TIM_OC2_SetConfig+0xf8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d003      	beq.n	8004dd2 <TIM_OC2_SetConfig+0x9e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a18      	ldr	r2, [pc, #96]	; (8004e30 <TIM_OC2_SetConfig+0xfc>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d113      	bne.n	8004dfa <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	4a17      	ldr	r2, [pc, #92]	; (8004e34 <TIM_OC2_SetConfig+0x100>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4a16      	ldr	r2, [pc, #88]	; (8004e38 <TIM_OC2_SetConfig+0x104>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	621a      	str	r2, [r3, #32]
}
 8004e14:	46c0      	nop			; (mov r8, r8)
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b006      	add	sp, #24
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	ffff8fff 	.word	0xffff8fff
 8004e20:	fffffcff 	.word	0xfffffcff
 8004e24:	40012c00 	.word	0x40012c00
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400
 8004e30:	40014800 	.word	0x40014800
 8004e34:	fffffbff 	.word	0xfffffbff
 8004e38:	fffff7ff 	.word	0xfffff7ff

08004e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	4a35      	ldr	r2, [pc, #212]	; (8004f20 <TIM_OC3_SetConfig+0xe4>)
 8004e4c:	401a      	ands	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2270      	movs	r2, #112	; 0x70
 8004e68:	4393      	bics	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2203      	movs	r2, #3
 8004e70:	4393      	bics	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	4a28      	ldr	r2, [pc, #160]	; (8004f24 <TIM_OC3_SetConfig+0xe8>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a24      	ldr	r2, [pc, #144]	; (8004f28 <TIM_OC3_SetConfig+0xec>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d10d      	bne.n	8004eb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	4a23      	ldr	r2, [pc, #140]	; (8004f2c <TIM_OC3_SetConfig+0xf0>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	4a1f      	ldr	r2, [pc, #124]	; (8004f30 <TIM_OC3_SetConfig+0xf4>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a1b      	ldr	r2, [pc, #108]	; (8004f28 <TIM_OC3_SetConfig+0xec>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00b      	beq.n	8004ed6 <TIM_OC3_SetConfig+0x9a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a1c      	ldr	r2, [pc, #112]	; (8004f34 <TIM_OC3_SetConfig+0xf8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d007      	beq.n	8004ed6 <TIM_OC3_SetConfig+0x9a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a1b      	ldr	r2, [pc, #108]	; (8004f38 <TIM_OC3_SetConfig+0xfc>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d003      	beq.n	8004ed6 <TIM_OC3_SetConfig+0x9a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a1a      	ldr	r2, [pc, #104]	; (8004f3c <TIM_OC3_SetConfig+0x100>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d113      	bne.n	8004efe <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <TIM_OC3_SetConfig+0x104>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4a18      	ldr	r2, [pc, #96]	; (8004f44 <TIM_OC3_SetConfig+0x108>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	621a      	str	r2, [r3, #32]
}
 8004f18:	46c0      	nop			; (mov r8, r8)
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b006      	add	sp, #24
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	fffffeff 	.word	0xfffffeff
 8004f24:	fffffdff 	.word	0xfffffdff
 8004f28:	40012c00 	.word	0x40012c00
 8004f2c:	fffff7ff 	.word	0xfffff7ff
 8004f30:	fffffbff 	.word	0xfffffbff
 8004f34:	40014000 	.word	0x40014000
 8004f38:	40014400 	.word	0x40014400
 8004f3c:	40014800 	.word	0x40014800
 8004f40:	ffffefff 	.word	0xffffefff
 8004f44:	ffffdfff 	.word	0xffffdfff

08004f48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	4a28      	ldr	r2, [pc, #160]	; (8004ff8 <TIM_OC4_SetConfig+0xb0>)
 8004f58:	401a      	ands	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4a22      	ldr	r2, [pc, #136]	; (8004ffc <TIM_OC4_SetConfig+0xb4>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4a21      	ldr	r2, [pc, #132]	; (8005000 <TIM_OC4_SetConfig+0xb8>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	021b      	lsls	r3, r3, #8
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4a1d      	ldr	r2, [pc, #116]	; (8005004 <TIM_OC4_SetConfig+0xbc>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	031b      	lsls	r3, r3, #12
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a19      	ldr	r2, [pc, #100]	; (8005008 <TIM_OC4_SetConfig+0xc0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00b      	beq.n	8004fc0 <TIM_OC4_SetConfig+0x78>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a18      	ldr	r2, [pc, #96]	; (800500c <TIM_OC4_SetConfig+0xc4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d007      	beq.n	8004fc0 <TIM_OC4_SetConfig+0x78>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a17      	ldr	r2, [pc, #92]	; (8005010 <TIM_OC4_SetConfig+0xc8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_OC4_SetConfig+0x78>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a16      	ldr	r2, [pc, #88]	; (8005014 <TIM_OC4_SetConfig+0xcc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d109      	bne.n	8004fd4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	4a15      	ldr	r2, [pc, #84]	; (8005018 <TIM_OC4_SetConfig+0xd0>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	019b      	lsls	r3, r3, #6
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	b006      	add	sp, #24
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	ffffefff 	.word	0xffffefff
 8004ffc:	ffff8fff 	.word	0xffff8fff
 8005000:	fffffcff 	.word	0xfffffcff
 8005004:	ffffdfff 	.word	0xffffdfff
 8005008:	40012c00 	.word	0x40012c00
 800500c:	40014000 	.word	0x40014000
 8005010:	40014400 	.word	0x40014400
 8005014:	40014800 	.word	0x40014800
 8005018:	ffffbfff 	.word	0xffffbfff

0800501c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	221f      	movs	r2, #31
 800502c:	4013      	ands	r3, r2
 800502e:	2201      	movs	r2, #1
 8005030:	409a      	lsls	r2, r3
 8005032:	0013      	movs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	43d2      	mvns	r2, r2
 800503e:	401a      	ands	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a1a      	ldr	r2, [r3, #32]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	211f      	movs	r1, #31
 800504c:	400b      	ands	r3, r1
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	4099      	lsls	r1, r3
 8005052:	000b      	movs	r3, r1
 8005054:	431a      	orrs	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	621a      	str	r2, [r3, #32]
}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	46bd      	mov	sp, r7
 800505e:	b006      	add	sp, #24
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	223c      	movs	r2, #60	; 0x3c
 8005072:	5c9b      	ldrb	r3, [r3, r2]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005078:	2302      	movs	r3, #2
 800507a:	e047      	b.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	223c      	movs	r2, #60	; 0x3c
 8005080:	2101      	movs	r1, #1
 8005082:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	223d      	movs	r2, #61	; 0x3d
 8005088:	2102      	movs	r1, #2
 800508a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2270      	movs	r2, #112	; 0x70
 80050a0:	4393      	bics	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a16      	ldr	r2, [pc, #88]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00f      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	05db      	lsls	r3, r3, #23
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d009      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a11      	ldr	r2, [pc, #68]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a10      	ldr	r2, [pc, #64]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10c      	bne.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2280      	movs	r2, #128	; 0x80
 80050e4:	4393      	bics	r3, r2
 80050e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	223d      	movs	r2, #61	; 0x3d
 80050fe:	2101      	movs	r1, #1
 8005100:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	223c      	movs	r2, #60	; 0x3c
 8005106:	2100      	movs	r1, #0
 8005108:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	0018      	movs	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	b004      	add	sp, #16
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40012c00 	.word	0x40012c00
 8005118:	40000400 	.word	0x40000400
 800511c:	40014000 	.word	0x40014000

08005120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005128:	46c0      	nop			; (mov r8, r8)
 800512a:	46bd      	mov	sp, r7
 800512c:	b002      	add	sp, #8
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005138:	46c0      	nop			; (mov r8, r8)
 800513a:	46bd      	mov	sp, r7
 800513c:	b002      	add	sp, #8
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e044      	b.n	80051dc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005156:	2b00      	cmp	r3, #0
 8005158:	d107      	bne.n	800516a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2270      	movs	r2, #112	; 0x70
 800515e:	2100      	movs	r1, #0
 8005160:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	0018      	movs	r0, r3
 8005166:	f7fd fbbf 	bl	80028e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2224      	movs	r2, #36	; 0x24
 800516e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2101      	movs	r1, #1
 800517c:	438a      	bics	r2, r1
 800517e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	0018      	movs	r0, r3
 8005184:	f000 f830 	bl	80051e8 <UART_SetConfig>
 8005188:	0003      	movs	r3, r0
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e024      	b.n	80051dc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	0018      	movs	r0, r3
 800519e:	f000 f9ef 	bl	8005580 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	490d      	ldr	r1, [pc, #52]	; (80051e4 <HAL_UART_Init+0xa4>)
 80051ae:	400a      	ands	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	212a      	movs	r1, #42	; 0x2a
 80051be:	438a      	bics	r2, r1
 80051c0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2101      	movs	r1, #1
 80051ce:	430a      	orrs	r2, r1
 80051d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	0018      	movs	r0, r3
 80051d6:	f000 fa87 	bl	80056e8 <UART_CheckIdleState>
 80051da:	0003      	movs	r3, r0
}
 80051dc:	0018      	movs	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	b002      	add	sp, #8
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	ffffb7ff 	.word	0xffffb7ff

080051e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80051f4:	2317      	movs	r3, #23
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4ac5      	ldr	r2, [pc, #788]	; (8005530 <UART_SetConfig+0x348>)
 800521c:	4013      	ands	r3, r2
 800521e:	0019      	movs	r1, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	430a      	orrs	r2, r1
 8005228:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	4ac0      	ldr	r2, [pc, #768]	; (8005534 <UART_SetConfig+0x34c>)
 8005232:	4013      	ands	r3, r2
 8005234:	0019      	movs	r1, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	4ab7      	ldr	r2, [pc, #732]	; (8005538 <UART_SetConfig+0x350>)
 800525a:	4013      	ands	r3, r2
 800525c:	0019      	movs	r1, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	430a      	orrs	r2, r1
 8005266:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4ab3      	ldr	r2, [pc, #716]	; (800553c <UART_SetConfig+0x354>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d125      	bne.n	80052be <UART_SetConfig+0xd6>
 8005272:	4bb3      	ldr	r3, [pc, #716]	; (8005540 <UART_SetConfig+0x358>)
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	2203      	movs	r2, #3
 8005278:	4013      	ands	r3, r2
 800527a:	2b01      	cmp	r3, #1
 800527c:	d00f      	beq.n	800529e <UART_SetConfig+0xb6>
 800527e:	d304      	bcc.n	800528a <UART_SetConfig+0xa2>
 8005280:	2b02      	cmp	r3, #2
 8005282:	d011      	beq.n	80052a8 <UART_SetConfig+0xc0>
 8005284:	2b03      	cmp	r3, #3
 8005286:	d005      	beq.n	8005294 <UART_SetConfig+0xac>
 8005288:	e013      	b.n	80052b2 <UART_SetConfig+0xca>
 800528a:	231f      	movs	r3, #31
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	2200      	movs	r2, #0
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	e064      	b.n	800535e <UART_SetConfig+0x176>
 8005294:	231f      	movs	r3, #31
 8005296:	18fb      	adds	r3, r7, r3
 8005298:	2202      	movs	r2, #2
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	e05f      	b.n	800535e <UART_SetConfig+0x176>
 800529e:	231f      	movs	r3, #31
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	2204      	movs	r2, #4
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	e05a      	b.n	800535e <UART_SetConfig+0x176>
 80052a8:	231f      	movs	r3, #31
 80052aa:	18fb      	adds	r3, r7, r3
 80052ac:	2208      	movs	r2, #8
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	e055      	b.n	800535e <UART_SetConfig+0x176>
 80052b2:	231f      	movs	r3, #31
 80052b4:	18fb      	adds	r3, r7, r3
 80052b6:	2210      	movs	r2, #16
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	e04f      	b.n	800535e <UART_SetConfig+0x176>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4aa0      	ldr	r2, [pc, #640]	; (8005544 <UART_SetConfig+0x35c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d132      	bne.n	800532e <UART_SetConfig+0x146>
 80052c8:	4b9d      	ldr	r3, [pc, #628]	; (8005540 <UART_SetConfig+0x358>)
 80052ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052cc:	23c0      	movs	r3, #192	; 0xc0
 80052ce:	029b      	lsls	r3, r3, #10
 80052d0:	4013      	ands	r3, r2
 80052d2:	2280      	movs	r2, #128	; 0x80
 80052d4:	0252      	lsls	r2, r2, #9
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d019      	beq.n	800530e <UART_SetConfig+0x126>
 80052da:	2280      	movs	r2, #128	; 0x80
 80052dc:	0252      	lsls	r2, r2, #9
 80052de:	4293      	cmp	r3, r2
 80052e0:	d802      	bhi.n	80052e8 <UART_SetConfig+0x100>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <UART_SetConfig+0x112>
 80052e6:	e01c      	b.n	8005322 <UART_SetConfig+0x13a>
 80052e8:	2280      	movs	r2, #128	; 0x80
 80052ea:	0292      	lsls	r2, r2, #10
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d013      	beq.n	8005318 <UART_SetConfig+0x130>
 80052f0:	22c0      	movs	r2, #192	; 0xc0
 80052f2:	0292      	lsls	r2, r2, #10
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d005      	beq.n	8005304 <UART_SetConfig+0x11c>
 80052f8:	e013      	b.n	8005322 <UART_SetConfig+0x13a>
 80052fa:	231f      	movs	r3, #31
 80052fc:	18fb      	adds	r3, r7, r3
 80052fe:	2200      	movs	r2, #0
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	e02c      	b.n	800535e <UART_SetConfig+0x176>
 8005304:	231f      	movs	r3, #31
 8005306:	18fb      	adds	r3, r7, r3
 8005308:	2202      	movs	r2, #2
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	e027      	b.n	800535e <UART_SetConfig+0x176>
 800530e:	231f      	movs	r3, #31
 8005310:	18fb      	adds	r3, r7, r3
 8005312:	2204      	movs	r2, #4
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	e022      	b.n	800535e <UART_SetConfig+0x176>
 8005318:	231f      	movs	r3, #31
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	2208      	movs	r2, #8
 800531e:	701a      	strb	r2, [r3, #0]
 8005320:	e01d      	b.n	800535e <UART_SetConfig+0x176>
 8005322:	231f      	movs	r3, #31
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	2210      	movs	r2, #16
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	e017      	b.n	800535e <UART_SetConfig+0x176>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a85      	ldr	r2, [pc, #532]	; (8005548 <UART_SetConfig+0x360>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d104      	bne.n	8005342 <UART_SetConfig+0x15a>
 8005338:	231f      	movs	r3, #31
 800533a:	18fb      	adds	r3, r7, r3
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	e00d      	b.n	800535e <UART_SetConfig+0x176>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a81      	ldr	r2, [pc, #516]	; (800554c <UART_SetConfig+0x364>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d104      	bne.n	8005356 <UART_SetConfig+0x16e>
 800534c:	231f      	movs	r3, #31
 800534e:	18fb      	adds	r3, r7, r3
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
 8005354:	e003      	b.n	800535e <UART_SetConfig+0x176>
 8005356:	231f      	movs	r3, #31
 8005358:	18fb      	adds	r3, r7, r3
 800535a:	2210      	movs	r2, #16
 800535c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69da      	ldr	r2, [r3, #28]
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	429a      	cmp	r2, r3
 8005368:	d000      	beq.n	800536c <UART_SetConfig+0x184>
 800536a:	e07d      	b.n	8005468 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 800536c:	231f      	movs	r3, #31
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d01c      	beq.n	80053b0 <UART_SetConfig+0x1c8>
 8005376:	dc02      	bgt.n	800537e <UART_SetConfig+0x196>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d005      	beq.n	8005388 <UART_SetConfig+0x1a0>
 800537c:	e04b      	b.n	8005416 <UART_SetConfig+0x22e>
 800537e:	2b04      	cmp	r3, #4
 8005380:	d025      	beq.n	80053ce <UART_SetConfig+0x1e6>
 8005382:	2b08      	cmp	r3, #8
 8005384:	d037      	beq.n	80053f6 <UART_SetConfig+0x20e>
 8005386:	e046      	b.n	8005416 <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005388:	f7fe ff6c 	bl	8004264 <HAL_RCC_GetPCLK1Freq>
 800538c:	0003      	movs	r3, r0
 800538e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	005a      	lsls	r2, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	085b      	lsrs	r3, r3, #1
 800539a:	18d2      	adds	r2, r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	0019      	movs	r1, r3
 80053a2:	0010      	movs	r0, r2
 80053a4:	f7fa feb0 	bl	8000108 <__udivsi3>
 80053a8:	0003      	movs	r3, r0
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	61bb      	str	r3, [r7, #24]
        break;
 80053ae:	e037      	b.n	8005420 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	4a66      	ldr	r2, [pc, #408]	; (8005550 <UART_SetConfig+0x368>)
 80053b8:	189a      	adds	r2, r3, r2
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	0019      	movs	r1, r3
 80053c0:	0010      	movs	r0, r2
 80053c2:	f7fa fea1 	bl	8000108 <__udivsi3>
 80053c6:	0003      	movs	r3, r0
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	61bb      	str	r3, [r7, #24]
        break;
 80053cc:	e028      	b.n	8005420 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ce:	f7fe fec1 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 80053d2:	0003      	movs	r3, r0
 80053d4:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	005a      	lsls	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	085b      	lsrs	r3, r3, #1
 80053e0:	18d2      	adds	r2, r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	0019      	movs	r1, r3
 80053e8:	0010      	movs	r0, r2
 80053ea:	f7fa fe8d 	bl	8000108 <__udivsi3>
 80053ee:	0003      	movs	r3, r0
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	61bb      	str	r3, [r7, #24]
        break;
 80053f4:	e014      	b.n	8005420 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	2280      	movs	r2, #128	; 0x80
 80053fe:	0252      	lsls	r2, r2, #9
 8005400:	189a      	adds	r2, r3, r2
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	0019      	movs	r1, r3
 8005408:	0010      	movs	r0, r2
 800540a:	f7fa fe7d 	bl	8000108 <__udivsi3>
 800540e:	0003      	movs	r3, r0
 8005410:	b29b      	uxth	r3, r3
 8005412:	61bb      	str	r3, [r7, #24]
        break;
 8005414:	e004      	b.n	8005420 <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 8005416:	2317      	movs	r3, #23
 8005418:	18fb      	adds	r3, r7, r3
 800541a:	2201      	movs	r2, #1
 800541c:	701a      	strb	r2, [r3, #0]
        break;
 800541e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2b0f      	cmp	r3, #15
 8005424:	d91b      	bls.n	800545e <UART_SetConfig+0x276>
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	4a4a      	ldr	r2, [pc, #296]	; (8005554 <UART_SetConfig+0x36c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d817      	bhi.n	800545e <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	b29a      	uxth	r2, r3
 8005432:	200a      	movs	r0, #10
 8005434:	183b      	adds	r3, r7, r0
 8005436:	210f      	movs	r1, #15
 8005438:	438a      	bics	r2, r1
 800543a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	085b      	lsrs	r3, r3, #1
 8005440:	b29b      	uxth	r3, r3
 8005442:	2207      	movs	r2, #7
 8005444:	4013      	ands	r3, r2
 8005446:	b299      	uxth	r1, r3
 8005448:	183b      	adds	r3, r7, r0
 800544a:	183a      	adds	r2, r7, r0
 800544c:	8812      	ldrh	r2, [r2, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	183a      	adds	r2, r7, r0
 8005458:	8812      	ldrh	r2, [r2, #0]
 800545a:	60da      	str	r2, [r3, #12]
 800545c:	e082      	b.n	8005564 <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 800545e:	2317      	movs	r3, #23
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	2201      	movs	r2, #1
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	e07d      	b.n	8005564 <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 8005468:	231f      	movs	r3, #31
 800546a:	18fb      	adds	r3, r7, r3
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d01b      	beq.n	80054aa <UART_SetConfig+0x2c2>
 8005472:	dc02      	bgt.n	800547a <UART_SetConfig+0x292>
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <UART_SetConfig+0x29c>
 8005478:	e049      	b.n	800550e <UART_SetConfig+0x326>
 800547a:	2b04      	cmp	r3, #4
 800547c:	d024      	beq.n	80054c8 <UART_SetConfig+0x2e0>
 800547e:	2b08      	cmp	r3, #8
 8005480:	d035      	beq.n	80054ee <UART_SetConfig+0x306>
 8005482:	e044      	b.n	800550e <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005484:	f7fe feee 	bl	8004264 <HAL_RCC_GetPCLK1Freq>
 8005488:	0003      	movs	r3, r0
 800548a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	085a      	lsrs	r2, r3, #1
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	18d2      	adds	r2, r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	0019      	movs	r1, r3
 800549c:	0010      	movs	r0, r2
 800549e:	f7fa fe33 	bl	8000108 <__udivsi3>
 80054a2:	0003      	movs	r3, r0
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	61bb      	str	r3, [r7, #24]
        break;
 80054a8:	e036      	b.n	8005518 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	085b      	lsrs	r3, r3, #1
 80054b0:	4a29      	ldr	r2, [pc, #164]	; (8005558 <UART_SetConfig+0x370>)
 80054b2:	189a      	adds	r2, r3, r2
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	0019      	movs	r1, r3
 80054ba:	0010      	movs	r0, r2
 80054bc:	f7fa fe24 	bl	8000108 <__udivsi3>
 80054c0:	0003      	movs	r3, r0
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	61bb      	str	r3, [r7, #24]
        break;
 80054c6:	e027      	b.n	8005518 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054c8:	f7fe fe44 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 80054cc:	0003      	movs	r3, r0
 80054ce:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	085a      	lsrs	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	18d2      	adds	r2, r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	0019      	movs	r1, r3
 80054e0:	0010      	movs	r0, r2
 80054e2:	f7fa fe11 	bl	8000108 <__udivsi3>
 80054e6:	0003      	movs	r3, r0
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	61bb      	str	r3, [r7, #24]
        break;
 80054ec:	e014      	b.n	8005518 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	2280      	movs	r2, #128	; 0x80
 80054f6:	0212      	lsls	r2, r2, #8
 80054f8:	189a      	adds	r2, r3, r2
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	0019      	movs	r1, r3
 8005500:	0010      	movs	r0, r2
 8005502:	f7fa fe01 	bl	8000108 <__udivsi3>
 8005506:	0003      	movs	r3, r0
 8005508:	b29b      	uxth	r3, r3
 800550a:	61bb      	str	r3, [r7, #24]
        break;
 800550c:	e004      	b.n	8005518 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 800550e:	2317      	movs	r3, #23
 8005510:	18fb      	adds	r3, r7, r3
 8005512:	2201      	movs	r2, #1
 8005514:	701a      	strb	r2, [r3, #0]
        break;
 8005516:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	2b0f      	cmp	r3, #15
 800551c:	d91e      	bls.n	800555c <UART_SetConfig+0x374>
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	4a0c      	ldr	r2, [pc, #48]	; (8005554 <UART_SetConfig+0x36c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d81a      	bhi.n	800555c <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	60da      	str	r2, [r3, #12]
 800552e:	e019      	b.n	8005564 <UART_SetConfig+0x37c>
 8005530:	efff69f3 	.word	0xefff69f3
 8005534:	ffffcfff 	.word	0xffffcfff
 8005538:	fffff4ff 	.word	0xfffff4ff
 800553c:	40013800 	.word	0x40013800
 8005540:	40021000 	.word	0x40021000
 8005544:	40004400 	.word	0x40004400
 8005548:	40004800 	.word	0x40004800
 800554c:	40004c00 	.word	0x40004c00
 8005550:	00f42400 	.word	0x00f42400
 8005554:	0000ffff 	.word	0x0000ffff
 8005558:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 800555c:	2317      	movs	r3, #23
 800555e:	18fb      	adds	r3, r7, r3
 8005560:	2201      	movs	r2, #1
 8005562:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005570:	2317      	movs	r3, #23
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	781b      	ldrb	r3, [r3, #0]
}
 8005576:	0018      	movs	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	b008      	add	sp, #32
 800557c:	bd80      	pop	{r7, pc}
 800557e:	46c0      	nop			; (mov r8, r8)

08005580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	2201      	movs	r2, #1
 800558e:	4013      	ands	r3, r2
 8005590:	d00b      	beq.n	80055aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	4a4a      	ldr	r2, [pc, #296]	; (80056c4 <UART_AdvFeatureConfig+0x144>)
 800559a:	4013      	ands	r3, r2
 800559c:	0019      	movs	r1, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	2202      	movs	r2, #2
 80055b0:	4013      	ands	r3, r2
 80055b2:	d00b      	beq.n	80055cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	4a43      	ldr	r2, [pc, #268]	; (80056c8 <UART_AdvFeatureConfig+0x148>)
 80055bc:	4013      	ands	r3, r2
 80055be:	0019      	movs	r1, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	2204      	movs	r2, #4
 80055d2:	4013      	ands	r3, r2
 80055d4:	d00b      	beq.n	80055ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4a3b      	ldr	r2, [pc, #236]	; (80056cc <UART_AdvFeatureConfig+0x14c>)
 80055de:	4013      	ands	r3, r2
 80055e0:	0019      	movs	r1, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	2208      	movs	r2, #8
 80055f4:	4013      	ands	r3, r2
 80055f6:	d00b      	beq.n	8005610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	4a34      	ldr	r2, [pc, #208]	; (80056d0 <UART_AdvFeatureConfig+0x150>)
 8005600:	4013      	ands	r3, r2
 8005602:	0019      	movs	r1, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	2210      	movs	r2, #16
 8005616:	4013      	ands	r3, r2
 8005618:	d00b      	beq.n	8005632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	4a2c      	ldr	r2, [pc, #176]	; (80056d4 <UART_AdvFeatureConfig+0x154>)
 8005622:	4013      	ands	r3, r2
 8005624:	0019      	movs	r1, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	2220      	movs	r2, #32
 8005638:	4013      	ands	r3, r2
 800563a:	d00b      	beq.n	8005654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	4a25      	ldr	r2, [pc, #148]	; (80056d8 <UART_AdvFeatureConfig+0x158>)
 8005644:	4013      	ands	r3, r2
 8005646:	0019      	movs	r1, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	2240      	movs	r2, #64	; 0x40
 800565a:	4013      	ands	r3, r2
 800565c:	d01d      	beq.n	800569a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	4a1d      	ldr	r2, [pc, #116]	; (80056dc <UART_AdvFeatureConfig+0x15c>)
 8005666:	4013      	ands	r3, r2
 8005668:	0019      	movs	r1, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	035b      	lsls	r3, r3, #13
 800567e:	429a      	cmp	r2, r3
 8005680:	d10b      	bne.n	800569a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	4a15      	ldr	r2, [pc, #84]	; (80056e0 <UART_AdvFeatureConfig+0x160>)
 800568a:	4013      	ands	r3, r2
 800568c:	0019      	movs	r1, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	2280      	movs	r2, #128	; 0x80
 80056a0:	4013      	ands	r3, r2
 80056a2:	d00b      	beq.n	80056bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	4a0e      	ldr	r2, [pc, #56]	; (80056e4 <UART_AdvFeatureConfig+0x164>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	0019      	movs	r1, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	605a      	str	r2, [r3, #4]
  }
}
 80056bc:	46c0      	nop			; (mov r8, r8)
 80056be:	46bd      	mov	sp, r7
 80056c0:	b002      	add	sp, #8
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	fffdffff 	.word	0xfffdffff
 80056c8:	fffeffff 	.word	0xfffeffff
 80056cc:	fffbffff 	.word	0xfffbffff
 80056d0:	ffff7fff 	.word	0xffff7fff
 80056d4:	ffffefff 	.word	0xffffefff
 80056d8:	ffffdfff 	.word	0xffffdfff
 80056dc:	ffefffff 	.word	0xffefffff
 80056e0:	ff9fffff 	.word	0xff9fffff
 80056e4:	fff7ffff 	.word	0xfff7ffff

080056e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80056f6:	f7fd fa15 	bl	8002b24 <HAL_GetTick>
 80056fa:	0003      	movs	r3, r0
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2208      	movs	r2, #8
 8005706:	4013      	ands	r3, r2
 8005708:	2b08      	cmp	r3, #8
 800570a:	d10d      	bne.n	8005728 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	2380      	movs	r3, #128	; 0x80
 8005710:	0399      	lsls	r1, r3, #14
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	4b16      	ldr	r3, [pc, #88]	; (8005770 <UART_CheckIdleState+0x88>)
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	0013      	movs	r3, r2
 800571a:	2200      	movs	r2, #0
 800571c:	f000 f82a 	bl	8005774 <UART_WaitOnFlagUntilTimeout>
 8005720:	1e03      	subs	r3, r0, #0
 8005722:	d001      	beq.n	8005728 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e01f      	b.n	8005768 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2204      	movs	r2, #4
 8005730:	4013      	ands	r3, r2
 8005732:	2b04      	cmp	r3, #4
 8005734:	d10d      	bne.n	8005752 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	03d9      	lsls	r1, r3, #15
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <UART_CheckIdleState+0x88>)
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	0013      	movs	r3, r2
 8005744:	2200      	movs	r2, #0
 8005746:	f000 f815 	bl	8005774 <UART_WaitOnFlagUntilTimeout>
 800574a:	1e03      	subs	r3, r0, #0
 800574c:	d001      	beq.n	8005752 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e00a      	b.n	8005768 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2270      	movs	r2, #112	; 0x70
 8005762:	2100      	movs	r1, #0
 8005764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	0018      	movs	r0, r3
 800576a:	46bd      	mov	sp, r7
 800576c:	b004      	add	sp, #16
 800576e:	bd80      	pop	{r7, pc}
 8005770:	01ffffff 	.word	0x01ffffff

08005774 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	603b      	str	r3, [r7, #0]
 8005780:	1dfb      	adds	r3, r7, #7
 8005782:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005784:	e05d      	b.n	8005842 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	3301      	adds	r3, #1
 800578a:	d05a      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800578c:	f7fd f9ca 	bl	8002b24 <HAL_GetTick>
 8005790:	0002      	movs	r2, r0
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	429a      	cmp	r2, r3
 800579a:	d302      	bcc.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d11b      	bne.n	80057da <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	492f      	ldr	r1, [pc, #188]	; (800586c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80057ae:	400a      	ands	r2, r1
 80057b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2101      	movs	r1, #1
 80057be:	438a      	bics	r2, r1
 80057c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2220      	movs	r2, #32
 80057c6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2270      	movs	r2, #112	; 0x70
 80057d2:	2100      	movs	r1, #0
 80057d4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e043      	b.n	8005862 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2204      	movs	r2, #4
 80057e2:	4013      	ands	r3, r2
 80057e4:	d02d      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69da      	ldr	r2, [r3, #28]
 80057ec:	2380      	movs	r3, #128	; 0x80
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	401a      	ands	r2, r3
 80057f2:	2380      	movs	r3, #128	; 0x80
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d123      	bne.n	8005842 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2280      	movs	r2, #128	; 0x80
 8005800:	0112      	lsls	r2, r2, #4
 8005802:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4917      	ldr	r1, [pc, #92]	; (800586c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005810:	400a      	ands	r2, r1
 8005812:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2101      	movs	r1, #1
 8005820:	438a      	bics	r2, r1
 8005822:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2220      	movs	r2, #32
 8005828:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2220      	movs	r2, #32
 8005834:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2270      	movs	r2, #112	; 0x70
 800583a:	2100      	movs	r1, #0
 800583c:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e00f      	b.n	8005862 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	4013      	ands	r3, r2
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	425a      	negs	r2, r3
 8005852:	4153      	adcs	r3, r2
 8005854:	b2db      	uxtb	r3, r3
 8005856:	001a      	movs	r2, r3
 8005858:	1dfb      	adds	r3, r7, #7
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d092      	beq.n	8005786 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	0018      	movs	r0, r3
 8005864:	46bd      	mov	sp, r7
 8005866:	b004      	add	sp, #16
 8005868:	bd80      	pop	{r7, pc}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	fffffe5f 	.word	0xfffffe5f

08005870 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005876:	f3ef 8305 	mrs	r3, IPSR
 800587a:	60bb      	str	r3, [r7, #8]
  return(result);
 800587c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800587e:	2b00      	cmp	r3, #0
 8005880:	d109      	bne.n	8005896 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005882:	f3ef 8310 	mrs	r3, PRIMASK
 8005886:	607b      	str	r3, [r7, #4]
  return(result);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <osKernelInitialize+0x2e>
 800588e:	4b0d      	ldr	r3, [pc, #52]	; (80058c4 <osKernelInitialize+0x54>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d103      	bne.n	800589e <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8005896:	2306      	movs	r3, #6
 8005898:	425b      	negs	r3, r3
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	e00c      	b.n	80058b8 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800589e:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <osKernelInitialize+0x54>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d105      	bne.n	80058b2 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80058a6:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <osKernelInitialize+0x54>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	e002      	b.n	80058b8 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 80058b2:	2301      	movs	r3, #1
 80058b4:	425b      	negs	r3, r3
 80058b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80058b8:	68fb      	ldr	r3, [r7, #12]
}
 80058ba:	0018      	movs	r0, r3
 80058bc:	46bd      	mov	sp, r7
 80058be:	b004      	add	sp, #16
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	20000124 	.word	0x20000124

080058c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ce:	f3ef 8305 	mrs	r3, IPSR
 80058d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80058d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058da:	f3ef 8310 	mrs	r3, PRIMASK
 80058de:	607b      	str	r3, [r7, #4]
  return(result);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d007      	beq.n	80058f6 <osKernelStart+0x2e>
 80058e6:	4b0e      	ldr	r3, [pc, #56]	; (8005920 <osKernelStart+0x58>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d103      	bne.n	80058f6 <osKernelStart+0x2e>
    stat = osErrorISR;
 80058ee:	2306      	movs	r3, #6
 80058f0:	425b      	negs	r3, r3
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	e00e      	b.n	8005914 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 80058f6:	4b0a      	ldr	r3, [pc, #40]	; (8005920 <osKernelStart+0x58>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d107      	bne.n	800590e <osKernelStart+0x46>
      KernelState = osKernelRunning;
 80058fe:	4b08      	ldr	r3, [pc, #32]	; (8005920 <osKernelStart+0x58>)
 8005900:	2202      	movs	r2, #2
 8005902:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005904:	f000 ff7e 	bl	8006804 <vTaskStartScheduler>
      stat = osOK;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	e002      	b.n	8005914 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800590e:	2301      	movs	r3, #1
 8005910:	425b      	negs	r3, r3
 8005912:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005914:	68fb      	ldr	r3, [r7, #12]
}
 8005916:	0018      	movs	r0, r3
 8005918:	46bd      	mov	sp, r7
 800591a:	b004      	add	sp, #16
 800591c:	bd80      	pop	{r7, pc}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	20000124 	.word	0x20000124

08005924 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005924:	b5b0      	push	{r4, r5, r7, lr}
 8005926:	b090      	sub	sp, #64	; 0x40
 8005928:	af04      	add	r7, sp, #16
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005930:	2300      	movs	r3, #0
 8005932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005934:	f3ef 8305 	mrs	r3, IPSR
 8005938:	61fb      	str	r3, [r7, #28]
  return(result);
 800593a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800593c:	2b00      	cmp	r3, #0
 800593e:	d000      	beq.n	8005942 <osThreadNew+0x1e>
 8005940:	e090      	b.n	8005a64 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005942:	f3ef 8310 	mrs	r3, PRIMASK
 8005946:	61bb      	str	r3, [r7, #24]
  return(result);
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <osThreadNew+0x34>
 800594e:	4b48      	ldr	r3, [pc, #288]	; (8005a70 <osThreadNew+0x14c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b02      	cmp	r3, #2
 8005954:	d100      	bne.n	8005958 <osThreadNew+0x34>
 8005956:	e085      	b.n	8005a64 <osThreadNew+0x140>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d100      	bne.n	8005960 <osThreadNew+0x3c>
 800595e:	e081      	b.n	8005a64 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8005960:	2380      	movs	r3, #128	; 0x80
 8005962:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005964:	2318      	movs	r3, #24
 8005966:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8005968:	2117      	movs	r1, #23
 800596a:	187b      	adds	r3, r7, r1
 800596c:	2200      	movs	r2, #0
 800596e:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8005970:	187b      	adds	r3, r7, r1
 8005972:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8005974:	2301      	movs	r3, #1
 8005976:	425b      	negs	r3, r3
 8005978:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d044      	beq.n	8005a0a <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <osThreadNew+0x6a>
        name = attr->name;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d007      	beq.n	80059b2 <osThreadNew+0x8e>
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	2b38      	cmp	r3, #56	; 0x38
 80059a6:	d804      	bhi.n	80059b2 <osThreadNew+0x8e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	4013      	ands	r3, r2
 80059b0:	d001      	beq.n	80059b6 <osThreadNew+0x92>
        return (NULL);
 80059b2:	2300      	movs	r3, #0
 80059b4:	e057      	b.n	8005a66 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	089b      	lsrs	r3, r3, #2
 80059c4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00e      	beq.n	80059ec <osThreadNew+0xc8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	2b5b      	cmp	r3, #91	; 0x5b
 80059d4:	d90a      	bls.n	80059ec <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d006      	beq.n	80059ec <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <osThreadNew+0xc8>
        mem = 1;
 80059e6:	2301      	movs	r3, #1
 80059e8:	623b      	str	r3, [r7, #32]
 80059ea:	e010      	b.n	8005a0e <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10c      	bne.n	8005a0e <osThreadNew+0xea>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d108      	bne.n	8005a0e <osThreadNew+0xea>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d104      	bne.n	8005a0e <osThreadNew+0xea>
          mem = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	623b      	str	r3, [r7, #32]
 8005a08:	e001      	b.n	8005a0e <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d112      	bne.n	8005a3a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a1c:	68bd      	ldr	r5, [r7, #8]
 8005a1e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005a20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	9302      	str	r3, [sp, #8]
 8005a26:	9201      	str	r2, [sp, #4]
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	002b      	movs	r3, r5
 8005a2e:	0022      	movs	r2, r4
 8005a30:	f000 fd49 	bl	80064c6 <xTaskCreateStatic>
 8005a34:	0003      	movs	r3, r0
 8005a36:	613b      	str	r3, [r7, #16]
 8005a38:	e014      	b.n	8005a64 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d111      	bne.n	8005a64 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68bc      	ldr	r4, [r7, #8]
 8005a46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	2310      	movs	r3, #16
 8005a4c:	18fb      	adds	r3, r7, r3
 8005a4e:	9301      	str	r3, [sp, #4]
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	0023      	movs	r3, r4
 8005a56:	f000 fd79 	bl	800654c <xTaskCreate>
 8005a5a:	0003      	movs	r3, r0
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d001      	beq.n	8005a64 <osThreadNew+0x140>
          hTask = NULL;
 8005a60:	2300      	movs	r3, #0
 8005a62:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a64:	693b      	ldr	r3, [r7, #16]
}
 8005a66:	0018      	movs	r0, r3
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	b00c      	add	sp, #48	; 0x30
 8005a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	20000124 	.word	0x20000124

08005a74 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a7c:	f3ef 8305 	mrs	r3, IPSR
 8005a80:	613b      	str	r3, [r7, #16]
  return(result);
 8005a82:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d109      	bne.n	8005a9c <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a88:	f3ef 8310 	mrs	r3, PRIMASK
 8005a8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <osDelay+0x30>
 8005a94:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <osDelay+0x4c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d103      	bne.n	8005aa4 <osDelay+0x30>
    stat = osErrorISR;
 8005a9c:	2306      	movs	r3, #6
 8005a9e:	425b      	negs	r3, r3
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	e008      	b.n	8005ab6 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <osDelay+0x42>
      vTaskDelay(ticks);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f000 fe81 	bl	80067b8 <vTaskDelay>
    }
  }

  return (stat);
 8005ab6:	697b      	ldr	r3, [r7, #20]
}
 8005ab8:	0018      	movs	r0, r3
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b006      	add	sp, #24
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	20000124 	.word	0x20000124

08005ac4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4a06      	ldr	r2, [pc, #24]	; (8005aec <vApplicationGetIdleTaskMemory+0x28>)
 8005ad4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4a05      	ldr	r2, [pc, #20]	; (8005af0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005ada:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2280      	movs	r2, #128	; 0x80
 8005ae0:	601a      	str	r2, [r3, #0]
}
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	b004      	add	sp, #16
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	20000128 	.word	0x20000128
 8005af0:	20000184 	.word	0x20000184

08005af4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4a06      	ldr	r2, [pc, #24]	; (8005b1c <vApplicationGetTimerTaskMemory+0x28>)
 8005b04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	4a05      	ldr	r2, [pc, #20]	; (8005b20 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2280      	movs	r2, #128	; 0x80
 8005b10:	0052      	lsls	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]
}
 8005b14:	46c0      	nop			; (mov r8, r8)
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b004      	add	sp, #16
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000384 	.word	0x20000384
 8005b20:	200003e0 	.word	0x200003e0

08005b24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3308      	adds	r3, #8
 8005b30:	001a      	movs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	4252      	negs	r2, r2
 8005b3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3308      	adds	r3, #8
 8005b42:	001a      	movs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	001a      	movs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b58:	46c0      	nop			; (mov r8, r8)
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	b002      	add	sp, #8
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b6e:	46c0      	nop			; (mov r8, r8)
 8005b70:	46bd      	mov	sp, r7
 8005b72:	b002      	add	sp, #8
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	601a      	str	r2, [r3, #0]
}
 8005bb2:	46c0      	nop			; (mov r8, r8)
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	b004      	add	sp, #16
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	d103      	bne.n	8005bd8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	e00c      	b.n	8005bf2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3308      	adds	r3, #8
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	e002      	b.n	8005be6 <vListInsert+0x2c>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d2f6      	bcs.n	8005be0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	601a      	str	r2, [r3, #0]
}
 8005c1e:	46c0      	nop			; (mov r8, r8)
 8005c20:	46bd      	mov	sp, r7
 8005c22:	b004      	add	sp, #16
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6892      	ldr	r2, [r2, #8]
 8005c3c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6852      	ldr	r2, [r2, #4]
 8005c46:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d103      	bne.n	8005c5a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	1e5a      	subs	r2, r3, #1
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
}
 8005c6e:	0018      	movs	r0, r3
 8005c70:	46bd      	mov	sp, r7
 8005c72:	b004      	add	sp, #16
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <xQueueGenericReset+0x18>
 8005c8a:	b672      	cpsid	i
 8005c8c:	e7fe      	b.n	8005c8c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8005c8e:	f001 fdcf 	bl	8007830 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	434b      	muls	r3, r1
 8005ca0:	18d2      	adds	r2, r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbc:	1e59      	subs	r1, r3, #1
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	434b      	muls	r3, r1
 8005cc4:	18d2      	adds	r2, r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2244      	movs	r2, #68	; 0x44
 8005cce:	21ff      	movs	r1, #255	; 0xff
 8005cd0:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2245      	movs	r2, #69	; 0x45
 8005cd6:	21ff      	movs	r1, #255	; 0xff
 8005cd8:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10d      	bne.n	8005cfc <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d013      	beq.n	8005d10 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3310      	adds	r3, #16
 8005cec:	0018      	movs	r0, r3
 8005cee:	f000 ffcd 	bl	8006c8c <xTaskRemoveFromEventList>
 8005cf2:	1e03      	subs	r3, r0, #0
 8005cf4:	d00c      	beq.n	8005d10 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005cf6:	f001 fd8b 	bl	8007810 <vPortYield>
 8005cfa:	e009      	b.n	8005d10 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	3310      	adds	r3, #16
 8005d00:	0018      	movs	r0, r3
 8005d02:	f7ff ff0f 	bl	8005b24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3324      	adds	r3, #36	; 0x24
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f7ff ff0a 	bl	8005b24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d10:	f001 fda0 	bl	8007854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d14:	2301      	movs	r3, #1
}
 8005d16:	0018      	movs	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	b004      	add	sp, #16
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d1e:	b590      	push	{r4, r7, lr}
 8005d20:	b089      	sub	sp, #36	; 0x24
 8005d22:	af02      	add	r7, sp, #8
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	607a      	str	r2, [r7, #4]
 8005d2a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <xQueueGenericCreateStatic+0x18>
 8005d32:	b672      	cpsid	i
 8005d34:	e7fe      	b.n	8005d34 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <xQueueGenericCreateStatic+0x22>
 8005d3c:	b672      	cpsid	i
 8005d3e:	e7fe      	b.n	8005d3e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <xQueueGenericCreateStatic+0x2e>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <xQueueGenericCreateStatic+0x32>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <xQueueGenericCreateStatic+0x34>
 8005d50:	2300      	movs	r3, #0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <xQueueGenericCreateStatic+0x3c>
 8005d56:	b672      	cpsid	i
 8005d58:	e7fe      	b.n	8005d58 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d102      	bne.n	8005d66 <xQueueGenericCreateStatic+0x48>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <xQueueGenericCreateStatic+0x4c>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <xQueueGenericCreateStatic+0x4e>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <xQueueGenericCreateStatic+0x56>
 8005d70:	b672      	cpsid	i
 8005d72:	e7fe      	b.n	8005d72 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d74:	2350      	movs	r3, #80	; 0x50
 8005d76:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	2b50      	cmp	r3, #80	; 0x50
 8005d7c:	d001      	beq.n	8005d82 <xQueueGenericCreateStatic+0x64>
 8005d7e:	b672      	cpsid	i
 8005d80:	e7fe      	b.n	8005d80 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00e      	beq.n	8005daa <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2246      	movs	r2, #70	; 0x46
 8005d90:	2101      	movs	r1, #1
 8005d92:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d94:	2328      	movs	r3, #40	; 0x28
 8005d96:	18fb      	adds	r3, r7, r3
 8005d98:	781c      	ldrb	r4, [r3, #0]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	0023      	movs	r3, r4
 8005da6:	f000 f805 	bl	8005db4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005daa:	697b      	ldr	r3, [r7, #20]
	}
 8005dac:	0018      	movs	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	b007      	add	sp, #28
 8005db2:	bd90      	pop	{r4, r7, pc}

08005db4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	001a      	movs	r2, r3
 8005dc2:	1cfb      	adds	r3, r7, #3
 8005dc4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d103      	bne.n	8005dd4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	e002      	b.n	8005dda <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2101      	movs	r1, #1
 8005dea:	0018      	movs	r0, r3
 8005dec:	f7ff ff43 	bl	8005c76 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	1cfa      	adds	r2, r7, #3
 8005df4:	214c      	movs	r1, #76	; 0x4c
 8005df6:	7812      	ldrb	r2, [r2, #0]
 8005df8:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	b004      	add	sp, #16
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b08a      	sub	sp, #40	; 0x28
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	607a      	str	r2, [r7, #4]
 8005e0e:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e10:	2300      	movs	r3, #0
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <xQueueGenericSend+0x20>
 8005e1e:	b672      	cpsid	i
 8005e20:	e7fe      	b.n	8005e20 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d103      	bne.n	8005e30 <xQueueGenericSend+0x2e>
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <xQueueGenericSend+0x32>
 8005e30:	2301      	movs	r3, #1
 8005e32:	e000      	b.n	8005e36 <xQueueGenericSend+0x34>
 8005e34:	2300      	movs	r3, #0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <xQueueGenericSend+0x3c>
 8005e3a:	b672      	cpsid	i
 8005e3c:	e7fe      	b.n	8005e3c <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d103      	bne.n	8005e4c <xQueueGenericSend+0x4a>
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <xQueueGenericSend+0x4e>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <xQueueGenericSend+0x50>
 8005e50:	2300      	movs	r3, #0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <xQueueGenericSend+0x58>
 8005e56:	b672      	cpsid	i
 8005e58:	e7fe      	b.n	8005e58 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e5a:	f001 f8af 	bl	8006fbc <xTaskGetSchedulerState>
 8005e5e:	1e03      	subs	r3, r0, #0
 8005e60:	d102      	bne.n	8005e68 <xQueueGenericSend+0x66>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <xQueueGenericSend+0x6a>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e000      	b.n	8005e6e <xQueueGenericSend+0x6c>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <xQueueGenericSend+0x74>
 8005e72:	b672      	cpsid	i
 8005e74:	e7fe      	b.n	8005e74 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e76:	f001 fcdb 	bl	8007830 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d302      	bcc.n	8005e8c <xQueueGenericSend+0x8a>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d11e      	bne.n	8005eca <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	0018      	movs	r0, r3
 8005e94:	f000 f99f 	bl	80061d6 <prvCopyDataToQueue>
 8005e98:	0003      	movs	r3, r0
 8005e9a:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d009      	beq.n	8005eb8 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	3324      	adds	r3, #36	; 0x24
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	f000 feef 	bl	8006c8c <xTaskRemoveFromEventList>
 8005eae:	1e03      	subs	r3, r0, #0
 8005eb0:	d007      	beq.n	8005ec2 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005eb2:	f001 fcad 	bl	8007810 <vPortYield>
 8005eb6:	e004      	b.n	8005ec2 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ebe:	f001 fca7 	bl	8007810 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ec2:	f001 fcc7 	bl	8007854 <vPortExitCritical>
				return pdPASS;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e05b      	b.n	8005f82 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d103      	bne.n	8005ed8 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ed0:	f001 fcc0 	bl	8007854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e054      	b.n	8005f82 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ede:	2314      	movs	r3, #20
 8005ee0:	18fb      	adds	r3, r7, r3
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f000 ff2e 	bl	8006d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005eec:	f001 fcb2 	bl	8007854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ef0:	f000 fcdc 	bl	80068ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ef4:	f001 fc9c 	bl	8007830 <vPortEnterCritical>
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	2244      	movs	r2, #68	; 0x44
 8005efc:	5c9b      	ldrb	r3, [r3, r2]
 8005efe:	b25b      	sxtb	r3, r3
 8005f00:	3301      	adds	r3, #1
 8005f02:	d103      	bne.n	8005f0c <xQueueGenericSend+0x10a>
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	2244      	movs	r2, #68	; 0x44
 8005f08:	2100      	movs	r1, #0
 8005f0a:	5499      	strb	r1, [r3, r2]
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	2245      	movs	r2, #69	; 0x45
 8005f10:	5c9b      	ldrb	r3, [r3, r2]
 8005f12:	b25b      	sxtb	r3, r3
 8005f14:	3301      	adds	r3, #1
 8005f16:	d103      	bne.n	8005f20 <xQueueGenericSend+0x11e>
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	2245      	movs	r2, #69	; 0x45
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	5499      	strb	r1, [r3, r2]
 8005f20:	f001 fc98 	bl	8007854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f24:	1d3a      	adds	r2, r7, #4
 8005f26:	2314      	movs	r3, #20
 8005f28:	18fb      	adds	r3, r7, r3
 8005f2a:	0011      	movs	r1, r2
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f000 ff1d 	bl	8006d6c <xTaskCheckForTimeOut>
 8005f32:	1e03      	subs	r3, r0, #0
 8005f34:	d11e      	bne.n	8005f74 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f000 fa51 	bl	80063e0 <prvIsQueueFull>
 8005f3e:	1e03      	subs	r3, r0, #0
 8005f40:	d011      	beq.n	8005f66 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	3310      	adds	r3, #16
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	0011      	movs	r1, r2
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	f000 fe5a 	bl	8006c04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	0018      	movs	r0, r3
 8005f54:	f000 f9d0 	bl	80062f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f58:	f000 fcb4 	bl	80068c4 <xTaskResumeAll>
 8005f5c:	1e03      	subs	r3, r0, #0
 8005f5e:	d18a      	bne.n	8005e76 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8005f60:	f001 fc56 	bl	8007810 <vPortYield>
 8005f64:	e787      	b.n	8005e76 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f000 f9c5 	bl	80062f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f6e:	f000 fca9 	bl	80068c4 <xTaskResumeAll>
 8005f72:	e780      	b.n	8005e76 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	0018      	movs	r0, r3
 8005f78:	f000 f9be 	bl	80062f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f7c:	f000 fca2 	bl	80068c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f80:	2300      	movs	r3, #0
		}
	}
}
 8005f82:	0018      	movs	r0, r3
 8005f84:	46bd      	mov	sp, r7
 8005f86:	b00a      	add	sp, #40	; 0x28
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f8a:	b590      	push	{r4, r7, lr}
 8005f8c:	b089      	sub	sp, #36	; 0x24
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	607a      	str	r2, [r7, #4]
 8005f96:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <xQueueGenericSendFromISR+0x1c>
 8005fa2:	b672      	cpsid	i
 8005fa4:	e7fe      	b.n	8005fa4 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d103      	bne.n	8005fb4 <xQueueGenericSendFromISR+0x2a>
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <xQueueGenericSendFromISR+0x2e>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <xQueueGenericSendFromISR+0x30>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <xQueueGenericSendFromISR+0x38>
 8005fbe:	b672      	cpsid	i
 8005fc0:	e7fe      	b.n	8005fc0 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d103      	bne.n	8005fd0 <xQueueGenericSendFromISR+0x46>
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <xQueueGenericSendFromISR+0x4a>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e000      	b.n	8005fd6 <xQueueGenericSendFromISR+0x4c>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <xQueueGenericSendFromISR+0x54>
 8005fda:	b672      	cpsid	i
 8005fdc:	e7fe      	b.n	8005fdc <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fde:	f001 fc51 	bl	8007884 <ulSetInterruptMaskFromISR>
 8005fe2:	0003      	movs	r3, r0
 8005fe4:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d302      	bcc.n	8005ff8 <xQueueGenericSendFromISR+0x6e>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d12e      	bne.n	8006056 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ff8:	2413      	movs	r4, #19
 8005ffa:	193b      	adds	r3, r7, r4
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	2145      	movs	r1, #69	; 0x45
 8006000:	5c52      	ldrb	r2, [r2, r1]
 8006002:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	68b9      	ldr	r1, [r7, #8]
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	0018      	movs	r0, r3
 800600c:	f000 f8e3 	bl	80061d6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006010:	193b      	adds	r3, r7, r4
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	b25b      	sxtb	r3, r3
 8006016:	3301      	adds	r3, #1
 8006018:	d111      	bne.n	800603e <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	2b00      	cmp	r3, #0
 8006020:	d016      	beq.n	8006050 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	3324      	adds	r3, #36	; 0x24
 8006026:	0018      	movs	r0, r3
 8006028:	f000 fe30 	bl	8006c8c <xTaskRemoveFromEventList>
 800602c:	1e03      	subs	r3, r0, #0
 800602e:	d00f      	beq.n	8006050 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00c      	beq.n	8006050 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	e008      	b.n	8006050 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800603e:	2313      	movs	r3, #19
 8006040:	18fb      	adds	r3, r7, r3
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	3301      	adds	r3, #1
 8006046:	b2db      	uxtb	r3, r3
 8006048:	b259      	sxtb	r1, r3
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2245      	movs	r2, #69	; 0x45
 800604e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8006050:	2301      	movs	r3, #1
 8006052:	61fb      	str	r3, [r7, #28]
		{
 8006054:	e001      	b.n	800605a <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	0018      	movs	r0, r3
 800605e:	f001 fc17 	bl	8007890 <vClearInterruptMaskFromISR>

	return xReturn;
 8006062:	69fb      	ldr	r3, [r7, #28]
}
 8006064:	0018      	movs	r0, r3
 8006066:	46bd      	mov	sp, r7
 8006068:	b009      	add	sp, #36	; 0x24
 800606a:	bd90      	pop	{r4, r7, pc}

0800606c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08a      	sub	sp, #40	; 0x28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006078:	2300      	movs	r3, #0
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <xQueueReceive+0x1e>
 8006086:	b672      	cpsid	i
 8006088:	e7fe      	b.n	8006088 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d103      	bne.n	8006098 <xQueueReceive+0x2c>
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <xQueueReceive+0x30>
 8006098:	2301      	movs	r3, #1
 800609a:	e000      	b.n	800609e <xQueueReceive+0x32>
 800609c:	2300      	movs	r3, #0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <xQueueReceive+0x3a>
 80060a2:	b672      	cpsid	i
 80060a4:	e7fe      	b.n	80060a4 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060a6:	f000 ff89 	bl	8006fbc <xTaskGetSchedulerState>
 80060aa:	1e03      	subs	r3, r0, #0
 80060ac:	d102      	bne.n	80060b4 <xQueueReceive+0x48>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <xQueueReceive+0x4c>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <xQueueReceive+0x4e>
 80060b8:	2300      	movs	r3, #0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <xQueueReceive+0x56>
 80060be:	b672      	cpsid	i
 80060c0:	e7fe      	b.n	80060c0 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80060c2:	f001 fbb5 	bl	8007830 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d01a      	beq.n	8006108 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	0011      	movs	r1, r2
 80060d8:	0018      	movs	r0, r3
 80060da:	f000 f8e7 	bl	80062ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	1e5a      	subs	r2, r3, #1
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d008      	beq.n	8006100 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	3310      	adds	r3, #16
 80060f2:	0018      	movs	r0, r3
 80060f4:	f000 fdca 	bl	8006c8c <xTaskRemoveFromEventList>
 80060f8:	1e03      	subs	r3, r0, #0
 80060fa:	d001      	beq.n	8006100 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060fc:	f001 fb88 	bl	8007810 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006100:	f001 fba8 	bl	8007854 <vPortExitCritical>
				return pdPASS;
 8006104:	2301      	movs	r3, #1
 8006106:	e062      	b.n	80061ce <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800610e:	f001 fba1 	bl	8007854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006112:	2300      	movs	r3, #0
 8006114:	e05b      	b.n	80061ce <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	2b00      	cmp	r3, #0
 800611a:	d106      	bne.n	800612a <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800611c:	2314      	movs	r3, #20
 800611e:	18fb      	adds	r3, r7, r3
 8006120:	0018      	movs	r0, r3
 8006122:	f000 fe0f 	bl	8006d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006126:	2301      	movs	r3, #1
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800612a:	f001 fb93 	bl	8007854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800612e:	f000 fbbd 	bl	80068ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006132:	f001 fb7d 	bl	8007830 <vPortEnterCritical>
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	2244      	movs	r2, #68	; 0x44
 800613a:	5c9b      	ldrb	r3, [r3, r2]
 800613c:	b25b      	sxtb	r3, r3
 800613e:	3301      	adds	r3, #1
 8006140:	d103      	bne.n	800614a <xQueueReceive+0xde>
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	2244      	movs	r2, #68	; 0x44
 8006146:	2100      	movs	r1, #0
 8006148:	5499      	strb	r1, [r3, r2]
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	2245      	movs	r2, #69	; 0x45
 800614e:	5c9b      	ldrb	r3, [r3, r2]
 8006150:	b25b      	sxtb	r3, r3
 8006152:	3301      	adds	r3, #1
 8006154:	d103      	bne.n	800615e <xQueueReceive+0xf2>
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	2245      	movs	r2, #69	; 0x45
 800615a:	2100      	movs	r1, #0
 800615c:	5499      	strb	r1, [r3, r2]
 800615e:	f001 fb79 	bl	8007854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006162:	1d3a      	adds	r2, r7, #4
 8006164:	2314      	movs	r3, #20
 8006166:	18fb      	adds	r3, r7, r3
 8006168:	0011      	movs	r1, r2
 800616a:	0018      	movs	r0, r3
 800616c:	f000 fdfe 	bl	8006d6c <xTaskCheckForTimeOut>
 8006170:	1e03      	subs	r3, r0, #0
 8006172:	d11e      	bne.n	80061b2 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	0018      	movs	r0, r3
 8006178:	f000 f91c 	bl	80063b4 <prvIsQueueEmpty>
 800617c:	1e03      	subs	r3, r0, #0
 800617e:	d011      	beq.n	80061a4 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	3324      	adds	r3, #36	; 0x24
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	0011      	movs	r1, r2
 8006188:	0018      	movs	r0, r3
 800618a:	f000 fd3b 	bl	8006c04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	0018      	movs	r0, r3
 8006192:	f000 f8b1 	bl	80062f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006196:	f000 fb95 	bl	80068c4 <xTaskResumeAll>
 800619a:	1e03      	subs	r3, r0, #0
 800619c:	d191      	bne.n	80060c2 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800619e:	f001 fb37 	bl	8007810 <vPortYield>
 80061a2:	e78e      	b.n	80060c2 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	0018      	movs	r0, r3
 80061a8:	f000 f8a6 	bl	80062f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061ac:	f000 fb8a 	bl	80068c4 <xTaskResumeAll>
 80061b0:	e787      	b.n	80060c2 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	0018      	movs	r0, r3
 80061b6:	f000 f89f 	bl	80062f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061ba:	f000 fb83 	bl	80068c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	0018      	movs	r0, r3
 80061c2:	f000 f8f7 	bl	80063b4 <prvIsQueueEmpty>
 80061c6:	1e03      	subs	r3, r0, #0
 80061c8:	d100      	bne.n	80061cc <xQueueReceive+0x160>
 80061ca:	e77a      	b.n	80060c2 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80061ce:	0018      	movs	r0, r3
 80061d0:	46bd      	mov	sp, r7
 80061d2:	b00a      	add	sp, #40	; 0x28
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b086      	sub	sp, #24
 80061da:	af00      	add	r7, sp, #0
 80061dc:	60f8      	str	r0, [r7, #12]
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10e      	bne.n	8006212 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d14e      	bne.n	800629a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	0018      	movs	r0, r3
 8006202:	f000 fef7 	bl	8006ff4 <xTaskPriorityDisinherit>
 8006206:	0003      	movs	r3, r0
 8006208:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	605a      	str	r2, [r3, #4]
 8006210:	e043      	b.n	800629a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d119      	bne.n	800624c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6898      	ldr	r0, [r3, #8]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	0019      	movs	r1, r3
 8006224:	f001 fd66 	bl	8007cf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	18d2      	adds	r2, r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	429a      	cmp	r2, r3
 8006240:	d32b      	bcc.n	800629a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	609a      	str	r2, [r3, #8]
 800624a:	e026      	b.n	800629a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68d8      	ldr	r0, [r3, #12]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	0019      	movs	r1, r3
 8006258:	f001 fd4c 	bl	8007cf4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	68da      	ldr	r2, [r3, #12]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	425b      	negs	r3, r3
 8006266:	18d2      	adds	r2, r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d207      	bcs.n	8006288 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	425b      	negs	r3, r3
 8006282:	18d2      	adds	r2, r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b02      	cmp	r3, #2
 800628c:	d105      	bne.n	800629a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	3b01      	subs	r3, #1
 8006298:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80062a2:	697b      	ldr	r3, [r7, #20]
}
 80062a4:	0018      	movs	r0, r3
 80062a6:	46bd      	mov	sp, r7
 80062a8:	b006      	add	sp, #24
 80062aa:	bd80      	pop	{r7, pc}

080062ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d018      	beq.n	80062f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	18d2      	adds	r2, r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d303      	bcc.n	80062e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68d9      	ldr	r1, [r3, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	0018      	movs	r0, r3
 80062ec:	f001 fd02 	bl	8007cf4 <memcpy>
	}
}
 80062f0:	46c0      	nop			; (mov r8, r8)
 80062f2:	46bd      	mov	sp, r7
 80062f4:	b002      	add	sp, #8
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006300:	f001 fa96 	bl	8007830 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006304:	230f      	movs	r3, #15
 8006306:	18fb      	adds	r3, r7, r3
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	2145      	movs	r1, #69	; 0x45
 800630c:	5c52      	ldrb	r2, [r2, r1]
 800630e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006310:	e013      	b.n	800633a <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	2b00      	cmp	r3, #0
 8006318:	d016      	beq.n	8006348 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3324      	adds	r3, #36	; 0x24
 800631e:	0018      	movs	r0, r3
 8006320:	f000 fcb4 	bl	8006c8c <xTaskRemoveFromEventList>
 8006324:	1e03      	subs	r3, r0, #0
 8006326:	d001      	beq.n	800632c <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006328:	f000 fd70 	bl	8006e0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800632c:	210f      	movs	r1, #15
 800632e:	187b      	adds	r3, r7, r1
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	3b01      	subs	r3, #1
 8006334:	b2da      	uxtb	r2, r3
 8006336:	187b      	adds	r3, r7, r1
 8006338:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800633a:	230f      	movs	r3, #15
 800633c:	18fb      	adds	r3, r7, r3
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	b25b      	sxtb	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	dce5      	bgt.n	8006312 <prvUnlockQueue+0x1a>
 8006346:	e000      	b.n	800634a <prvUnlockQueue+0x52>
					break;
 8006348:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2245      	movs	r2, #69	; 0x45
 800634e:	21ff      	movs	r1, #255	; 0xff
 8006350:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006352:	f001 fa7f 	bl	8007854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006356:	f001 fa6b 	bl	8007830 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800635a:	230e      	movs	r3, #14
 800635c:	18fb      	adds	r3, r7, r3
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	2144      	movs	r1, #68	; 0x44
 8006362:	5c52      	ldrb	r2, [r2, r1]
 8006364:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006366:	e013      	b.n	8006390 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d016      	beq.n	800639e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3310      	adds	r3, #16
 8006374:	0018      	movs	r0, r3
 8006376:	f000 fc89 	bl	8006c8c <xTaskRemoveFromEventList>
 800637a:	1e03      	subs	r3, r0, #0
 800637c:	d001      	beq.n	8006382 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800637e:	f000 fd45 	bl	8006e0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006382:	210e      	movs	r1, #14
 8006384:	187b      	adds	r3, r7, r1
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	3b01      	subs	r3, #1
 800638a:	b2da      	uxtb	r2, r3
 800638c:	187b      	adds	r3, r7, r1
 800638e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006390:	230e      	movs	r3, #14
 8006392:	18fb      	adds	r3, r7, r3
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	b25b      	sxtb	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	dce5      	bgt.n	8006368 <prvUnlockQueue+0x70>
 800639c:	e000      	b.n	80063a0 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800639e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2244      	movs	r2, #68	; 0x44
 80063a4:	21ff      	movs	r1, #255	; 0xff
 80063a6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80063a8:	f001 fa54 	bl	8007854 <vPortExitCritical>
}
 80063ac:	46c0      	nop			; (mov r8, r8)
 80063ae:	46bd      	mov	sp, r7
 80063b0:	b004      	add	sp, #16
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063bc:	f001 fa38 	bl	8007830 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d102      	bne.n	80063ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80063c8:	2301      	movs	r3, #1
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	e001      	b.n	80063d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063d2:	f001 fa3f 	bl	8007854 <vPortExitCritical>

	return xReturn;
 80063d6:	68fb      	ldr	r3, [r7, #12]
}
 80063d8:	0018      	movs	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	b004      	add	sp, #16
 80063de:	bd80      	pop	{r7, pc}

080063e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063e8:	f001 fa22 	bl	8007830 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d102      	bne.n	80063fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80063f8:	2301      	movs	r3, #1
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	e001      	b.n	8006402 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006402:	f001 fa27 	bl	8007854 <vPortExitCritical>

	return xReturn;
 8006406:	68fb      	ldr	r3, [r7, #12]
}
 8006408:	0018      	movs	r0, r3
 800640a:	46bd      	mov	sp, r7
 800640c:	b004      	add	sp, #16
 800640e:	bd80      	pop	{r7, pc}

08006410 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800641a:	2300      	movs	r3, #0
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	e015      	b.n	800644c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006420:	4b0e      	ldr	r3, [pc, #56]	; (800645c <vQueueAddToRegistry+0x4c>)
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	00d2      	lsls	r2, r2, #3
 8006426:	58d3      	ldr	r3, [r2, r3]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10c      	bne.n	8006446 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800642c:	4b0b      	ldr	r3, [pc, #44]	; (800645c <vQueueAddToRegistry+0x4c>)
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	00d2      	lsls	r2, r2, #3
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006436:	4a09      	ldr	r2, [pc, #36]	; (800645c <vQueueAddToRegistry+0x4c>)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	18d3      	adds	r3, r2, r3
 800643e:	3304      	adds	r3, #4
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006444:	e005      	b.n	8006452 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3301      	adds	r3, #1
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b07      	cmp	r3, #7
 8006450:	d9e6      	bls.n	8006420 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006452:	46c0      	nop			; (mov r8, r8)
 8006454:	46bd      	mov	sp, r7
 8006456:	b004      	add	sp, #16
 8006458:	bd80      	pop	{r7, pc}
 800645a:	46c0      	nop			; (mov r8, r8)
 800645c:	200031cc 	.word	0x200031cc

08006460 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006470:	f001 f9de 	bl	8007830 <vPortEnterCritical>
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2244      	movs	r2, #68	; 0x44
 8006478:	5c9b      	ldrb	r3, [r3, r2]
 800647a:	b25b      	sxtb	r3, r3
 800647c:	3301      	adds	r3, #1
 800647e:	d103      	bne.n	8006488 <vQueueWaitForMessageRestricted+0x28>
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2244      	movs	r2, #68	; 0x44
 8006484:	2100      	movs	r1, #0
 8006486:	5499      	strb	r1, [r3, r2]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2245      	movs	r2, #69	; 0x45
 800648c:	5c9b      	ldrb	r3, [r3, r2]
 800648e:	b25b      	sxtb	r3, r3
 8006490:	3301      	adds	r3, #1
 8006492:	d103      	bne.n	800649c <vQueueWaitForMessageRestricted+0x3c>
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2245      	movs	r2, #69	; 0x45
 8006498:	2100      	movs	r1, #0
 800649a:	5499      	strb	r1, [r3, r2]
 800649c:	f001 f9da 	bl	8007854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d106      	bne.n	80064b6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	3324      	adds	r3, #36	; 0x24
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	68b9      	ldr	r1, [r7, #8]
 80064b0:	0018      	movs	r0, r3
 80064b2:	f000 fbc5 	bl	8006c40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	0018      	movs	r0, r3
 80064ba:	f7ff ff1d 	bl	80062f8 <prvUnlockQueue>
	}
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	46bd      	mov	sp, r7
 80064c2:	b006      	add	sp, #24
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064c6:	b590      	push	{r4, r7, lr}
 80064c8:	b08d      	sub	sp, #52	; 0x34
 80064ca:	af04      	add	r7, sp, #16
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
 80064d2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <xTaskCreateStatic+0x18>
 80064da:	b672      	cpsid	i
 80064dc:	e7fe      	b.n	80064dc <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80064de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <xTaskCreateStatic+0x22>
 80064e4:	b672      	cpsid	i
 80064e6:	e7fe      	b.n	80064e6 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064e8:	235c      	movs	r3, #92	; 0x5c
 80064ea:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2b5c      	cmp	r3, #92	; 0x5c
 80064f0:	d001      	beq.n	80064f6 <xTaskCreateStatic+0x30>
 80064f2:	b672      	cpsid	i
 80064f4:	e7fe      	b.n	80064f4 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d020      	beq.n	800653e <xTaskCreateStatic+0x78>
 80064fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d01d      	beq.n	800653e <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800650a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	2259      	movs	r2, #89	; 0x59
 8006510:	2102      	movs	r1, #2
 8006512:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006514:	683c      	ldr	r4, [r7, #0]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	2300      	movs	r3, #0
 800651e:	9303      	str	r3, [sp, #12]
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	9302      	str	r3, [sp, #8]
 8006524:	2318      	movs	r3, #24
 8006526:	18fb      	adds	r3, r7, r3
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	0023      	movs	r3, r4
 8006530:	f000 f858 	bl	80065e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	0018      	movs	r0, r3
 8006538:	f000 f8d6 	bl	80066e8 <prvAddNewTaskToReadyList>
 800653c:	e001      	b.n	8006542 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800653e:	2300      	movs	r3, #0
 8006540:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006542:	69bb      	ldr	r3, [r7, #24]
	}
 8006544:	0018      	movs	r0, r3
 8006546:	46bd      	mov	sp, r7
 8006548:	b009      	add	sp, #36	; 0x24
 800654a:	bd90      	pop	{r4, r7, pc}

0800654c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800654c:	b590      	push	{r4, r7, lr}
 800654e:	b08d      	sub	sp, #52	; 0x34
 8006550:	af04      	add	r7, sp, #16
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	603b      	str	r3, [r7, #0]
 8006558:	1dbb      	adds	r3, r7, #6
 800655a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800655c:	1dbb      	adds	r3, r7, #6
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	0018      	movs	r0, r3
 8006564:	f001 f9fc 	bl	8007960 <pvPortMalloc>
 8006568:	0003      	movs	r3, r0
 800656a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d010      	beq.n	8006594 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006572:	205c      	movs	r0, #92	; 0x5c
 8006574:	f001 f9f4 	bl	8007960 <pvPortMalloc>
 8006578:	0003      	movs	r3, r0
 800657a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	631a      	str	r2, [r3, #48]	; 0x30
 8006588:	e006      	b.n	8006598 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	0018      	movs	r0, r3
 800658e:	f001 fa8d 	bl	8007aac <vPortFree>
 8006592:	e001      	b.n	8006598 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006594:	2300      	movs	r3, #0
 8006596:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d01a      	beq.n	80065d4 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	2259      	movs	r2, #89	; 0x59
 80065a2:	2100      	movs	r1, #0
 80065a4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065a6:	1dbb      	adds	r3, r7, #6
 80065a8:	881a      	ldrh	r2, [r3, #0]
 80065aa:	683c      	ldr	r4, [r7, #0]
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	2300      	movs	r3, #0
 80065b2:	9303      	str	r3, [sp, #12]
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	9302      	str	r3, [sp, #8]
 80065b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ba:	9301      	str	r3, [sp, #4]
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	0023      	movs	r3, r4
 80065c2:	f000 f80f 	bl	80065e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	0018      	movs	r0, r3
 80065ca:	f000 f88d 	bl	80066e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065ce:	2301      	movs	r3, #1
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	e002      	b.n	80065da <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065d4:	2301      	movs	r3, #1
 80065d6:	425b      	negs	r3, r3
 80065d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065da:	69bb      	ldr	r3, [r7, #24]
	}
 80065dc:	0018      	movs	r0, r3
 80065de:	46bd      	mov	sp, r7
 80065e0:	b009      	add	sp, #36	; 0x24
 80065e2:	bd90      	pop	{r4, r7, pc}

080065e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	001a      	movs	r2, r3
 80065fc:	21a5      	movs	r1, #165	; 0xa5
 80065fe:	f001 fb82 	bl	8007d06 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4936      	ldr	r1, [pc, #216]	; (80066e4 <prvInitialiseNewTask+0x100>)
 800660a:	468c      	mov	ip, r1
 800660c:	4463      	add	r3, ip
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	18d3      	adds	r3, r2, r3
 8006612:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2207      	movs	r2, #7
 8006618:	4393      	bics	r3, r2
 800661a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2207      	movs	r2, #7
 8006620:	4013      	ands	r3, r2
 8006622:	d001      	beq.n	8006628 <prvInitialiseNewTask+0x44>
 8006624:	b672      	cpsid	i
 8006626:	e7fe      	b.n	8006626 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006628:	2300      	movs	r3, #0
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	e013      	b.n	8006656 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	18d3      	adds	r3, r2, r3
 8006634:	7818      	ldrb	r0, [r3, #0]
 8006636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006638:	2134      	movs	r1, #52	; 0x34
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	18d3      	adds	r3, r2, r3
 800663e:	185b      	adds	r3, r3, r1
 8006640:	1c02      	adds	r2, r0, #0
 8006642:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	18d3      	adds	r3, r2, r3
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d006      	beq.n	800665e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	3301      	adds	r3, #1
 8006654:	617b      	str	r3, [r7, #20]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2b0f      	cmp	r3, #15
 800665a:	d9e8      	bls.n	800662e <prvInitialiseNewTask+0x4a>
 800665c:	e000      	b.n	8006660 <prvInitialiseNewTask+0x7c>
		{
			break;
 800665e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	2243      	movs	r2, #67	; 0x43
 8006664:	2100      	movs	r1, #0
 8006666:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	2b37      	cmp	r3, #55	; 0x37
 800666c:	d901      	bls.n	8006672 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800666e:	2337      	movs	r3, #55	; 0x37
 8006670:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006674:	6a3a      	ldr	r2, [r7, #32]
 8006676:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	6a3a      	ldr	r2, [r7, #32]
 800667c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006680:	2200      	movs	r2, #0
 8006682:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006686:	3304      	adds	r3, #4
 8006688:	0018      	movs	r0, r3
 800668a:	f7ff fa69 	bl	8005b60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	3318      	adds	r3, #24
 8006692:	0018      	movs	r0, r3
 8006694:	f7ff fa64 	bl	8005b60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800669c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	2238      	movs	r2, #56	; 0x38
 80066a2:	1ad2      	subs	r2, r2, r3
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	2200      	movs	r2, #0
 80066b2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	2258      	movs	r2, #88	; 0x58
 80066b8:	2100      	movs	r1, #0
 80066ba:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	68f9      	ldr	r1, [r7, #12]
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	0018      	movs	r0, r3
 80066c4:	f001 f81c 	bl	8007700 <pxPortInitialiseStack>
 80066c8:	0002      	movs	r2, r0
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	46bd      	mov	sp, r7
 80066de:	b006      	add	sp, #24
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	3fffffff 	.word	0x3fffffff

080066e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066f0:	f001 f89e 	bl	8007830 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066f4:	4b2a      	ldr	r3, [pc, #168]	; (80067a0 <prvAddNewTaskToReadyList+0xb8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	4b29      	ldr	r3, [pc, #164]	; (80067a0 <prvAddNewTaskToReadyList+0xb8>)
 80066fc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80066fe:	4b29      	ldr	r3, [pc, #164]	; (80067a4 <prvAddNewTaskToReadyList+0xbc>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006706:	4b27      	ldr	r3, [pc, #156]	; (80067a4 <prvAddNewTaskToReadyList+0xbc>)
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800670c:	4b24      	ldr	r3, [pc, #144]	; (80067a0 <prvAddNewTaskToReadyList+0xb8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d110      	bne.n	8006736 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006714:	f000 fb94 	bl	8006e40 <prvInitialiseTaskLists>
 8006718:	e00d      	b.n	8006736 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800671a:	4b23      	ldr	r3, [pc, #140]	; (80067a8 <prvAddNewTaskToReadyList+0xc0>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d109      	bne.n	8006736 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006722:	4b20      	ldr	r3, [pc, #128]	; (80067a4 <prvAddNewTaskToReadyList+0xbc>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	429a      	cmp	r2, r3
 800672e:	d802      	bhi.n	8006736 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006730:	4b1c      	ldr	r3, [pc, #112]	; (80067a4 <prvAddNewTaskToReadyList+0xbc>)
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006736:	4b1d      	ldr	r3, [pc, #116]	; (80067ac <prvAddNewTaskToReadyList+0xc4>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	4b1b      	ldr	r3, [pc, #108]	; (80067ac <prvAddNewTaskToReadyList+0xc4>)
 800673e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006740:	4b1a      	ldr	r3, [pc, #104]	; (80067ac <prvAddNewTaskToReadyList+0xc4>)
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674c:	4b18      	ldr	r3, [pc, #96]	; (80067b0 <prvAddNewTaskToReadyList+0xc8>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	429a      	cmp	r2, r3
 8006752:	d903      	bls.n	800675c <prvAddNewTaskToReadyList+0x74>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006758:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <prvAddNewTaskToReadyList+0xc8>)
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006760:	0013      	movs	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	189b      	adds	r3, r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4a12      	ldr	r2, [pc, #72]	; (80067b4 <prvAddNewTaskToReadyList+0xcc>)
 800676a:	189a      	adds	r2, r3, r2
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3304      	adds	r3, #4
 8006770:	0019      	movs	r1, r3
 8006772:	0010      	movs	r0, r2
 8006774:	f7ff f9ff 	bl	8005b76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006778:	f001 f86c 	bl	8007854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800677c:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <prvAddNewTaskToReadyList+0xc0>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d008      	beq.n	8006796 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006784:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <prvAddNewTaskToReadyList+0xbc>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678e:	429a      	cmp	r2, r3
 8006790:	d201      	bcs.n	8006796 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006792:	f001 f83d 	bl	8007810 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	46bd      	mov	sp, r7
 800679a:	b002      	add	sp, #8
 800679c:	bd80      	pop	{r7, pc}
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	20000cb4 	.word	0x20000cb4
 80067a4:	200007e0 	.word	0x200007e0
 80067a8:	20000cc0 	.word	0x20000cc0
 80067ac:	20000cd0 	.word	0x20000cd0
 80067b0:	20000cbc 	.word	0x20000cbc
 80067b4:	200007e4 	.word	0x200007e4

080067b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d010      	beq.n	80067ec <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067ca:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <vTaskDelay+0x48>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <vTaskDelay+0x1e>
 80067d2:	b672      	cpsid	i
 80067d4:	e7fe      	b.n	80067d4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80067d6:	f000 f869 	bl	80068ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2100      	movs	r1, #0
 80067de:	0018      	movs	r0, r3
 80067e0:	f000 fc64 	bl	80070ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067e4:	f000 f86e 	bl	80068c4 <xTaskResumeAll>
 80067e8:	0003      	movs	r3, r0
 80067ea:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80067f2:	f001 f80d 	bl	8007810 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b004      	add	sp, #16
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	20000cdc 	.word	0x20000cdc

08006804 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006804:	b590      	push	{r4, r7, lr}
 8006806:	b089      	sub	sp, #36	; 0x24
 8006808:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800680a:	2300      	movs	r3, #0
 800680c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006812:	003a      	movs	r2, r7
 8006814:	1d39      	adds	r1, r7, #4
 8006816:	2308      	movs	r3, #8
 8006818:	18fb      	adds	r3, r7, r3
 800681a:	0018      	movs	r0, r3
 800681c:	f7ff f952 	bl	8005ac4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006820:	683c      	ldr	r4, [r7, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	491b      	ldr	r1, [pc, #108]	; (8006894 <vTaskStartScheduler+0x90>)
 8006828:	481b      	ldr	r0, [pc, #108]	; (8006898 <vTaskStartScheduler+0x94>)
 800682a:	9202      	str	r2, [sp, #8]
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	2300      	movs	r3, #0
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	2300      	movs	r3, #0
 8006834:	0022      	movs	r2, r4
 8006836:	f7ff fe46 	bl	80064c6 <xTaskCreateStatic>
 800683a:	0002      	movs	r2, r0
 800683c:	4b17      	ldr	r3, [pc, #92]	; (800689c <vTaskStartScheduler+0x98>)
 800683e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006840:	4b16      	ldr	r3, [pc, #88]	; (800689c <vTaskStartScheduler+0x98>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006848:	2301      	movs	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e001      	b.n	8006852 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800684e:	2300      	movs	r3, #0
 8006850:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d103      	bne.n	8006860 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8006858:	f000 fc7c 	bl	8007154 <xTimerCreateTimerTask>
 800685c:	0003      	movs	r3, r0
 800685e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d10d      	bne.n	8006882 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006866:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006868:	4b0d      	ldr	r3, [pc, #52]	; (80068a0 <vTaskStartScheduler+0x9c>)
 800686a:	2201      	movs	r2, #1
 800686c:	4252      	negs	r2, r2
 800686e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006870:	4b0c      	ldr	r3, [pc, #48]	; (80068a4 <vTaskStartScheduler+0xa0>)
 8006872:	2201      	movs	r2, #1
 8006874:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006876:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <vTaskStartScheduler+0xa4>)
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800687c:	f000 ffa4 	bl	80077c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006880:	e004      	b.n	800688c <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3301      	adds	r3, #1
 8006886:	d101      	bne.n	800688c <vTaskStartScheduler+0x88>
 8006888:	b672      	cpsid	i
 800688a:	e7fe      	b.n	800688a <vTaskStartScheduler+0x86>
}
 800688c:	46c0      	nop			; (mov r8, r8)
 800688e:	46bd      	mov	sp, r7
 8006890:	b005      	add	sp, #20
 8006892:	bd90      	pop	{r4, r7, pc}
 8006894:	08007d8c 	.word	0x08007d8c
 8006898:	08006e21 	.word	0x08006e21
 800689c:	20000cd8 	.word	0x20000cd8
 80068a0:	20000cd4 	.word	0x20000cd4
 80068a4:	20000cc0 	.word	0x20000cc0
 80068a8:	20000cb8 	.word	0x20000cb8

080068ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80068b0:	4b03      	ldr	r3, [pc, #12]	; (80068c0 <vTaskSuspendAll+0x14>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	4b02      	ldr	r3, [pc, #8]	; (80068c0 <vTaskSuspendAll+0x14>)
 80068b8:	601a      	str	r2, [r3, #0]
}
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	20000cdc 	.word	0x20000cdc

080068c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068d2:	4b3a      	ldr	r3, [pc, #232]	; (80069bc <xTaskResumeAll+0xf8>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <xTaskResumeAll+0x1a>
 80068da:	b672      	cpsid	i
 80068dc:	e7fe      	b.n	80068dc <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068de:	f000 ffa7 	bl	8007830 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068e2:	4b36      	ldr	r3, [pc, #216]	; (80069bc <xTaskResumeAll+0xf8>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	1e5a      	subs	r2, r3, #1
 80068e8:	4b34      	ldr	r3, [pc, #208]	; (80069bc <xTaskResumeAll+0xf8>)
 80068ea:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ec:	4b33      	ldr	r3, [pc, #204]	; (80069bc <xTaskResumeAll+0xf8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d15b      	bne.n	80069ac <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068f4:	4b32      	ldr	r3, [pc, #200]	; (80069c0 <xTaskResumeAll+0xfc>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d057      	beq.n	80069ac <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068fc:	e02f      	b.n	800695e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80068fe:	4b31      	ldr	r3, [pc, #196]	; (80069c4 <xTaskResumeAll+0x100>)
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3318      	adds	r3, #24
 800690a:	0018      	movs	r0, r3
 800690c:	f7ff f98b 	bl	8005c26 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3304      	adds	r3, #4
 8006914:	0018      	movs	r0, r3
 8006916:	f7ff f986 	bl	8005c26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691e:	4b2a      	ldr	r3, [pc, #168]	; (80069c8 <xTaskResumeAll+0x104>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	429a      	cmp	r2, r3
 8006924:	d903      	bls.n	800692e <xTaskResumeAll+0x6a>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692a:	4b27      	ldr	r3, [pc, #156]	; (80069c8 <xTaskResumeAll+0x104>)
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006932:	0013      	movs	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	189b      	adds	r3, r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4a24      	ldr	r2, [pc, #144]	; (80069cc <xTaskResumeAll+0x108>)
 800693c:	189a      	adds	r2, r3, r2
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3304      	adds	r3, #4
 8006942:	0019      	movs	r1, r3
 8006944:	0010      	movs	r0, r2
 8006946:	f7ff f916 	bl	8005b76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694e:	4b20      	ldr	r3, [pc, #128]	; (80069d0 <xTaskResumeAll+0x10c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	429a      	cmp	r2, r3
 8006956:	d302      	bcc.n	800695e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8006958:	4b1e      	ldr	r3, [pc, #120]	; (80069d4 <xTaskResumeAll+0x110>)
 800695a:	2201      	movs	r2, #1
 800695c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800695e:	4b19      	ldr	r3, [pc, #100]	; (80069c4 <xTaskResumeAll+0x100>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1cb      	bne.n	80068fe <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800696c:	f000 fb02 	bl	8006f74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006970:	4b19      	ldr	r3, [pc, #100]	; (80069d8 <xTaskResumeAll+0x114>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00f      	beq.n	800699c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800697c:	f000 f83c 	bl	80069f8 <xTaskIncrementTick>
 8006980:	1e03      	subs	r3, r0, #0
 8006982:	d002      	beq.n	800698a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8006984:	4b13      	ldr	r3, [pc, #76]	; (80069d4 <xTaskResumeAll+0x110>)
 8006986:	2201      	movs	r2, #1
 8006988:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3b01      	subs	r3, #1
 800698e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1f2      	bne.n	800697c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8006996:	4b10      	ldr	r3, [pc, #64]	; (80069d8 <xTaskResumeAll+0x114>)
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800699c:	4b0d      	ldr	r3, [pc, #52]	; (80069d4 <xTaskResumeAll+0x110>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d003      	beq.n	80069ac <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069a4:	2301      	movs	r3, #1
 80069a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069a8:	f000 ff32 	bl	8007810 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069ac:	f000 ff52 	bl	8007854 <vPortExitCritical>

	return xAlreadyYielded;
 80069b0:	68bb      	ldr	r3, [r7, #8]
}
 80069b2:	0018      	movs	r0, r3
 80069b4:	46bd      	mov	sp, r7
 80069b6:	b004      	add	sp, #16
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	46c0      	nop			; (mov r8, r8)
 80069bc:	20000cdc 	.word	0x20000cdc
 80069c0:	20000cb4 	.word	0x20000cb4
 80069c4:	20000c74 	.word	0x20000c74
 80069c8:	20000cbc 	.word	0x20000cbc
 80069cc:	200007e4 	.word	0x200007e4
 80069d0:	200007e0 	.word	0x200007e0
 80069d4:	20000cc8 	.word	0x20000cc8
 80069d8:	20000cc4 	.word	0x20000cc4

080069dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80069e2:	4b04      	ldr	r3, [pc, #16]	; (80069f4 <xTaskGetTickCount+0x18>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80069e8:	687b      	ldr	r3, [r7, #4]
}
 80069ea:	0018      	movs	r0, r3
 80069ec:	46bd      	mov	sp, r7
 80069ee:	b002      	add	sp, #8
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	46c0      	nop			; (mov r8, r8)
 80069f4:	20000cb8 	.word	0x20000cb8

080069f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80069fe:	2300      	movs	r3, #0
 8006a00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a02:	4b4c      	ldr	r3, [pc, #304]	; (8006b34 <xTaskIncrementTick+0x13c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d000      	beq.n	8006a0c <xTaskIncrementTick+0x14>
 8006a0a:	e083      	b.n	8006b14 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a0c:	4b4a      	ldr	r3, [pc, #296]	; (8006b38 <xTaskIncrementTick+0x140>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3301      	adds	r3, #1
 8006a12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a14:	4b48      	ldr	r3, [pc, #288]	; (8006b38 <xTaskIncrementTick+0x140>)
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d117      	bne.n	8006a50 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a20:	4b46      	ldr	r3, [pc, #280]	; (8006b3c <xTaskIncrementTick+0x144>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <xTaskIncrementTick+0x36>
 8006a2a:	b672      	cpsid	i
 8006a2c:	e7fe      	b.n	8006a2c <xTaskIncrementTick+0x34>
 8006a2e:	4b43      	ldr	r3, [pc, #268]	; (8006b3c <xTaskIncrementTick+0x144>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	4b42      	ldr	r3, [pc, #264]	; (8006b40 <xTaskIncrementTick+0x148>)
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	4b40      	ldr	r3, [pc, #256]	; (8006b3c <xTaskIncrementTick+0x144>)
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	4b40      	ldr	r3, [pc, #256]	; (8006b40 <xTaskIncrementTick+0x148>)
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	4b40      	ldr	r3, [pc, #256]	; (8006b44 <xTaskIncrementTick+0x14c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	4b3e      	ldr	r3, [pc, #248]	; (8006b44 <xTaskIncrementTick+0x14c>)
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	f000 fa92 	bl	8006f74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a50:	4b3d      	ldr	r3, [pc, #244]	; (8006b48 <xTaskIncrementTick+0x150>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d34e      	bcc.n	8006af8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a5a:	4b38      	ldr	r3, [pc, #224]	; (8006b3c <xTaskIncrementTick+0x144>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <xTaskIncrementTick+0x70>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <xTaskIncrementTick+0x72>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d004      	beq.n	8006a78 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a6e:	4b36      	ldr	r3, [pc, #216]	; (8006b48 <xTaskIncrementTick+0x150>)
 8006a70:	2201      	movs	r2, #1
 8006a72:	4252      	negs	r2, r2
 8006a74:	601a      	str	r2, [r3, #0]
					break;
 8006a76:	e03f      	b.n	8006af8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a78:	4b30      	ldr	r3, [pc, #192]	; (8006b3c <xTaskIncrementTick+0x144>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d203      	bcs.n	8006a98 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a90:	4b2d      	ldr	r3, [pc, #180]	; (8006b48 <xTaskIncrementTick+0x150>)
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	601a      	str	r2, [r3, #0]
						break;
 8006a96:	e02f      	b.n	8006af8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f7ff f8c2 	bl	8005c26 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	3318      	adds	r3, #24
 8006aae:	0018      	movs	r0, r3
 8006ab0:	f7ff f8b9 	bl	8005c26 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab8:	4b24      	ldr	r3, [pc, #144]	; (8006b4c <xTaskIncrementTick+0x154>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d903      	bls.n	8006ac8 <xTaskIncrementTick+0xd0>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac4:	4b21      	ldr	r3, [pc, #132]	; (8006b4c <xTaskIncrementTick+0x154>)
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006acc:	0013      	movs	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	189b      	adds	r3, r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4a1e      	ldr	r2, [pc, #120]	; (8006b50 <xTaskIncrementTick+0x158>)
 8006ad6:	189a      	adds	r2, r3, r2
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	3304      	adds	r3, #4
 8006adc:	0019      	movs	r1, r3
 8006ade:	0010      	movs	r0, r2
 8006ae0:	f7ff f849 	bl	8005b76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae8:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <xTaskIncrementTick+0x15c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d3b3      	bcc.n	8006a5a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8006af2:	2301      	movs	r3, #1
 8006af4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006af6:	e7b0      	b.n	8006a5a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006af8:	4b16      	ldr	r3, [pc, #88]	; (8006b54 <xTaskIncrementTick+0x15c>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afe:	4914      	ldr	r1, [pc, #80]	; (8006b50 <xTaskIncrementTick+0x158>)
 8006b00:	0013      	movs	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	189b      	adds	r3, r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	585b      	ldr	r3, [r3, r1]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d907      	bls.n	8006b1e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	e004      	b.n	8006b1e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006b14:	4b10      	ldr	r3, [pc, #64]	; (8006b58 <xTaskIncrementTick+0x160>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	4b0f      	ldr	r3, [pc, #60]	; (8006b58 <xTaskIncrementTick+0x160>)
 8006b1c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006b1e:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <xTaskIncrementTick+0x164>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8006b26:	2301      	movs	r3, #1
 8006b28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006b2a:	697b      	ldr	r3, [r7, #20]
}
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	b006      	add	sp, #24
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20000cdc 	.word	0x20000cdc
 8006b38:	20000cb8 	.word	0x20000cb8
 8006b3c:	20000c6c 	.word	0x20000c6c
 8006b40:	20000c70 	.word	0x20000c70
 8006b44:	20000ccc 	.word	0x20000ccc
 8006b48:	20000cd4 	.word	0x20000cd4
 8006b4c:	20000cbc 	.word	0x20000cbc
 8006b50:	200007e4 	.word	0x200007e4
 8006b54:	200007e0 	.word	0x200007e0
 8006b58:	20000cc4 	.word	0x20000cc4
 8006b5c:	20000cc8 	.word	0x20000cc8

08006b60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b66:	4b22      	ldr	r3, [pc, #136]	; (8006bf0 <vTaskSwitchContext+0x90>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b6e:	4b21      	ldr	r3, [pc, #132]	; (8006bf4 <vTaskSwitchContext+0x94>)
 8006b70:	2201      	movs	r2, #1
 8006b72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b74:	e037      	b.n	8006be6 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8006b76:	4b1f      	ldr	r3, [pc, #124]	; (8006bf4 <vTaskSwitchContext+0x94>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006b7c:	4b1e      	ldr	r3, [pc, #120]	; (8006bf8 <vTaskSwitchContext+0x98>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	607b      	str	r3, [r7, #4]
 8006b82:	e007      	b.n	8006b94 <vTaskSwitchContext+0x34>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <vTaskSwitchContext+0x2e>
 8006b8a:	b672      	cpsid	i
 8006b8c:	e7fe      	b.n	8006b8c <vTaskSwitchContext+0x2c>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3b01      	subs	r3, #1
 8006b92:	607b      	str	r3, [r7, #4]
 8006b94:	4919      	ldr	r1, [pc, #100]	; (8006bfc <vTaskSwitchContext+0x9c>)
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	0013      	movs	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	189b      	adds	r3, r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	585b      	ldr	r3, [r3, r1]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0ee      	beq.n	8006b84 <vTaskSwitchContext+0x24>
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	0013      	movs	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	189b      	adds	r3, r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4a12      	ldr	r2, [pc, #72]	; (8006bfc <vTaskSwitchContext+0x9c>)
 8006bb2:	189b      	adds	r3, r3, r2
 8006bb4:	603b      	str	r3, [r7, #0]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	605a      	str	r2, [r3, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d104      	bne.n	8006bd6 <vTaskSwitchContext+0x76>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	605a      	str	r2, [r3, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	4b08      	ldr	r3, [pc, #32]	; (8006c00 <vTaskSwitchContext+0xa0>)
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <vTaskSwitchContext+0x98>)
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	601a      	str	r2, [r3, #0]
}
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	46bd      	mov	sp, r7
 8006bea:	b002      	add	sp, #8
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	20000cdc 	.word	0x20000cdc
 8006bf4:	20000cc8 	.word	0x20000cc8
 8006bf8:	20000cbc 	.word	0x20000cbc
 8006bfc:	200007e4 	.word	0x200007e4
 8006c00:	200007e0 	.word	0x200007e0

08006c04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <vTaskPlaceOnEventList+0x14>
 8006c14:	b672      	cpsid	i
 8006c16:	e7fe      	b.n	8006c16 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c18:	4b08      	ldr	r3, [pc, #32]	; (8006c3c <vTaskPlaceOnEventList+0x38>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3318      	adds	r3, #24
 8006c1e:	001a      	movs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	0011      	movs	r1, r2
 8006c24:	0018      	movs	r0, r3
 8006c26:	f7fe ffc8 	bl	8005bba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f000 fa3c 	bl	80070ac <prvAddCurrentTaskToDelayedList>
}
 8006c34:	46c0      	nop			; (mov r8, r8)
 8006c36:	46bd      	mov	sp, r7
 8006c38:	b002      	add	sp, #8
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	200007e0 	.word	0x200007e0

08006c40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <vTaskPlaceOnEventListRestricted+0x16>
 8006c52:	b672      	cpsid	i
 8006c54:	e7fe      	b.n	8006c54 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c56:	4b0c      	ldr	r3, [pc, #48]	; (8006c88 <vTaskPlaceOnEventListRestricted+0x48>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3318      	adds	r3, #24
 8006c5c:	001a      	movs	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	0011      	movs	r1, r2
 8006c62:	0018      	movs	r0, r3
 8006c64:	f7fe ff87 	bl	8005b76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	425b      	negs	r3, r3
 8006c72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	0011      	movs	r1, r2
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f000 fa16 	bl	80070ac <prvAddCurrentTaskToDelayedList>
	}
 8006c80:	46c0      	nop			; (mov r8, r8)
 8006c82:	46bd      	mov	sp, r7
 8006c84:	b004      	add	sp, #16
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	200007e0 	.word	0x200007e0

08006c8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <xTaskRemoveFromEventList+0x1a>
 8006ca2:	b672      	cpsid	i
 8006ca4:	e7fe      	b.n	8006ca4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	3318      	adds	r3, #24
 8006caa:	0018      	movs	r0, r3
 8006cac:	f7fe ffbb 	bl	8005c26 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cb0:	4b1e      	ldr	r3, [pc, #120]	; (8006d2c <xTaskRemoveFromEventList+0xa0>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d11d      	bne.n	8006cf4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	3304      	adds	r3, #4
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	f7fe ffb2 	bl	8005c26 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc6:	4b1a      	ldr	r3, [pc, #104]	; (8006d30 <xTaskRemoveFromEventList+0xa4>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d903      	bls.n	8006cd6 <xTaskRemoveFromEventList+0x4a>
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd2:	4b17      	ldr	r3, [pc, #92]	; (8006d30 <xTaskRemoveFromEventList+0xa4>)
 8006cd4:	601a      	str	r2, [r3, #0]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cda:	0013      	movs	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	189b      	adds	r3, r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4a14      	ldr	r2, [pc, #80]	; (8006d34 <xTaskRemoveFromEventList+0xa8>)
 8006ce4:	189a      	adds	r2, r3, r2
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	3304      	adds	r3, #4
 8006cea:	0019      	movs	r1, r3
 8006cec:	0010      	movs	r0, r2
 8006cee:	f7fe ff42 	bl	8005b76 <vListInsertEnd>
 8006cf2:	e007      	b.n	8006d04 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	3318      	adds	r3, #24
 8006cf8:	001a      	movs	r2, r3
 8006cfa:	4b0f      	ldr	r3, [pc, #60]	; (8006d38 <xTaskRemoveFromEventList+0xac>)
 8006cfc:	0011      	movs	r1, r2
 8006cfe:	0018      	movs	r0, r3
 8006d00:	f7fe ff39 	bl	8005b76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d08:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <xTaskRemoveFromEventList+0xb0>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d905      	bls.n	8006d1e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d12:	2301      	movs	r3, #1
 8006d14:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d16:	4b0a      	ldr	r3, [pc, #40]	; (8006d40 <xTaskRemoveFromEventList+0xb4>)
 8006d18:	2201      	movs	r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	e001      	b.n	8006d22 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006d22:	68fb      	ldr	r3, [r7, #12]
}
 8006d24:	0018      	movs	r0, r3
 8006d26:	46bd      	mov	sp, r7
 8006d28:	b004      	add	sp, #16
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	20000cdc 	.word	0x20000cdc
 8006d30:	20000cbc 	.word	0x20000cbc
 8006d34:	200007e4 	.word	0x200007e4
 8006d38:	20000c74 	.word	0x20000c74
 8006d3c:	200007e0 	.word	0x200007e0
 8006d40:	20000cc8 	.word	0x20000cc8

08006d44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <vTaskInternalSetTimeOutState+0x20>)
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d54:	4b04      	ldr	r3, [pc, #16]	; (8006d68 <vTaskInternalSetTimeOutState+0x24>)
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	605a      	str	r2, [r3, #4]
}
 8006d5c:	46c0      	nop			; (mov r8, r8)
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	b002      	add	sp, #8
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20000ccc 	.word	0x20000ccc
 8006d68:	20000cb8 	.word	0x20000cb8

08006d6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <xTaskCheckForTimeOut+0x14>
 8006d7c:	b672      	cpsid	i
 8006d7e:	e7fe      	b.n	8006d7e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <xTaskCheckForTimeOut+0x1e>
 8006d86:	b672      	cpsid	i
 8006d88:	e7fe      	b.n	8006d88 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8006d8a:	f000 fd51 	bl	8007830 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d8e:	4b1d      	ldr	r3, [pc, #116]	; (8006e04 <xTaskCheckForTimeOut+0x98>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3301      	adds	r3, #1
 8006da4:	d102      	bne.n	8006dac <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006da6:	2300      	movs	r3, #0
 8006da8:	617b      	str	r3, [r7, #20]
 8006daa:	e024      	b.n	8006df6 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	4b15      	ldr	r3, [pc, #84]	; (8006e08 <xTaskCheckForTimeOut+0x9c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d007      	beq.n	8006dc8 <xTaskCheckForTimeOut+0x5c>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d302      	bcc.n	8006dc8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	617b      	str	r3, [r7, #20]
 8006dc6:	e016      	b.n	8006df6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d20c      	bcs.n	8006dec <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	1ad2      	subs	r2, r2, r3
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	0018      	movs	r0, r3
 8006de2:	f7ff ffaf 	bl	8006d44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006de6:	2300      	movs	r3, #0
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	e004      	b.n	8006df6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006df2:	2301      	movs	r3, #1
 8006df4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006df6:	f000 fd2d 	bl	8007854 <vPortExitCritical>

	return xReturn;
 8006dfa:	697b      	ldr	r3, [r7, #20]
}
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	b006      	add	sp, #24
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20000cb8 	.word	0x20000cb8
 8006e08:	20000ccc 	.word	0x20000ccc

08006e0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e10:	4b02      	ldr	r3, [pc, #8]	; (8006e1c <vTaskMissedYield+0x10>)
 8006e12:	2201      	movs	r2, #1
 8006e14:	601a      	str	r2, [r3, #0]
}
 8006e16:	46c0      	nop			; (mov r8, r8)
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20000cc8 	.word	0x20000cc8

08006e20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e28:	f000 f84e 	bl	8006ec8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e2c:	4b03      	ldr	r3, [pc, #12]	; (8006e3c <prvIdleTask+0x1c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d9f9      	bls.n	8006e28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e34:	f000 fcec 	bl	8007810 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006e38:	e7f6      	b.n	8006e28 <prvIdleTask+0x8>
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	200007e4 	.word	0x200007e4

08006e40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e46:	2300      	movs	r3, #0
 8006e48:	607b      	str	r3, [r7, #4]
 8006e4a:	e00c      	b.n	8006e66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	0013      	movs	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	189b      	adds	r3, r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4a14      	ldr	r2, [pc, #80]	; (8006ea8 <prvInitialiseTaskLists+0x68>)
 8006e58:	189b      	adds	r3, r3, r2
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	f7fe fe62 	bl	8005b24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3301      	adds	r3, #1
 8006e64:	607b      	str	r3, [r7, #4]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b37      	cmp	r3, #55	; 0x37
 8006e6a:	d9ef      	bls.n	8006e4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e6c:	4b0f      	ldr	r3, [pc, #60]	; (8006eac <prvInitialiseTaskLists+0x6c>)
 8006e6e:	0018      	movs	r0, r3
 8006e70:	f7fe fe58 	bl	8005b24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e74:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <prvInitialiseTaskLists+0x70>)
 8006e76:	0018      	movs	r0, r3
 8006e78:	f7fe fe54 	bl	8005b24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e7c:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <prvInitialiseTaskLists+0x74>)
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f7fe fe50 	bl	8005b24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e84:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <prvInitialiseTaskLists+0x78>)
 8006e86:	0018      	movs	r0, r3
 8006e88:	f7fe fe4c 	bl	8005b24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e8c:	4b0b      	ldr	r3, [pc, #44]	; (8006ebc <prvInitialiseTaskLists+0x7c>)
 8006e8e:	0018      	movs	r0, r3
 8006e90:	f7fe fe48 	bl	8005b24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e94:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <prvInitialiseTaskLists+0x80>)
 8006e96:	4a05      	ldr	r2, [pc, #20]	; (8006eac <prvInitialiseTaskLists+0x6c>)
 8006e98:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e9a:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <prvInitialiseTaskLists+0x84>)
 8006e9c:	4a04      	ldr	r2, [pc, #16]	; (8006eb0 <prvInitialiseTaskLists+0x70>)
 8006e9e:	601a      	str	r2, [r3, #0]
}
 8006ea0:	46c0      	nop			; (mov r8, r8)
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	b002      	add	sp, #8
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	200007e4 	.word	0x200007e4
 8006eac:	20000c44 	.word	0x20000c44
 8006eb0:	20000c58 	.word	0x20000c58
 8006eb4:	20000c74 	.word	0x20000c74
 8006eb8:	20000c88 	.word	0x20000c88
 8006ebc:	20000ca0 	.word	0x20000ca0
 8006ec0:	20000c6c 	.word	0x20000c6c
 8006ec4:	20000c70 	.word	0x20000c70

08006ec8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ece:	e01a      	b.n	8006f06 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8006ed0:	f000 fcae 	bl	8007830 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006ed4:	4b10      	ldr	r3, [pc, #64]	; (8006f18 <prvCheckTasksWaitingTermination+0x50>)
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	f7fe fea0 	bl	8005c26 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ee6:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <prvCheckTasksWaitingTermination+0x54>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	1e5a      	subs	r2, r3, #1
 8006eec:	4b0b      	ldr	r3, [pc, #44]	; (8006f1c <prvCheckTasksWaitingTermination+0x54>)
 8006eee:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ef0:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <prvCheckTasksWaitingTermination+0x58>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	1e5a      	subs	r2, r3, #1
 8006ef6:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <prvCheckTasksWaitingTermination+0x58>)
 8006ef8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8006efa:	f000 fcab 	bl	8007854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	0018      	movs	r0, r3
 8006f02:	f000 f80f 	bl	8006f24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f06:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <prvCheckTasksWaitingTermination+0x58>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e0      	bne.n	8006ed0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f0e:	46c0      	nop			; (mov r8, r8)
 8006f10:	46bd      	mov	sp, r7
 8006f12:	b002      	add	sp, #8
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	20000c88 	.word	0x20000c88
 8006f1c:	20000cb4 	.word	0x20000cb4
 8006f20:	20000c9c 	.word	0x20000c9c

08006f24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2259      	movs	r2, #89	; 0x59
 8006f30:	5c9b      	ldrb	r3, [r3, r2]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d109      	bne.n	8006f4a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f000 fdb6 	bl	8007aac <vPortFree>
				vPortFree( pxTCB );
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	0018      	movs	r0, r3
 8006f44:	f000 fdb2 	bl	8007aac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f48:	e010      	b.n	8006f6c <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2259      	movs	r2, #89	; 0x59
 8006f4e:	5c9b      	ldrb	r3, [r3, r2]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d104      	bne.n	8006f5e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	0018      	movs	r0, r3
 8006f58:	f000 fda8 	bl	8007aac <vPortFree>
	}
 8006f5c:	e006      	b.n	8006f6c <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2259      	movs	r2, #89	; 0x59
 8006f62:	5c9b      	ldrb	r3, [r3, r2]
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d001      	beq.n	8006f6c <prvDeleteTCB+0x48>
 8006f68:	b672      	cpsid	i
 8006f6a:	e7fe      	b.n	8006f6a <prvDeleteTCB+0x46>
	}
 8006f6c:	46c0      	nop			; (mov r8, r8)
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	b002      	add	sp, #8
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f7a:	4b0e      	ldr	r3, [pc, #56]	; (8006fb4 <prvResetNextTaskUnblockTime+0x40>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <prvResetNextTaskUnblockTime+0x14>
 8006f84:	2301      	movs	r3, #1
 8006f86:	e000      	b.n	8006f8a <prvResetNextTaskUnblockTime+0x16>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d004      	beq.n	8006f98 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f8e:	4b0a      	ldr	r3, [pc, #40]	; (8006fb8 <prvResetNextTaskUnblockTime+0x44>)
 8006f90:	2201      	movs	r2, #1
 8006f92:	4252      	negs	r2, r2
 8006f94:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f96:	e008      	b.n	8006faa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f98:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <prvResetNextTaskUnblockTime+0x40>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <prvResetNextTaskUnblockTime+0x44>)
 8006fa8:	601a      	str	r2, [r3, #0]
}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	46bd      	mov	sp, r7
 8006fae:	b002      	add	sp, #8
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	46c0      	nop			; (mov r8, r8)
 8006fb4:	20000c6c 	.word	0x20000c6c
 8006fb8:	20000cd4 	.word	0x20000cd4

08006fbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fc2:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <xTaskGetSchedulerState+0x30>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d102      	bne.n	8006fd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	607b      	str	r3, [r7, #4]
 8006fce:	e008      	b.n	8006fe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fd0:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <xTaskGetSchedulerState+0x34>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d102      	bne.n	8006fde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fd8:	2302      	movs	r3, #2
 8006fda:	607b      	str	r3, [r7, #4]
 8006fdc:	e001      	b.n	8006fe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fe2:	687b      	ldr	r3, [r7, #4]
	}
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	b002      	add	sp, #8
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	20000cc0 	.word	0x20000cc0
 8006ff0:	20000cdc 	.word	0x20000cdc

08006ff4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d044      	beq.n	8007094 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800700a:	4b25      	ldr	r3, [pc, #148]	; (80070a0 <xTaskPriorityDisinherit+0xac>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	429a      	cmp	r2, r3
 8007012:	d001      	beq.n	8007018 <xTaskPriorityDisinherit+0x24>
 8007014:	b672      	cpsid	i
 8007016:	e7fe      	b.n	8007016 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <xTaskPriorityDisinherit+0x30>
 8007020:	b672      	cpsid	i
 8007022:	e7fe      	b.n	8007022 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007028:	1e5a      	subs	r2, r3, #1
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007036:	429a      	cmp	r2, r3
 8007038:	d02c      	beq.n	8007094 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703e:	2b00      	cmp	r3, #0
 8007040:	d128      	bne.n	8007094 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	3304      	adds	r3, #4
 8007046:	0018      	movs	r0, r3
 8007048:	f7fe fded 	bl	8005c26 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	2238      	movs	r2, #56	; 0x38
 800705a:	1ad2      	subs	r2, r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007064:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <xTaskPriorityDisinherit+0xb0>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d903      	bls.n	8007074 <xTaskPriorityDisinherit+0x80>
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007070:	4b0c      	ldr	r3, [pc, #48]	; (80070a4 <xTaskPriorityDisinherit+0xb0>)
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007078:	0013      	movs	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	189b      	adds	r3, r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4a09      	ldr	r2, [pc, #36]	; (80070a8 <xTaskPriorityDisinherit+0xb4>)
 8007082:	189a      	adds	r2, r3, r2
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	3304      	adds	r3, #4
 8007088:	0019      	movs	r1, r3
 800708a:	0010      	movs	r0, r2
 800708c:	f7fe fd73 	bl	8005b76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007090:	2301      	movs	r3, #1
 8007092:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007094:	68fb      	ldr	r3, [r7, #12]
	}
 8007096:	0018      	movs	r0, r3
 8007098:	46bd      	mov	sp, r7
 800709a:	b004      	add	sp, #16
 800709c:	bd80      	pop	{r7, pc}
 800709e:	46c0      	nop			; (mov r8, r8)
 80070a0:	200007e0 	.word	0x200007e0
 80070a4:	20000cbc 	.word	0x20000cbc
 80070a8:	200007e4 	.word	0x200007e4

080070ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070b6:	4b21      	ldr	r3, [pc, #132]	; (800713c <prvAddCurrentTaskToDelayedList+0x90>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070bc:	4b20      	ldr	r3, [pc, #128]	; (8007140 <prvAddCurrentTaskToDelayedList+0x94>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3304      	adds	r3, #4
 80070c2:	0018      	movs	r0, r3
 80070c4:	f7fe fdaf 	bl	8005c26 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3301      	adds	r3, #1
 80070cc:	d10b      	bne.n	80070e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d008      	beq.n	80070e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070d4:	4b1a      	ldr	r3, [pc, #104]	; (8007140 <prvAddCurrentTaskToDelayedList+0x94>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	1d1a      	adds	r2, r3, #4
 80070da:	4b1a      	ldr	r3, [pc, #104]	; (8007144 <prvAddCurrentTaskToDelayedList+0x98>)
 80070dc:	0011      	movs	r1, r2
 80070de:	0018      	movs	r0, r3
 80070e0:	f7fe fd49 	bl	8005b76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070e4:	e026      	b.n	8007134 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	18d3      	adds	r3, r2, r3
 80070ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070ee:	4b14      	ldr	r3, [pc, #80]	; (8007140 <prvAddCurrentTaskToDelayedList+0x94>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d209      	bcs.n	8007112 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070fe:	4b12      	ldr	r3, [pc, #72]	; (8007148 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	4b0f      	ldr	r3, [pc, #60]	; (8007140 <prvAddCurrentTaskToDelayedList+0x94>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3304      	adds	r3, #4
 8007108:	0019      	movs	r1, r3
 800710a:	0010      	movs	r0, r2
 800710c:	f7fe fd55 	bl	8005bba <vListInsert>
}
 8007110:	e010      	b.n	8007134 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007112:	4b0e      	ldr	r3, [pc, #56]	; (800714c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	4b0a      	ldr	r3, [pc, #40]	; (8007140 <prvAddCurrentTaskToDelayedList+0x94>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3304      	adds	r3, #4
 800711c:	0019      	movs	r1, r3
 800711e:	0010      	movs	r0, r2
 8007120:	f7fe fd4b 	bl	8005bba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007124:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	429a      	cmp	r2, r3
 800712c:	d202      	bcs.n	8007134 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800712e:	4b08      	ldr	r3, [pc, #32]	; (8007150 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	601a      	str	r2, [r3, #0]
}
 8007134:	46c0      	nop			; (mov r8, r8)
 8007136:	46bd      	mov	sp, r7
 8007138:	b004      	add	sp, #16
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000cb8 	.word	0x20000cb8
 8007140:	200007e0 	.word	0x200007e0
 8007144:	20000ca0 	.word	0x20000ca0
 8007148:	20000c70 	.word	0x20000c70
 800714c:	20000c6c 	.word	0x20000c6c
 8007150:	20000cd4 	.word	0x20000cd4

08007154 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007154:	b590      	push	{r4, r7, lr}
 8007156:	b089      	sub	sp, #36	; 0x24
 8007158:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800715a:	2300      	movs	r3, #0
 800715c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800715e:	f000 fa8b 	bl	8007678 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007162:	4b17      	ldr	r3, [pc, #92]	; (80071c0 <xTimerCreateTimerTask+0x6c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d020      	beq.n	80071ac <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800716e:	2300      	movs	r3, #0
 8007170:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007172:	003a      	movs	r2, r7
 8007174:	1d39      	adds	r1, r7, #4
 8007176:	2308      	movs	r3, #8
 8007178:	18fb      	adds	r3, r7, r3
 800717a:	0018      	movs	r0, r3
 800717c:	f7fe fcba 	bl	8005af4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007180:	683c      	ldr	r4, [r7, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	490f      	ldr	r1, [pc, #60]	; (80071c4 <xTimerCreateTimerTask+0x70>)
 8007188:	480f      	ldr	r0, [pc, #60]	; (80071c8 <xTimerCreateTimerTask+0x74>)
 800718a:	9202      	str	r2, [sp, #8]
 800718c:	9301      	str	r3, [sp, #4]
 800718e:	2302      	movs	r3, #2
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	2300      	movs	r3, #0
 8007194:	0022      	movs	r2, r4
 8007196:	f7ff f996 	bl	80064c6 <xTaskCreateStatic>
 800719a:	0002      	movs	r2, r0
 800719c:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <xTimerCreateTimerTask+0x78>)
 800719e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071a0:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <xTimerCreateTimerTask+0x78>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80071a8:	2301      	movs	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <xTimerCreateTimerTask+0x62>
 80071b2:	b672      	cpsid	i
 80071b4:	e7fe      	b.n	80071b4 <xTimerCreateTimerTask+0x60>
	return xReturn;
 80071b6:	68fb      	ldr	r3, [r7, #12]
}
 80071b8:	0018      	movs	r0, r3
 80071ba:	46bd      	mov	sp, r7
 80071bc:	b005      	add	sp, #20
 80071be:	bd90      	pop	{r4, r7, pc}
 80071c0:	20000d10 	.word	0x20000d10
 80071c4:	08007d94 	.word	0x08007d94
 80071c8:	080072d9 	.word	0x080072d9
 80071cc:	20000d14 	.word	0x20000d14

080071d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08a      	sub	sp, #40	; 0x28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80071de:	2300      	movs	r3, #0
 80071e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <xTimerGenericCommand+0x1c>
 80071e8:	b672      	cpsid	i
 80071ea:	e7fe      	b.n	80071ea <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071ec:	4b1d      	ldr	r3, [pc, #116]	; (8007264 <xTimerGenericCommand+0x94>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d031      	beq.n	8007258 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80071f4:	2114      	movs	r1, #20
 80071f6:	187b      	adds	r3, r7, r1
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071fc:	187b      	adds	r3, r7, r1
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007202:	187b      	adds	r3, r7, r1
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b05      	cmp	r3, #5
 800720c:	dc1a      	bgt.n	8007244 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800720e:	f7ff fed5 	bl	8006fbc <xTaskGetSchedulerState>
 8007212:	0003      	movs	r3, r0
 8007214:	2b02      	cmp	r3, #2
 8007216:	d10a      	bne.n	800722e <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007218:	4b12      	ldr	r3, [pc, #72]	; (8007264 <xTimerGenericCommand+0x94>)
 800721a:	6818      	ldr	r0, [r3, #0]
 800721c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800721e:	2314      	movs	r3, #20
 8007220:	18f9      	adds	r1, r7, r3
 8007222:	2300      	movs	r3, #0
 8007224:	f7fe fded 	bl	8005e02 <xQueueGenericSend>
 8007228:	0003      	movs	r3, r0
 800722a:	627b      	str	r3, [r7, #36]	; 0x24
 800722c:	e014      	b.n	8007258 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800722e:	4b0d      	ldr	r3, [pc, #52]	; (8007264 <xTimerGenericCommand+0x94>)
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	2314      	movs	r3, #20
 8007234:	18f9      	adds	r1, r7, r3
 8007236:	2300      	movs	r3, #0
 8007238:	2200      	movs	r2, #0
 800723a:	f7fe fde2 	bl	8005e02 <xQueueGenericSend>
 800723e:	0003      	movs	r3, r0
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
 8007242:	e009      	b.n	8007258 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007244:	4b07      	ldr	r3, [pc, #28]	; (8007264 <xTimerGenericCommand+0x94>)
 8007246:	6818      	ldr	r0, [r3, #0]
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	2314      	movs	r3, #20
 800724c:	18f9      	adds	r1, r7, r3
 800724e:	2300      	movs	r3, #0
 8007250:	f7fe fe9b 	bl	8005f8a <xQueueGenericSendFromISR>
 8007254:	0003      	movs	r3, r0
 8007256:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800725a:	0018      	movs	r0, r3
 800725c:	46bd      	mov	sp, r7
 800725e:	b00a      	add	sp, #40	; 0x28
 8007260:	bd80      	pop	{r7, pc}
 8007262:	46c0      	nop			; (mov r8, r8)
 8007264:	20000d10 	.word	0x20000d10

08007268 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af02      	add	r7, sp, #8
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007272:	4b18      	ldr	r3, [pc, #96]	; (80072d4 <prvProcessExpiredTimer+0x6c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3304      	adds	r3, #4
 8007280:	0018      	movs	r0, r3
 8007282:	f7fe fcd0 	bl	8005c26 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d119      	bne.n	80072c2 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	18d1      	adds	r1, r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 f8b6 	bl	800740c <prvInsertTimerInActiveList>
 80072a0:	1e03      	subs	r3, r0, #0
 80072a2:	d00e      	beq.n	80072c2 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	2300      	movs	r3, #0
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	2300      	movs	r3, #0
 80072ae:	2100      	movs	r1, #0
 80072b0:	f7ff ff8e 	bl	80071d0 <xTimerGenericCommand>
 80072b4:	0003      	movs	r3, r0
 80072b6:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <prvProcessExpiredTimer+0x5a>
 80072be:	b672      	cpsid	i
 80072c0:	e7fe      	b.n	80072c0 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	0010      	movs	r0, r2
 80072ca:	4798      	blx	r3
}
 80072cc:	46c0      	nop			; (mov r8, r8)
 80072ce:	46bd      	mov	sp, r7
 80072d0:	b004      	add	sp, #16
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20000d08 	.word	0x20000d08

080072d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072e0:	2308      	movs	r3, #8
 80072e2:	18fb      	adds	r3, r7, r3
 80072e4:	0018      	movs	r0, r3
 80072e6:	f000 f851 	bl	800738c <prvGetNextExpireTime>
 80072ea:	0003      	movs	r3, r0
 80072ec:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	0011      	movs	r1, r2
 80072f4:	0018      	movs	r0, r3
 80072f6:	f000 f803 	bl	8007300 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072fa:	f000 f8c9 	bl	8007490 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072fe:	e7ef      	b.n	80072e0 <prvTimerTask+0x8>

08007300 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800730a:	f7ff facf 	bl	80068ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800730e:	2308      	movs	r3, #8
 8007310:	18fb      	adds	r3, r7, r3
 8007312:	0018      	movs	r0, r3
 8007314:	f000 f85a 	bl	80073cc <prvSampleTimeNow>
 8007318:	0003      	movs	r3, r0
 800731a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d129      	bne.n	8007376 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10c      	bne.n	8007342 <prvProcessTimerOrBlockTask+0x42>
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	429a      	cmp	r2, r3
 800732e:	d808      	bhi.n	8007342 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8007330:	f7ff fac8 	bl	80068c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	0011      	movs	r1, r2
 800733a:	0018      	movs	r0, r3
 800733c:	f7ff ff94 	bl	8007268 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007340:	e01b      	b.n	800737a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d006      	beq.n	8007356 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007348:	4b0e      	ldr	r3, [pc, #56]	; (8007384 <prvProcessTimerOrBlockTask+0x84>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	425a      	negs	r2, r3
 8007350:	4153      	adcs	r3, r2
 8007352:	b2db      	uxtb	r3, r3
 8007354:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007356:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <prvProcessTimerOrBlockTask+0x88>)
 8007358:	6818      	ldr	r0, [r3, #0]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	0019      	movs	r1, r3
 8007364:	f7ff f87c 	bl	8006460 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007368:	f7ff faac 	bl	80068c4 <xTaskResumeAll>
 800736c:	1e03      	subs	r3, r0, #0
 800736e:	d104      	bne.n	800737a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8007370:	f000 fa4e 	bl	8007810 <vPortYield>
}
 8007374:	e001      	b.n	800737a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8007376:	f7ff faa5 	bl	80068c4 <xTaskResumeAll>
}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	46bd      	mov	sp, r7
 800737e:	b004      	add	sp, #16
 8007380:	bd80      	pop	{r7, pc}
 8007382:	46c0      	nop			; (mov r8, r8)
 8007384:	20000d0c 	.word	0x20000d0c
 8007388:	20000d10 	.word	0x20000d10

0800738c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007394:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <prvGetNextExpireTime+0x3c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	425a      	negs	r2, r3
 800739c:	4153      	adcs	r3, r2
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	001a      	movs	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d105      	bne.n	80073ba <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073ae:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <prvGetNextExpireTime+0x3c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	e001      	b.n	80073be <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80073be:	68fb      	ldr	r3, [r7, #12]
}
 80073c0:	0018      	movs	r0, r3
 80073c2:	46bd      	mov	sp, r7
 80073c4:	b004      	add	sp, #16
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20000d08 	.word	0x20000d08

080073cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073d4:	f7ff fb02 	bl	80069dc <xTaskGetTickCount>
 80073d8:	0003      	movs	r3, r0
 80073da:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80073dc:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <prvSampleTimeNow+0x3c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d205      	bcs.n	80073f2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80073e6:	f000 f8ed 	bl	80075c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	e002      	b.n	80073f8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073f8:	4b03      	ldr	r3, [pc, #12]	; (8007408 <prvSampleTimeNow+0x3c>)
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80073fe:	68fb      	ldr	r3, [r7, #12]
}
 8007400:	0018      	movs	r0, r3
 8007402:	46bd      	mov	sp, r7
 8007404:	b004      	add	sp, #16
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20000d18 	.word	0x20000d18

0800740c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800741a:	2300      	movs	r3, #0
 800741c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	429a      	cmp	r2, r3
 8007430:	d812      	bhi.n	8007458 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	1ad2      	subs	r2, r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	429a      	cmp	r2, r3
 800743e:	d302      	bcc.n	8007446 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007440:	2301      	movs	r3, #1
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	e01b      	b.n	800747e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007446:	4b10      	ldr	r3, [pc, #64]	; (8007488 <prvInsertTimerInActiveList+0x7c>)
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3304      	adds	r3, #4
 800744e:	0019      	movs	r1, r3
 8007450:	0010      	movs	r0, r2
 8007452:	f7fe fbb2 	bl	8005bba <vListInsert>
 8007456:	e012      	b.n	800747e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	429a      	cmp	r2, r3
 800745e:	d206      	bcs.n	800746e <prvInsertTimerInActiveList+0x62>
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	d302      	bcc.n	800746e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007468:	2301      	movs	r3, #1
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	e007      	b.n	800747e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800746e:	4b07      	ldr	r3, [pc, #28]	; (800748c <prvInsertTimerInActiveList+0x80>)
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3304      	adds	r3, #4
 8007476:	0019      	movs	r1, r3
 8007478:	0010      	movs	r0, r2
 800747a:	f7fe fb9e 	bl	8005bba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800747e:	697b      	ldr	r3, [r7, #20]
}
 8007480:	0018      	movs	r0, r3
 8007482:	46bd      	mov	sp, r7
 8007484:	b006      	add	sp, #24
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20000d0c 	.word	0x20000d0c
 800748c:	20000d08 	.word	0x20000d08

08007490 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08c      	sub	sp, #48	; 0x30
 8007494:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007496:	e082      	b.n	800759e <prvProcessReceivedCommands+0x10e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007498:	2308      	movs	r3, #8
 800749a:	18fb      	adds	r3, r7, r3
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	da10      	bge.n	80074c4 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80074a2:	2308      	movs	r3, #8
 80074a4:	18fb      	adds	r3, r7, r3
 80074a6:	3304      	adds	r3, #4
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <prvProcessReceivedCommands+0x24>
 80074b0:	b672      	cpsid	i
 80074b2:	e7fe      	b.n	80074b2 <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	6858      	ldr	r0, [r3, #4]
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	0019      	movs	r1, r3
 80074c2:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074c4:	2308      	movs	r3, #8
 80074c6:	18fb      	adds	r3, r7, r3
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	db66      	blt.n	800759c <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074ce:	2308      	movs	r3, #8
 80074d0:	18fb      	adds	r3, r7, r3
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d004      	beq.n	80074e8 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	3304      	adds	r3, #4
 80074e2:	0018      	movs	r0, r3
 80074e4:	f7fe fb9f 	bl	8005c26 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074e8:	1d3b      	adds	r3, r7, #4
 80074ea:	0018      	movs	r0, r3
 80074ec:	f7ff ff6e 	bl	80073cc <prvSampleTimeNow>
 80074f0:	0003      	movs	r3, r0
 80074f2:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80074f4:	2308      	movs	r3, #8
 80074f6:	18fb      	adds	r3, r7, r3
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b09      	cmp	r3, #9
 80074fc:	d84f      	bhi.n	800759e <prvProcessReceivedCommands+0x10e>
 80074fe:	009a      	lsls	r2, r3, #2
 8007500:	4b2e      	ldr	r3, [pc, #184]	; (80075bc <prvProcessReceivedCommands+0x12c>)
 8007502:	18d3      	adds	r3, r2, r3
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007508:	2008      	movs	r0, #8
 800750a:	183b      	adds	r3, r7, r0
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	18d1      	adds	r1, r2, r3
 8007514:	183b      	adds	r3, r7, r0
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	69fa      	ldr	r2, [r7, #28]
 800751a:	6a38      	ldr	r0, [r7, #32]
 800751c:	f7ff ff76 	bl	800740c <prvInsertTimerInActiveList>
 8007520:	1e03      	subs	r3, r0, #0
 8007522:	d03c      	beq.n	800759e <prvProcessReceivedCommands+0x10e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	6a3a      	ldr	r2, [r7, #32]
 800752a:	0010      	movs	r0, r2
 800752c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d133      	bne.n	800759e <prvProcessReceivedCommands+0x10e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007536:	2308      	movs	r3, #8
 8007538:	18fb      	adds	r3, r7, r3
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	18d2      	adds	r2, r2, r3
 8007542:	6a38      	ldr	r0, [r7, #32]
 8007544:	2300      	movs	r3, #0
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	2300      	movs	r3, #0
 800754a:	2100      	movs	r1, #0
 800754c:	f7ff fe40 	bl	80071d0 <xTimerGenericCommand>
 8007550:	0003      	movs	r3, r0
 8007552:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d121      	bne.n	800759e <prvProcessReceivedCommands+0x10e>
 800755a:	b672      	cpsid	i
 800755c:	e7fe      	b.n	800755c <prvProcessReceivedCommands+0xcc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800755e:	2308      	movs	r3, #8
 8007560:	18fb      	adds	r3, r7, r3
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <prvProcessReceivedCommands+0xe4>
 8007570:	b672      	cpsid	i
 8007572:	e7fe      	b.n	8007572 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	699a      	ldr	r2, [r3, #24]
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	18d1      	adds	r1, r2, r3
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	6a38      	ldr	r0, [r7, #32]
 8007582:	f7ff ff43 	bl	800740c <prvInsertTimerInActiveList>
					break;
 8007586:	e00a      	b.n	800759e <prvProcessReceivedCommands+0x10e>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	222c      	movs	r2, #44	; 0x2c
 800758c:	5c9b      	ldrb	r3, [r3, r2]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d105      	bne.n	800759e <prvProcessReceivedCommands+0x10e>
						{
							vPortFree( pxTimer );
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	0018      	movs	r0, r3
 8007596:	f000 fa89 	bl	8007aac <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800759a:	e000      	b.n	800759e <prvProcessReceivedCommands+0x10e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800759c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800759e:	4b08      	ldr	r3, [pc, #32]	; (80075c0 <prvProcessReceivedCommands+0x130>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2208      	movs	r2, #8
 80075a4:	18b9      	adds	r1, r7, r2
 80075a6:	2200      	movs	r2, #0
 80075a8:	0018      	movs	r0, r3
 80075aa:	f7fe fd5f 	bl	800606c <xQueueReceive>
 80075ae:	1e03      	subs	r3, r0, #0
 80075b0:	d000      	beq.n	80075b4 <prvProcessReceivedCommands+0x124>
 80075b2:	e771      	b.n	8007498 <prvProcessReceivedCommands+0x8>
	}
}
 80075b4:	46c0      	nop			; (mov r8, r8)
 80075b6:	46bd      	mov	sp, r7
 80075b8:	b00a      	add	sp, #40	; 0x28
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	08007e8c 	.word	0x08007e8c
 80075c0:	20000d10 	.word	0x20000d10

080075c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b088      	sub	sp, #32
 80075c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075ca:	e03e      	b.n	800764a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075cc:	4b28      	ldr	r3, [pc, #160]	; (8007670 <prvSwitchTimerLists+0xac>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075d6:	4b26      	ldr	r3, [pc, #152]	; (8007670 <prvSwitchTimerLists+0xac>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3304      	adds	r3, #4
 80075e4:	0018      	movs	r0, r3
 80075e6:	f7fe fb1e 	bl	8005c26 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	0010      	movs	r0, r2
 80075f2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	69db      	ldr	r3, [r3, #28]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d126      	bne.n	800764a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	18d3      	adds	r3, r2, r3
 8007604:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	429a      	cmp	r2, r3
 800760c:	d90e      	bls.n	800762c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800761a:	4b15      	ldr	r3, [pc, #84]	; (8007670 <prvSwitchTimerLists+0xac>)
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3304      	adds	r3, #4
 8007622:	0019      	movs	r1, r3
 8007624:	0010      	movs	r0, r2
 8007626:	f7fe fac8 	bl	8005bba <vListInsert>
 800762a:	e00e      	b.n	800764a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	2300      	movs	r3, #0
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	2300      	movs	r3, #0
 8007636:	2100      	movs	r1, #0
 8007638:	f7ff fdca 	bl	80071d0 <xTimerGenericCommand>
 800763c:	0003      	movs	r3, r0
 800763e:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <prvSwitchTimerLists+0x86>
 8007646:	b672      	cpsid	i
 8007648:	e7fe      	b.n	8007648 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800764a:	4b09      	ldr	r3, [pc, #36]	; (8007670 <prvSwitchTimerLists+0xac>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1bb      	bne.n	80075cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007654:	4b06      	ldr	r3, [pc, #24]	; (8007670 <prvSwitchTimerLists+0xac>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800765a:	4b06      	ldr	r3, [pc, #24]	; (8007674 <prvSwitchTimerLists+0xb0>)
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	4b04      	ldr	r3, [pc, #16]	; (8007670 <prvSwitchTimerLists+0xac>)
 8007660:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8007662:	4b04      	ldr	r3, [pc, #16]	; (8007674 <prvSwitchTimerLists+0xb0>)
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	601a      	str	r2, [r3, #0]
}
 8007668:	46c0      	nop			; (mov r8, r8)
 800766a:	46bd      	mov	sp, r7
 800766c:	b006      	add	sp, #24
 800766e:	bd80      	pop	{r7, pc}
 8007670:	20000d08 	.word	0x20000d08
 8007674:	20000d0c 	.word	0x20000d0c

08007678 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800767e:	f000 f8d7 	bl	8007830 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007682:	4b17      	ldr	r3, [pc, #92]	; (80076e0 <prvCheckForValidListAndQueue+0x68>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d124      	bne.n	80076d4 <prvCheckForValidListAndQueue+0x5c>
		{
			vListInitialise( &xActiveTimerList1 );
 800768a:	4b16      	ldr	r3, [pc, #88]	; (80076e4 <prvCheckForValidListAndQueue+0x6c>)
 800768c:	0018      	movs	r0, r3
 800768e:	f7fe fa49 	bl	8005b24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007692:	4b15      	ldr	r3, [pc, #84]	; (80076e8 <prvCheckForValidListAndQueue+0x70>)
 8007694:	0018      	movs	r0, r3
 8007696:	f7fe fa45 	bl	8005b24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800769a:	4b14      	ldr	r3, [pc, #80]	; (80076ec <prvCheckForValidListAndQueue+0x74>)
 800769c:	4a11      	ldr	r2, [pc, #68]	; (80076e4 <prvCheckForValidListAndQueue+0x6c>)
 800769e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076a0:	4b13      	ldr	r3, [pc, #76]	; (80076f0 <prvCheckForValidListAndQueue+0x78>)
 80076a2:	4a11      	ldr	r2, [pc, #68]	; (80076e8 <prvCheckForValidListAndQueue+0x70>)
 80076a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076a6:	4913      	ldr	r1, [pc, #76]	; (80076f4 <prvCheckForValidListAndQueue+0x7c>)
 80076a8:	4a13      	ldr	r2, [pc, #76]	; (80076f8 <prvCheckForValidListAndQueue+0x80>)
 80076aa:	2300      	movs	r3, #0
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	000b      	movs	r3, r1
 80076b0:	2110      	movs	r1, #16
 80076b2:	200a      	movs	r0, #10
 80076b4:	f7fe fb33 	bl	8005d1e <xQueueGenericCreateStatic>
 80076b8:	0002      	movs	r2, r0
 80076ba:	4b09      	ldr	r3, [pc, #36]	; (80076e0 <prvCheckForValidListAndQueue+0x68>)
 80076bc:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076be:	4b08      	ldr	r3, [pc, #32]	; (80076e0 <prvCheckForValidListAndQueue+0x68>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d006      	beq.n	80076d4 <prvCheckForValidListAndQueue+0x5c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076c6:	4b06      	ldr	r3, [pc, #24]	; (80076e0 <prvCheckForValidListAndQueue+0x68>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a0c      	ldr	r2, [pc, #48]	; (80076fc <prvCheckForValidListAndQueue+0x84>)
 80076cc:	0011      	movs	r1, r2
 80076ce:	0018      	movs	r0, r3
 80076d0:	f7fe fe9e 	bl	8006410 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076d4:	f000 f8be 	bl	8007854 <vPortExitCritical>
}
 80076d8:	46c0      	nop			; (mov r8, r8)
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	20000d10 	.word	0x20000d10
 80076e4:	20000ce0 	.word	0x20000ce0
 80076e8:	20000cf4 	.word	0x20000cf4
 80076ec:	20000d08 	.word	0x20000d08
 80076f0:	20000d0c 	.word	0x20000d0c
 80076f4:	20000dbc 	.word	0x20000dbc
 80076f8:	20000d1c 	.word	0x20000d1c
 80076fc:	08007d9c 	.word	0x08007d9c

08007700 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3b04      	subs	r3, #4
 8007710:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2280      	movs	r2, #128	; 0x80
 8007716:	0452      	lsls	r2, r2, #17
 8007718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3b04      	subs	r3, #4
 800771e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3b04      	subs	r3, #4
 800772a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800772c:	4a08      	ldr	r2, [pc, #32]	; (8007750 <pxPortInitialiseStack+0x50>)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3b14      	subs	r3, #20
 8007736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3b20      	subs	r3, #32
 8007742:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007744:	68fb      	ldr	r3, [r7, #12]
}
 8007746:	0018      	movs	r0, r3
 8007748:	46bd      	mov	sp, r7
 800774a:	b004      	add	sp, #16
 800774c:	bd80      	pop	{r7, pc}
 800774e:	46c0      	nop			; (mov r8, r8)
 8007750:	08007755 	.word	0x08007755

08007754 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800775a:	2300      	movs	r3, #0
 800775c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800775e:	4b07      	ldr	r3, [pc, #28]	; (800777c <prvTaskExitError+0x28>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3301      	adds	r3, #1
 8007764:	d001      	beq.n	800776a <prvTaskExitError+0x16>
 8007766:	b672      	cpsid	i
 8007768:	e7fe      	b.n	8007768 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800776a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800776c:	46c0      	nop			; (mov r8, r8)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0fc      	beq.n	800776e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007774:	46c0      	nop			; (mov r8, r8)
 8007776:	46bd      	mov	sp, r7
 8007778:	b002      	add	sp, #8
 800777a:	bd80      	pop	{r7, pc}
 800777c:	200000f8 	.word	0x200000f8

08007780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007784:	46c0      	nop			; (mov r8, r8)
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	0000      	movs	r0, r0
 800778c:	0000      	movs	r0, r0
	...

08007790 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007790:	4a0b      	ldr	r2, [pc, #44]	; (80077c0 <pxCurrentTCBConst2>)
 8007792:	6813      	ldr	r3, [r2, #0]
 8007794:	6818      	ldr	r0, [r3, #0]
 8007796:	3020      	adds	r0, #32
 8007798:	f380 8809 	msr	PSP, r0
 800779c:	2002      	movs	r0, #2
 800779e:	f380 8814 	msr	CONTROL, r0
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80077a8:	46ae      	mov	lr, r5
 80077aa:	bc08      	pop	{r3}
 80077ac:	bc04      	pop	{r2}
 80077ae:	b662      	cpsie	i
 80077b0:	4718      	bx	r3
 80077b2:	46c0      	nop			; (mov r8, r8)
 80077b4:	46c0      	nop			; (mov r8, r8)
 80077b6:	46c0      	nop			; (mov r8, r8)
 80077b8:	46c0      	nop			; (mov r8, r8)
 80077ba:	46c0      	nop			; (mov r8, r8)
 80077bc:	46c0      	nop			; (mov r8, r8)
 80077be:	46c0      	nop			; (mov r8, r8)

080077c0 <pxCurrentTCBConst2>:
 80077c0:	200007e0 	.word	0x200007e0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80077c4:	46c0      	nop			; (mov r8, r8)
 80077c6:	46c0      	nop			; (mov r8, r8)

080077c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80077cc:	4b0e      	ldr	r3, [pc, #56]	; (8007808 <xPortStartScheduler+0x40>)
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	4b0d      	ldr	r3, [pc, #52]	; (8007808 <xPortStartScheduler+0x40>)
 80077d2:	21ff      	movs	r1, #255	; 0xff
 80077d4:	0409      	lsls	r1, r1, #16
 80077d6:	430a      	orrs	r2, r1
 80077d8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80077da:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <xPortStartScheduler+0x40>)
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <xPortStartScheduler+0x40>)
 80077e0:	21ff      	movs	r1, #255	; 0xff
 80077e2:	0609      	lsls	r1, r1, #24
 80077e4:	430a      	orrs	r2, r1
 80077e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80077e8:	f000 f898 	bl	800791c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077ec:	4b07      	ldr	r3, [pc, #28]	; (800780c <xPortStartScheduler+0x44>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80077f2:	f7ff ffcd 	bl	8007790 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077f6:	f7ff f9b3 	bl	8006b60 <vTaskSwitchContext>
	prvTaskExitError();
 80077fa:	f7ff ffab 	bl	8007754 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	0018      	movs	r0, r3
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	46c0      	nop			; (mov r8, r8)
 8007808:	e000ed20 	.word	0xe000ed20
 800780c:	200000f8 	.word	0x200000f8

08007810 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8007814:	4b05      	ldr	r3, [pc, #20]	; (800782c <vPortYield+0x1c>)
 8007816:	2280      	movs	r2, #128	; 0x80
 8007818:	0552      	lsls	r2, r2, #21
 800781a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800781c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007820:	f3bf 8f6f 	isb	sy
}
 8007824:	46c0      	nop			; (mov r8, r8)
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	46c0      	nop			; (mov r8, r8)
 800782c:	e000ed04 	.word	0xe000ed04

08007830 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007834:	b672      	cpsid	i
    uxCriticalNesting++;
 8007836:	4b06      	ldr	r3, [pc, #24]	; (8007850 <vPortEnterCritical+0x20>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	4b04      	ldr	r3, [pc, #16]	; (8007850 <vPortEnterCritical+0x20>)
 800783e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007840:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007844:	f3bf 8f6f 	isb	sy
}
 8007848:	46c0      	nop			; (mov r8, r8)
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	46c0      	nop			; (mov r8, r8)
 8007850:	200000f8 	.word	0x200000f8

08007854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007858:	4b09      	ldr	r3, [pc, #36]	; (8007880 <vPortExitCritical+0x2c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <vPortExitCritical+0x10>
 8007860:	b672      	cpsid	i
 8007862:	e7fe      	b.n	8007862 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8007864:	4b06      	ldr	r3, [pc, #24]	; (8007880 <vPortExitCritical+0x2c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	1e5a      	subs	r2, r3, #1
 800786a:	4b05      	ldr	r3, [pc, #20]	; (8007880 <vPortExitCritical+0x2c>)
 800786c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800786e:	4b04      	ldr	r3, [pc, #16]	; (8007880 <vPortExitCritical+0x2c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d100      	bne.n	8007878 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8007876:	b662      	cpsie	i
    }
}
 8007878:	46c0      	nop			; (mov r8, r8)
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	46c0      	nop			; (mov r8, r8)
 8007880:	200000f8 	.word	0x200000f8

08007884 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007884:	f3ef 8010 	mrs	r0, PRIMASK
 8007888:	b672      	cpsid	i
 800788a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800788c:	46c0      	nop			; (mov r8, r8)
 800788e:	0018      	movs	r0, r3

08007890 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007890:	f380 8810 	msr	PRIMASK, r0
 8007894:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8007896:	46c0      	nop			; (mov r8, r8)
	...

080078a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078a0:	f3ef 8009 	mrs	r0, PSP
 80078a4:	4b0e      	ldr	r3, [pc, #56]	; (80078e0 <pxCurrentTCBConst>)
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	3820      	subs	r0, #32
 80078aa:	6010      	str	r0, [r2, #0]
 80078ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80078ae:	4644      	mov	r4, r8
 80078b0:	464d      	mov	r5, r9
 80078b2:	4656      	mov	r6, sl
 80078b4:	465f      	mov	r7, fp
 80078b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80078b8:	b508      	push	{r3, lr}
 80078ba:	b672      	cpsid	i
 80078bc:	f7ff f950 	bl	8006b60 <vTaskSwitchContext>
 80078c0:	b662      	cpsie	i
 80078c2:	bc0c      	pop	{r2, r3}
 80078c4:	6811      	ldr	r1, [r2, #0]
 80078c6:	6808      	ldr	r0, [r1, #0]
 80078c8:	3010      	adds	r0, #16
 80078ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80078cc:	46a0      	mov	r8, r4
 80078ce:	46a9      	mov	r9, r5
 80078d0:	46b2      	mov	sl, r6
 80078d2:	46bb      	mov	fp, r7
 80078d4:	f380 8809 	msr	PSP, r0
 80078d8:	3820      	subs	r0, #32
 80078da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80078dc:	4718      	bx	r3
 80078de:	46c0      	nop			; (mov r8, r8)

080078e0 <pxCurrentTCBConst>:
 80078e0:	200007e0 	.word	0x200007e0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80078e4:	46c0      	nop			; (mov r8, r8)
 80078e6:	46c0      	nop			; (mov r8, r8)

080078e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80078ee:	f7ff ffc9 	bl	8007884 <ulSetInterruptMaskFromISR>
 80078f2:	0003      	movs	r3, r0
 80078f4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078f6:	f7ff f87f 	bl	80069f8 <xTaskIncrementTick>
 80078fa:	1e03      	subs	r3, r0, #0
 80078fc:	d003      	beq.n	8007906 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80078fe:	4b06      	ldr	r3, [pc, #24]	; (8007918 <SysTick_Handler+0x30>)
 8007900:	2280      	movs	r2, #128	; 0x80
 8007902:	0552      	lsls	r2, r2, #21
 8007904:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	0018      	movs	r0, r3
 800790a:	f7ff ffc1 	bl	8007890 <vClearInterruptMaskFromISR>
}
 800790e:	46c0      	nop			; (mov r8, r8)
 8007910:	46bd      	mov	sp, r7
 8007912:	b002      	add	sp, #8
 8007914:	bd80      	pop	{r7, pc}
 8007916:	46c0      	nop			; (mov r8, r8)
 8007918:	e000ed04 	.word	0xe000ed04

0800791c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8007920:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <prvSetupTimerInterrupt+0x34>)
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8007926:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <prvSetupTimerInterrupt+0x38>)
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800792c:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <prvSetupTimerInterrupt+0x3c>)
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	23fa      	movs	r3, #250	; 0xfa
 8007932:	0099      	lsls	r1, r3, #2
 8007934:	0010      	movs	r0, r2
 8007936:	f7f8 fbe7 	bl	8000108 <__udivsi3>
 800793a:	0003      	movs	r3, r0
 800793c:	001a      	movs	r2, r3
 800793e:	4b07      	ldr	r3, [pc, #28]	; (800795c <prvSetupTimerInterrupt+0x40>)
 8007940:	3a01      	subs	r2, #1
 8007942:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8007944:	4b02      	ldr	r3, [pc, #8]	; (8007950 <prvSetupTimerInterrupt+0x34>)
 8007946:	2207      	movs	r2, #7
 8007948:	601a      	str	r2, [r3, #0]
}
 800794a:	46c0      	nop			; (mov r8, r8)
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	e000e010 	.word	0xe000e010
 8007954:	e000e018 	.word	0xe000e018
 8007958:	200000f0 	.word	0x200000f0
 800795c:	e000e014 	.word	0xe000e014

08007960 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007968:	2300      	movs	r3, #0
 800796a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800796c:	f7fe ff9e 	bl	80068ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007970:	4b49      	ldr	r3, [pc, #292]	; (8007a98 <pvPortMalloc+0x138>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007978:	f000 f8e0 	bl	8007b3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800797c:	4b47      	ldr	r3, [pc, #284]	; (8007a9c <pvPortMalloc+0x13c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	4013      	ands	r3, r2
 8007984:	d000      	beq.n	8007988 <pvPortMalloc+0x28>
 8007986:	e079      	b.n	8007a7c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d012      	beq.n	80079b4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800798e:	2208      	movs	r2, #8
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	189b      	adds	r3, r3, r2
 8007994:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2207      	movs	r2, #7
 800799a:	4013      	ands	r3, r2
 800799c:	d00a      	beq.n	80079b4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2207      	movs	r2, #7
 80079a2:	4393      	bics	r3, r2
 80079a4:	3308      	adds	r3, #8
 80079a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2207      	movs	r2, #7
 80079ac:	4013      	ands	r3, r2
 80079ae:	d001      	beq.n	80079b4 <pvPortMalloc+0x54>
 80079b0:	b672      	cpsid	i
 80079b2:	e7fe      	b.n	80079b2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d060      	beq.n	8007a7c <pvPortMalloc+0x11c>
 80079ba:	4b39      	ldr	r3, [pc, #228]	; (8007aa0 <pvPortMalloc+0x140>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d85b      	bhi.n	8007a7c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80079c4:	4b37      	ldr	r3, [pc, #220]	; (8007aa4 <pvPortMalloc+0x144>)
 80079c6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80079c8:	4b36      	ldr	r3, [pc, #216]	; (8007aa4 <pvPortMalloc+0x144>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079ce:	e004      	b.n	80079da <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d903      	bls.n	80079ec <pvPortMalloc+0x8c>
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1f1      	bne.n	80079d0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079ec:	4b2a      	ldr	r3, [pc, #168]	; (8007a98 <pvPortMalloc+0x138>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d042      	beq.n	8007a7c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2208      	movs	r2, #8
 80079fc:	189b      	adds	r3, r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	1ad2      	subs	r2, r2, r3
 8007a10:	2308      	movs	r3, #8
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d916      	bls.n	8007a46 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	18d3      	adds	r3, r2, r3
 8007a1e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2207      	movs	r2, #7
 8007a24:	4013      	ands	r3, r2
 8007a26:	d001      	beq.n	8007a2c <pvPortMalloc+0xcc>
 8007a28:	b672      	cpsid	i
 8007a2a:	e7fe      	b.n	8007a2a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	1ad2      	subs	r2, r2, r3
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	0018      	movs	r0, r3
 8007a42:	f000 f8db 	bl	8007bfc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a46:	4b16      	ldr	r3, [pc, #88]	; (8007aa0 <pvPortMalloc+0x140>)
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	1ad2      	subs	r2, r2, r3
 8007a50:	4b13      	ldr	r3, [pc, #76]	; (8007aa0 <pvPortMalloc+0x140>)
 8007a52:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a54:	4b12      	ldr	r3, [pc, #72]	; (8007aa0 <pvPortMalloc+0x140>)
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	4b13      	ldr	r3, [pc, #76]	; (8007aa8 <pvPortMalloc+0x148>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d203      	bcs.n	8007a68 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a60:	4b0f      	ldr	r3, [pc, #60]	; (8007aa0 <pvPortMalloc+0x140>)
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	4b10      	ldr	r3, [pc, #64]	; (8007aa8 <pvPortMalloc+0x148>)
 8007a66:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	4b0b      	ldr	r3, [pc, #44]	; (8007a9c <pvPortMalloc+0x13c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	431a      	orrs	r2, r3
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a7c:	f7fe ff22 	bl	80068c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2207      	movs	r2, #7
 8007a84:	4013      	ands	r3, r2
 8007a86:	d001      	beq.n	8007a8c <pvPortMalloc+0x12c>
 8007a88:	b672      	cpsid	i
 8007a8a:	e7fe      	b.n	8007a8a <pvPortMalloc+0x12a>
	return pvReturn;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
}
 8007a8e:	0018      	movs	r0, r3
 8007a90:	46bd      	mov	sp, r7
 8007a92:	b006      	add	sp, #24
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	20001a14 	.word	0x20001a14
 8007a9c:	20001a20 	.word	0x20001a20
 8007aa0:	20001a18 	.word	0x20001a18
 8007aa4:	20001a0c 	.word	0x20001a0c
 8007aa8:	20001a1c 	.word	0x20001a1c

08007aac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d035      	beq.n	8007b2a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007abe:	2308      	movs	r3, #8
 8007ac0:	425b      	negs	r3, r3
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	18d3      	adds	r3, r2, r3
 8007ac6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	4b18      	ldr	r3, [pc, #96]	; (8007b34 <vPortFree+0x88>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	d101      	bne.n	8007adc <vPortFree+0x30>
 8007ad8:	b672      	cpsid	i
 8007ada:	e7fe      	b.n	8007ada <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <vPortFree+0x3c>
 8007ae4:	b672      	cpsid	i
 8007ae6:	e7fe      	b.n	8007ae6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	4b11      	ldr	r3, [pc, #68]	; (8007b34 <vPortFree+0x88>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4013      	ands	r3, r2
 8007af2:	d01a      	beq.n	8007b2a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d116      	bne.n	8007b2a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	4b0c      	ldr	r3, [pc, #48]	; (8007b34 <vPortFree+0x88>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	43db      	mvns	r3, r3
 8007b06:	401a      	ands	r2, r3
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b0c:	f7fe fece 	bl	80068ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	4b08      	ldr	r3, [pc, #32]	; (8007b38 <vPortFree+0x8c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	18d2      	adds	r2, r2, r3
 8007b1a:	4b07      	ldr	r3, [pc, #28]	; (8007b38 <vPortFree+0x8c>)
 8007b1c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	0018      	movs	r0, r3
 8007b22:	f000 f86b 	bl	8007bfc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007b26:	f7fe fecd 	bl	80068c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b2a:	46c0      	nop			; (mov r8, r8)
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	b004      	add	sp, #16
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	46c0      	nop			; (mov r8, r8)
 8007b34:	20001a20 	.word	0x20001a20
 8007b38:	20001a18 	.word	0x20001a18

08007b3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b42:	23c0      	movs	r3, #192	; 0xc0
 8007b44:	011b      	lsls	r3, r3, #4
 8007b46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b48:	4b26      	ldr	r3, [pc, #152]	; (8007be4 <prvHeapInit+0xa8>)
 8007b4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2207      	movs	r2, #7
 8007b50:	4013      	ands	r3, r2
 8007b52:	d00c      	beq.n	8007b6e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3307      	adds	r3, #7
 8007b58:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2207      	movs	r2, #7
 8007b5e:	4393      	bics	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	1ad2      	subs	r2, r2, r3
 8007b68:	4b1e      	ldr	r3, [pc, #120]	; (8007be4 <prvHeapInit+0xa8>)
 8007b6a:	18d3      	adds	r3, r2, r3
 8007b6c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b72:	4b1d      	ldr	r3, [pc, #116]	; (8007be8 <prvHeapInit+0xac>)
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b78:	4b1b      	ldr	r3, [pc, #108]	; (8007be8 <prvHeapInit+0xac>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	18d3      	adds	r3, r2, r3
 8007b84:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b86:	2208      	movs	r2, #8
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	1a9b      	subs	r3, r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2207      	movs	r2, #7
 8007b92:	4393      	bics	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	4b14      	ldr	r3, [pc, #80]	; (8007bec <prvHeapInit+0xb0>)
 8007b9a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007b9c:	4b13      	ldr	r3, [pc, #76]	; (8007bec <prvHeapInit+0xb0>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ba4:	4b11      	ldr	r3, [pc, #68]	; (8007bec <prvHeapInit+0xb0>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	1ad2      	subs	r2, r2, r3
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007bba:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <prvHeapInit+0xb0>)
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	4b0a      	ldr	r3, [pc, #40]	; (8007bf0 <prvHeapInit+0xb4>)
 8007bc8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <prvHeapInit+0xb8>)
 8007bd0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bd2:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <prvHeapInit+0xbc>)
 8007bd4:	2280      	movs	r2, #128	; 0x80
 8007bd6:	0612      	lsls	r2, r2, #24
 8007bd8:	601a      	str	r2, [r3, #0]
}
 8007bda:	46c0      	nop			; (mov r8, r8)
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	b004      	add	sp, #16
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	46c0      	nop			; (mov r8, r8)
 8007be4:	20000e0c 	.word	0x20000e0c
 8007be8:	20001a0c 	.word	0x20001a0c
 8007bec:	20001a14 	.word	0x20001a14
 8007bf0:	20001a1c 	.word	0x20001a1c
 8007bf4:	20001a18 	.word	0x20001a18
 8007bf8:	20001a20 	.word	0x20001a20

08007bfc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c04:	4b27      	ldr	r3, [pc, #156]	; (8007ca4 <prvInsertBlockIntoFreeList+0xa8>)
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	e002      	b.n	8007c10 <prvInsertBlockIntoFreeList+0x14>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d8f7      	bhi.n	8007c0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	18d3      	adds	r3, r2, r3
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d108      	bne.n	8007c3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	18d2      	adds	r2, r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	18d2      	adds	r2, r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d118      	bne.n	8007c84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	4b14      	ldr	r3, [pc, #80]	; (8007ca8 <prvInsertBlockIntoFreeList+0xac>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d00d      	beq.n	8007c7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	18d2      	adds	r2, r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	e008      	b.n	8007c8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ca8 <prvInsertBlockIntoFreeList+0xac>)
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	e003      	b.n	8007c8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d002      	beq.n	8007c9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c9a:	46c0      	nop			; (mov r8, r8)
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	b004      	add	sp, #16
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	46c0      	nop			; (mov r8, r8)
 8007ca4:	20001a0c 	.word	0x20001a0c
 8007ca8:	20001a14 	.word	0x20001a14

08007cac <__libc_init_array>:
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	2600      	movs	r6, #0
 8007cb0:	4d0c      	ldr	r5, [pc, #48]	; (8007ce4 <__libc_init_array+0x38>)
 8007cb2:	4c0d      	ldr	r4, [pc, #52]	; (8007ce8 <__libc_init_array+0x3c>)
 8007cb4:	1b64      	subs	r4, r4, r5
 8007cb6:	10a4      	asrs	r4, r4, #2
 8007cb8:	42a6      	cmp	r6, r4
 8007cba:	d109      	bne.n	8007cd0 <__libc_init_array+0x24>
 8007cbc:	2600      	movs	r6, #0
 8007cbe:	f000 f82b 	bl	8007d18 <_init>
 8007cc2:	4d0a      	ldr	r5, [pc, #40]	; (8007cec <__libc_init_array+0x40>)
 8007cc4:	4c0a      	ldr	r4, [pc, #40]	; (8007cf0 <__libc_init_array+0x44>)
 8007cc6:	1b64      	subs	r4, r4, r5
 8007cc8:	10a4      	asrs	r4, r4, #2
 8007cca:	42a6      	cmp	r6, r4
 8007ccc:	d105      	bne.n	8007cda <__libc_init_array+0x2e>
 8007cce:	bd70      	pop	{r4, r5, r6, pc}
 8007cd0:	00b3      	lsls	r3, r6, #2
 8007cd2:	58eb      	ldr	r3, [r5, r3]
 8007cd4:	4798      	blx	r3
 8007cd6:	3601      	adds	r6, #1
 8007cd8:	e7ee      	b.n	8007cb8 <__libc_init_array+0xc>
 8007cda:	00b3      	lsls	r3, r6, #2
 8007cdc:	58eb      	ldr	r3, [r5, r3]
 8007cde:	4798      	blx	r3
 8007ce0:	3601      	adds	r6, #1
 8007ce2:	e7f2      	b.n	8007cca <__libc_init_array+0x1e>
 8007ce4:	08007eb4 	.word	0x08007eb4
 8007ce8:	08007eb4 	.word	0x08007eb4
 8007cec:	08007eb4 	.word	0x08007eb4
 8007cf0:	08007eb8 	.word	0x08007eb8

08007cf4 <memcpy>:
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	b510      	push	{r4, lr}
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d100      	bne.n	8007cfe <memcpy+0xa>
 8007cfc:	bd10      	pop	{r4, pc}
 8007cfe:	5ccc      	ldrb	r4, [r1, r3]
 8007d00:	54c4      	strb	r4, [r0, r3]
 8007d02:	3301      	adds	r3, #1
 8007d04:	e7f8      	b.n	8007cf8 <memcpy+0x4>

08007d06 <memset>:
 8007d06:	0003      	movs	r3, r0
 8007d08:	1812      	adds	r2, r2, r0
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d100      	bne.n	8007d10 <memset+0xa>
 8007d0e:	4770      	bx	lr
 8007d10:	7019      	strb	r1, [r3, #0]
 8007d12:	3301      	adds	r3, #1
 8007d14:	e7f9      	b.n	8007d0a <memset+0x4>
	...

08007d18 <_init>:
 8007d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1a:	46c0      	nop			; (mov r8, r8)
 8007d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1e:	bc08      	pop	{r3}
 8007d20:	469e      	mov	lr, r3
 8007d22:	4770      	bx	lr

08007d24 <_fini>:
 8007d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d26:	46c0      	nop			; (mov r8, r8)
 8007d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2a:	bc08      	pop	{r3}
 8007d2c:	469e      	mov	lr, r3
 8007d2e:	4770      	bx	lr
